// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/aarch64/inst.isle
// - src/isa/aarch64/inst_neon.isle
// - src/isa/aarch64/lower.isle
// - src/isa/aarch64/lower_dynamic_neon.isle
// - /home/runner/QuantumFuseBlockchain/QuantumFuse/core/target/release/build/cranelift-codegen-216107087f90b376/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn simm32(&mut self, arg0: Imm64) -> Option<i32>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_struct_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, u64)>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn sign_return_address_disabled(&mut self) -> Option<Unit>;
    fn use_lse(&mut self, arg0: Inst) -> Option<()>;
    fn move_wide_const_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<MoveWideConst>;
    fn move_wide_const_from_inverted_u64(&mut self, arg0: Type, arg1: u64)
        -> Option<MoveWideConst>;
    fn imm_logic_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ImmLogic>;
    fn imm_size_from_type(&mut self, arg0: Type) -> Option<u16>;
    fn imm_logic_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmLogic>;
    fn imm_shift_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ImmShift>;
    fn imm_shift_from_u8(&mut self, arg0: u8) -> ImmShift;
    fn imm12_from_u64(&mut self, arg0: u64) -> Option<Imm12>;
    fn u8_into_uimm5(&mut self, arg0: u8) -> UImm5;
    fn u8_into_imm12(&mut self, arg0: u8) -> Imm12;
    fn u64_into_imm_logic(&mut self, arg0: Type, arg1: u64) -> ImmLogic;
    fn branch_target(&mut self, arg0: MachLabel) -> BranchTarget;
    fn targets_jt_space(&mut self, arg0: &BoxVecMachLabel) -> CodeOffset;
    fn min_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn max_fp_value(&mut self, arg0: bool, arg1: u8, arg2: u8) -> Reg;
    fn fpu_op_ri_ushr(&mut self, arg0: u8, arg1: u8) -> FPUOpRI;
    fn fpu_op_ri_sli(&mut self, arg0: u8, arg1: u8) -> FPUOpRIMod;
    fn lshr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<ShiftOpAndAmt>;
    fn lshl_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn ashr_from_u64(&mut self, arg0: Type, arg1: u64) -> Option<ShiftOpAndAmt>;
    fn integral_ty(&mut self, arg0: Type) -> Option<Type>;
    fn valid_atomic_transaction(&mut self, arg0: Type) -> Option<Type>;
    fn is_zero_simm9(&mut self, arg0: &SImm9) -> Option<Unit>;
    fn is_zero_uimm12(&mut self, arg0: &UImm12Scaled) -> Option<Unit>;
    fn extended_value_from_value(&mut self, arg0: Value) -> Option<ExtendedValue>;
    fn put_extended_in_reg(&mut self, arg0: &ExtendedValue) -> Reg;
    fn get_extended_op(&mut self, arg0: &ExtendedValue) -> ExtendOp;
    fn nzcv(&mut self, arg0: bool, arg1: bool, arg2: bool, arg3: bool) -> NZCV;
    fn cond_br_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_not_zero(&mut self, arg0: Reg) -> CondBrKind;
    fn cond_br_cond(&mut self, arg0: &Cond) -> CondBrKind;
    fn zero_reg(&mut self) -> Reg;
    fn fp_reg(&mut self) -> Reg;
    fn stack_reg(&mut self) -> Reg;
    fn writable_link_reg(&mut self) -> WritableReg;
    fn writable_zero_reg(&mut self) -> WritableReg;
    fn load_constant64_full(&mut self, arg0: Type, arg1: &ImmExtend, arg2: u64) -> Reg;
    fn simm7_scaled_from_i64(&mut self, arg0: i64, arg1: Type) -> Option<SImm7Scaled>;
    fn uimm12_scaled_from_i64(&mut self, arg0: i64, arg1: Type) -> Option<UImm12Scaled>;
    fn simm9_from_i64(&mut self, arg0: i64) -> Option<SImm9>;
    fn u64_low32_bits_unset(&mut self, arg0: u64) -> Option<u64>;
    fn fp_cond_code(&mut self, arg0: &FloatCC) -> Cond;
    fn cond_code(&mut self, arg0: &IntCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn float_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn float_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &FloatCC) -> VecMisc2;
    fn fcmp_zero_cond(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn fcmp_zero_cond_not_eq(&mut self, arg0: &FloatCC) -> Option<FloatCC>;
    fn int_cc_cmp_zero_to_vec_misc_op(&mut self, arg0: &IntCC) -> VecMisc2;
    fn int_cc_cmp_zero_to_vec_misc_op_swap(&mut self, arg0: &IntCC) -> VecMisc2;
    fn icmp_zero_cond(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn icmp_zero_cond_not_eq(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn preg_sp(&mut self) -> PReg;
    fn preg_fp(&mut self) -> PReg;
    fn preg_link(&mut self) -> PReg;
    fn preg_pinned(&mut self) -> PReg;
    fn gen_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_call_indirect(&mut self, arg0: SigRef, arg1: Value, arg2: ValueSlice) -> InstOutput;
    fn asimd_mov_mod_imm_zero(&mut self, arg0: &ScalarSize) -> ASIMDMovModImm;
    fn asimd_mov_mod_imm_from_u64(
        &mut self,
        arg0: u64,
        arg1: &ScalarSize,
    ) -> Option<ASIMDMovModImm>;
    fn asimd_fp_mod_imm_from_u64(&mut self, arg0: u64, arg1: &ScalarSize) -> Option<ASIMDFPModImm>;
    fn shuffle_dup8_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup16_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup32_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn shuffle_dup64_from_imm(&mut self, arg0: Immediate) -> Option<u8>;
    fn vec_extract_imm4_from_immediate(&mut self, arg0: Immediate) -> Option<u8>;
    fn shift_masked_imm(&mut self, arg0: Type, arg1: u64) -> u8;
    fn shift_mask(&mut self, arg0: Type) -> ImmLogic;
    fn negate_imm_shift(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn rotr_mask(&mut self, arg0: Type) -> ImmLogic;
    fn rotr_opposite_amount(&mut self, arg0: Type, arg1: ImmShift) -> ImmShift;
    fn test_and_compare_bit_const(&mut self, arg0: Type, arg1: u64) -> Option<u8>;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) {
        (0, None)
    }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 21.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 357.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 399.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 418.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 426.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/aarch64/inst.isle line 2.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop4,
    AluRRR {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRRR {
        alu_op: ALUOp3,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    AluRRImm12 {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imm12: Imm12,
    },
    AluRRImmLogic {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        imml: ImmLogic,
    },
    AluRRImmShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        immshift: ImmShift,
    },
    AluRRRShift {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        shiftop: ShiftOpAndAmt,
    },
    AluRRRExtend {
        alu_op: ALUOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    BitRR {
        op: BitOp,
        size: OperandSize,
        rd: WritableReg,
        rn: Reg,
    },
    ULoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad8 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad16 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    SLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    ULoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    Store8 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store16 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    Store64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    StoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    LoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    Mov {
        size: OperandSize,
        rd: WritableReg,
        rm: Reg,
    },
    MovFromPReg {
        rd: WritableReg,
        rm: PReg,
    },
    MovToPReg {
        rd: PReg,
        rm: Reg,
    },
    MovWide {
        op: MoveWideOp,
        rd: WritableReg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    MovK {
        rd: WritableReg,
        rn: Reg,
        imm: MoveWideConst,
        size: OperandSize,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CSel {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSNeg {
        rd: WritableReg,
        cond: Cond,
        rn: Reg,
        rm: Reg,
    },
    CSet {
        rd: WritableReg,
        cond: Cond,
    },
    CSetm {
        rd: WritableReg,
        cond: Cond,
    },
    CCmp {
        size: OperandSize,
        rn: Reg,
        rm: Reg,
        nzcv: NZCV,
        cond: Cond,
    },
    CCmpImm {
        size: OperandSize,
        rn: Reg,
        imm: UImm5,
        nzcv: NZCV,
        cond: Cond,
    },
    AtomicRMWLoop {
        ty: Type,
        op: AtomicRMWLoopOp,
        flags: MemFlags,
        addr: Reg,
        operand: Reg,
        oldval: WritableReg,
        scratch1: WritableReg,
        scratch2: WritableReg,
    },
    AtomicCASLoop {
        ty: Type,
        flags: MemFlags,
        addr: Reg,
        expected: Reg,
        replacement: Reg,
        oldval: WritableReg,
        scratch: WritableReg,
    },
    AtomicRMW {
        op: AtomicRMWOp,
        rs: Reg,
        rt: WritableReg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    AtomicCAS {
        rd: WritableReg,
        rs: Reg,
        rt: Reg,
        rn: Reg,
        ty: Type,
        flags: MemFlags,
    },
    LoadAcquire {
        access_ty: Type,
        rt: WritableReg,
        rn: Reg,
        flags: MemFlags,
    },
    StoreRelease {
        access_ty: Type,
        rt: Reg,
        rn: Reg,
        flags: MemFlags,
    },
    Fence,
    Csdb,
    FpuMove32 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove128 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMoveFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    FpuExtend {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuRR {
        fpu_op: FPUOp1,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRI {
        fpu_op: FPUOpRI,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRIMod {
        fpu_op: FPUOpRIMod,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        size: ScalarSize,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuCmp {
        size: ScalarSize,
        rn: Reg,
        rm: Reg,
    },
    FpuLoad32 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore32 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad64 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore64 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoad128 {
        rd: WritableReg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuStore128 {
        rd: Reg,
        mem: AMode,
        flags: MemFlags,
    },
    FpuLoadP64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP64 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuLoadP128 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuStoreP128 {
        rt: Reg,
        rt2: Reg,
        mem: PairAMode,
        flags: MemFlags,
    },
    FpuToInt {
        op: FpuToIntOp,
        rd: WritableReg,
        rn: Reg,
    },
    IntToFpu {
        op: IntToFpuOp,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCSel32 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuCSel64 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    FpuRound {
        op: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    MovToFpu {
        rd: WritableReg,
        rn: Reg,
        size: ScalarSize,
    },
    FpuMoveFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: ScalarSize,
    },
    MovToVec {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
    },
    MovFromVec {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: ScalarSize,
    },
    MovFromVecSigned {
        rd: WritableReg,
        rn: Reg,
        idx: u8,
        size: VectorSize,
        scalar_size: OperandSize,
    },
    VecDup {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecDupFromFpu {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        lane: u8,
    },
    VecDupFPImm {
        rd: WritableReg,
        imm: ASIMDFPModImm,
        size: VectorSize,
    },
    VecDupImm {
        rd: WritableReg,
        imm: ASIMDMovModImm,
        invert: bool,
        size: VectorSize,
    },
    VecExtend {
        t: VecExtendOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
        lane_size: ScalarSize,
    },
    VecMovElement {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        dest_idx: u8,
        src_idx: u8,
        size: VectorSize,
    },
    VecRRLong {
        op: VecRRLongOp,
        rd: WritableReg,
        rn: Reg,
        high_half: bool,
    },
    VecRRNarrowLow {
        op: VecRRNarrowOp,
        rd: WritableReg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRNarrowHigh {
        op: VecRRNarrowOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_size: ScalarSize,
    },
    VecRRPair {
        op: VecPairOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRRLong {
        alu_op: VecRRRLongOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRRLongMod {
        alu_op: VecRRRLongModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        high_half: bool,
    },
    VecRRPairLong {
        op: VecRRPairLongOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecRRR {
        alu_op: VecALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecRRRMod {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
    },
    VecFmlaElem {
        alu_op: VecALUModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
        size: VectorSize,
        idx: u8,
    },
    VecMisc {
        op: VecMisc2,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecLanes {
        op: VecLanesOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
    },
    VecShiftImm {
        op: VecShiftImmOp,
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecShiftImmMod {
        op: VecShiftImmModOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        size: VectorSize,
        imm: u8,
    },
    VecExtract {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        imm4: u8,
    },
    VecTbl {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecTblExt {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rm: Reg,
    },
    VecTbl2 {
        rd: WritableReg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecTbl2Ext {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        rn2: Reg,
        rm: Reg,
    },
    VecLoadReplicate {
        rd: WritableReg,
        rn: Reg,
        size: VectorSize,
        flags: MemFlags,
    },
    VecCSel {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        cond: Cond,
    },
    MovToNZCV {
        rn: Reg,
    },
    MovFromNZCV {
        rd: WritableReg,
    },
    Call {
        info: BoxCallInfo,
    },
    CallInd {
        info: BoxCallIndInfo,
    },
    ReturnCall {
        callee: BoxExternalName,
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        callee: Reg,
        info: BoxReturnCallInfo,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret,
    AuthenticatedRet {
        key: APIKey,
        is_hint: bool,
    },
    Jump {
        dest: BranchTarget,
    },
    CondBr {
        taken: BranchTarget,
        not_taken: BranchTarget,
        kind: CondBrKind,
    },
    TestBitAndBranch {
        kind: TestBitAndBranchKind,
        taken: BranchTarget,
        not_taken: BranchTarget,
        rn: Reg,
        bit: u8,
    },
    TrapIf {
        kind: CondBrKind,
        trap_code: TrapCode,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Brk,
    Udf {
        trap_code: TrapCode,
    },
    Adr {
        rd: WritableReg,
        off: i32,
    },
    Adrp {
        rd: WritableReg,
        off: i32,
    },
    Word4 {
        data: u32,
    },
    Word8 {
        data: u64,
    },
    JTSequence {
        default: MachLabel,
        targets: BoxVecMachLabel,
        ridx: Reg,
        rtmp1: WritableReg,
        rtmp2: WritableReg,
    },
    LoadExtName {
        rd: WritableReg,
        name: BoxExternalName,
        offset: i64,
    },
    LoadAddr {
        rd: WritableReg,
        mem: AMode,
    },
    Paci {
        key: APIKey,
    },
    Xpaclri,
    Bti {
        targets: BranchTargetType,
    },
    VirtualSPOffsetAdj {
        offset: i64,
    },
    EmitIsland {
        needed_space: CodeOffset,
    },
    ElfTlsGetAddr {
        symbol: BoxExternalName,
        rd: WritableReg,
        tmp: WritableReg,
    },
    MachOTlsGetAddr {
        symbol: ExternalName,
        rd: WritableReg,
    },
    Unwind {
        inst: UnwindInst,
    },
    DummyUse {
        reg: Reg,
    },
    StackProbeLoop {
        start: WritableReg,
        end: Reg,
        step: Imm12,
    },
}

/// Internal type ALUOp: defined at src/isa/aarch64/inst.isle line 991.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add,
    Sub,
    Orr,
    OrrNot,
    And,
    AndS,
    AndNot,
    Eor,
    EorNot,
    AddS,
    SubS,
    SMulH,
    UMulH,
    SDiv,
    UDiv,
    RotR,
    Lsr,
    Asr,
    Lsl,
    Adc,
    AdcS,
    Sbc,
    SbcS,
}

/// Internal type ALUOp3: defined at src/isa/aarch64/inst.isle line 1029.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp3 {
    MAdd,
    MSub,
    UMAddL,
    SMAddL,
}

/// Internal type MoveWideOp: defined at src/isa/aarch64/inst.isle line 1041.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum MoveWideOp {
    MovZ,
    MovN,
}

/// Internal type BitOp: defined at src/isa/aarch64/inst.isle line 1081.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BitOp {
    RBit,
    Clz,
    Cls,
    Rev16,
    Rev32,
    Rev64,
}

/// Internal type AMode: defined at src/isa/aarch64/inst.isle line 1098.
#[derive(Clone, Debug)]
pub enum AMode {
    SPPostIndexed {
        simm9: SImm9,
    },
    SPPreIndexed {
        simm9: SImm9,
    },
    RegReg {
        rn: Reg,
        rm: Reg,
    },
    RegScaled {
        rn: Reg,
        rm: Reg,
    },
    RegScaledExtended {
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    RegExtended {
        rn: Reg,
        rm: Reg,
        extendop: ExtendOp,
    },
    Unscaled {
        rn: Reg,
        simm9: SImm9,
    },
    UnsignedOffset {
        rn: Reg,
        uimm12: UImm12Scaled,
    },
    Label {
        label: MemLabel,
    },
    RegOffset {
        rn: Reg,
        off: i64,
    },
    SPOffset {
        off: i64,
    },
    FPOffset {
        off: i64,
    },
    Const {
        addr: VCodeConstant,
    },
    IncomingArg {
        off: i64,
    },
    NominalSPOffset {
        off: i64,
    },
}

/// Internal type PairAMode: defined at src/isa/aarch64/inst.isle line 1202.
#[derive(Clone, Debug)]
pub enum PairAMode {
    SignedOffset { reg: Reg, simm7: SImm7Scaled },
    SPPreIndexed { simm7: SImm7Scaled },
    SPPostIndexed { simm7: SImm7Scaled },
}

/// Internal type TestBitAndBranchKind: defined at src/isa/aarch64/inst.isle line 1222.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum TestBitAndBranchKind {
    Z,
    NZ,
}

/// Internal type FPUOp1: defined at src/isa/aarch64/inst.isle line 1318.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs,
    Neg,
    Sqrt,
    Cvt32To64,
    Cvt64To32,
}

/// Internal type FPUOp2: defined at src/isa/aarch64/inst.isle line 1328.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add,
    Sub,
    Mul,
    Div,
    Max,
    Min,
}

/// Internal type FPUOp3: defined at src/isa/aarch64/inst.isle line 1339.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd,
}

/// Internal type FpuToIntOp: defined at src/isa/aarch64/inst.isle line 1345.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuToIntOp {
    F32ToU32,
    F32ToI32,
    F32ToU64,
    F32ToI64,
    F64ToU32,
    F64ToI32,
    F64ToU64,
    F64ToI64,
}

/// Internal type IntToFpuOp: defined at src/isa/aarch64/inst.isle line 1358.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum IntToFpuOp {
    U32ToF32,
    I32ToF32,
    U32ToF64,
    I32ToF64,
    U64ToF32,
    I64ToF32,
    U64ToF64,
    I64ToF64,
}

/// Internal type FpuRoundMode: defined at src/isa/aarch64/inst.isle line 1372.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Minus32,
    Minus64,
    Plus32,
    Plus64,
    Zero32,
    Zero64,
    Nearest32,
    Nearest64,
}

/// Internal type VecExtendOp: defined at src/isa/aarch64/inst.isle line 1385.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecExtendOp {
    Sxtl,
    Uxtl,
}

/// Internal type VecALUOp: defined at src/isa/aarch64/inst.isle line 1394.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUOp {
    Sqadd,
    Uqadd,
    Sqsub,
    Uqsub,
    Cmeq,
    Cmge,
    Cmgt,
    Cmhs,
    Cmhi,
    Fcmeq,
    Fcmgt,
    Fcmge,
    And,
    Bic,
    Orr,
    Eor,
    Umaxp,
    Add,
    Sub,
    Mul,
    Sshl,
    Ushl,
    Umin,
    Smin,
    Umax,
    Smax,
    Urhadd,
    Fadd,
    Fsub,
    Fdiv,
    Fmax,
    Fmin,
    Fmul,
    Addp,
    Zip1,
    Zip2,
    Sqrdmulh,
    Uzp1,
    Uzp2,
    Trn1,
    Trn2,
}

/// Internal type VecALUModOp: defined at src/isa/aarch64/inst.isle line 1481.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecALUModOp {
    Bsl,
    Fmla,
    Fmls,
}

/// Internal type VecMisc2: defined at src/isa/aarch64/inst.isle line 1492.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecMisc2 {
    Not,
    Neg,
    Abs,
    Fabs,
    Fneg,
    Fsqrt,
    Rev16,
    Rev32,
    Rev64,
    Fcvtzs,
    Fcvtzu,
    Scvtf,
    Ucvtf,
    Frintn,
    Frintz,
    Frintm,
    Frintp,
    Cnt,
    Cmeq0,
    Cmge0,
    Cmgt0,
    Cmle0,
    Cmlt0,
    Fcmeq0,
    Fcmge0,
    Fcmgt0,
    Fcmle0,
    Fcmlt0,
}

/// Internal type VecRRLongOp: defined at src/isa/aarch64/inst.isle line 1553.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRLongOp {
    Fcvtl16,
    Fcvtl32,
    Shll8,
    Shll16,
    Shll32,
}

/// Internal type VecRRNarrowOp: defined at src/isa/aarch64/inst.isle line 1568.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRNarrowOp {
    Xtn,
    Sqxtn,
    Sqxtun,
    Uqxtn,
    Fcvtn,
}

/// Internal type VecRRRLongOp: defined at src/isa/aarch64/inst.isle line 1582.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongOp {
    Smull8,
    Smull16,
    Smull32,
    Umull8,
    Umull16,
    Umull32,
}

/// Internal type VecRRRLongModOp: defined at src/isa/aarch64/inst.isle line 1594.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRRLongModOp {
    Umlal8,
    Umlal16,
    Umlal32,
}

/// Internal type VecPairOp: defined at src/isa/aarch64/inst.isle line 1603.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecPairOp {
    Addp,
}

/// Internal type VecRRPairLongOp: defined at src/isa/aarch64/inst.isle line 1611.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecRRPairLongOp {
    Saddlp8,
    Saddlp16,
    Uaddlp8,
    Uaddlp16,
}

/// Internal type VecLanesOp: defined at src/isa/aarch64/inst.isle line 1622.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecLanesOp {
    Addv,
    Uminv,
}

/// Internal type VecShiftImmOp: defined at src/isa/aarch64/inst.isle line 1631.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmOp {
    Shl,
    Ushr,
    Sshr,
}

/// Internal type VecShiftImmModOp: defined at src/isa/aarch64/inst.isle line 1642.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftImmModOp {
    Sli,
}

/// Internal type AtomicRMWOp: defined at src/isa/aarch64/inst.isle line 1649.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWOp {
    Add,
    Clr,
    Eor,
    Set,
    Smax,
    Smin,
    Umax,
    Umin,
    Swp,
}

/// Internal type AtomicRMWLoopOp: defined at src/isa/aarch64/inst.isle line 1664.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum AtomicRMWLoopOp {
    Add,
    Sub,
    And,
    Nand,
    Eor,
    Orr,
    Smax,
    Smin,
    Umax,
    Umin,
    Xchg,
}

/// Internal type APIKey: defined at src/isa/aarch64/inst.isle line 1680.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum APIKey {
    ASP,
    BSP,
    AZ,
    BZ,
}

/// Internal type BranchTargetType: defined at src/isa/aarch64/inst.isle line 1693.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum BranchTargetType {
    None,
    C,
    J,
    JC,
}

/// Internal type ImmExtend: defined at src/isa/aarch64/inst.isle line 2917.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ImmExtend {
    Sign,
    Zero,
}

/// Internal type FlagsAndCC: defined at src/isa/aarch64/inst.isle line 3828.
#[derive(Clone, Debug)]
pub enum FlagsAndCC {
    FlagsAndCC { flags: ProducesFlags, cc: IntCC },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src/prelude.isle line 323.
    return v5;
}

// Generated as internal constructor for term is_ref_type.
pub fn constructor_is_ref_type<C: Context>(ctx: &mut C, arg0: Type) -> bool {
    match arg0 {
        R32 => {
            // Rule at src/prelude.isle line 330.
            return true;
        }
        R64 => {
            // Rule at src/prelude.isle line 331.
            return true;
        }
        _ => {}
    }
    // Rule at src/prelude.isle line 332.
    return false;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 73.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 77.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 97.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 146.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 157.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 168.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 167"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 173.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 172"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 178.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 177"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 367.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 369.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 372.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 366"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 380.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 385.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 387.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 389.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 384"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 414.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 413"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 444.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 445.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 443"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 450.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 452.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 449"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 465.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 459.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 458"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 496.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 502.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 514.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 530.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 537.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 550.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 490.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 482.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 480"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 568.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 575.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 586.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 591.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 596.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 601.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 606.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 584"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 615.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 623.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 632.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 640.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 649.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 709.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 717.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 726.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 734.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 743.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 662.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 670.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 679.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 687.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 696.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 756.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 764.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 773.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 781.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 790.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 802.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 810.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 827.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 819.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 835.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 844.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 612"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 1044.
    return v2;
}

// Generated as internal constructor for term operand_size.
pub fn constructor_operand_size<C: Context>(ctx: &mut C, arg0: Type) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/aarch64/inst.isle line 1226.
        return OperandSize::Size32;
    }
    let v4 = C::fits_in_64(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/aarch64/inst.isle line 1227.
        return OperandSize::Size64;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "operand_size", "src/isa/aarch64/inst.isle line 1225"
    )
}

// Generated as internal constructor for term scalar_size.
pub fn constructor_scalar_size<C: Context>(ctx: &mut C, arg0: Type) -> ScalarSize {
    match arg0 {
        I8 => {
            // Rule at src/isa/aarch64/inst.isle line 1239.
            return ScalarSize::Size8;
        }
        I16 => {
            // Rule at src/isa/aarch64/inst.isle line 1240.
            return ScalarSize::Size16;
        }
        I32 => {
            // Rule at src/isa/aarch64/inst.isle line 1241.
            return ScalarSize::Size32;
        }
        I64 => {
            // Rule at src/isa/aarch64/inst.isle line 1242.
            return ScalarSize::Size64;
        }
        I128 => {
            // Rule at src/isa/aarch64/inst.isle line 1243.
            return ScalarSize::Size128;
        }
        F32 => {
            // Rule at src/isa/aarch64/inst.isle line 1245.
            return ScalarSize::Size32;
        }
        F64 => {
            // Rule at src/isa/aarch64/inst.isle line 1246.
            return ScalarSize::Size64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "scalar_size", "src/isa/aarch64/inst.isle line 1237"
    )
}

// Generated as internal constructor for term lane_size.
pub fn constructor_lane_size<C: Context>(ctx: &mut C, arg0: Type) -> ScalarSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                // Rule at src/isa/aarch64/inst.isle line 1250.
                return ScalarSize::Size8;
            }
            0x10 => {
                // Rule at src/isa/aarch64/inst.isle line 1251.
                return ScalarSize::Size16;
            }
            0x20 => {
                // Rule at src/isa/aarch64/inst.isle line 1252.
                return ScalarSize::Size32;
            }
            0x40 => {
                // Rule at src/isa/aarch64/inst.isle line 1253.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    let v9 = C::dynamic_lane(ctx, arg0);
    if let Some(v10) = v9 {
        match v10.0 {
            0x8 => {
                // Rule at src/isa/aarch64/inst.isle line 1254.
                return ScalarSize::Size8;
            }
            0x10 => {
                // Rule at src/isa/aarch64/inst.isle line 1255.
                return ScalarSize::Size16;
            }
            0x20 => {
                // Rule at src/isa/aarch64/inst.isle line 1256.
                return ScalarSize::Size32;
            }
            0x40 => {
                // Rule at src/isa/aarch64/inst.isle line 1257.
                return ScalarSize::Size64;
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_size", "src/isa/aarch64/inst.isle line 1249"
    )
}

// Generated as internal constructor for term vector_lane_size.
pub fn constructor_vector_lane_size<C: Context>(ctx: &mut C, arg0: &VectorSize) -> ScalarSize {
    match arg0 {
        &VectorSize::Size8x8 => {
            // Rule at src/isa/aarch64/inst.isle line 1262.
            return ScalarSize::Size8;
        }
        &VectorSize::Size8x16 => {
            // Rule at src/isa/aarch64/inst.isle line 1261.
            return ScalarSize::Size8;
        }
        &VectorSize::Size16x4 => {
            // Rule at src/isa/aarch64/inst.isle line 1264.
            return ScalarSize::Size16;
        }
        &VectorSize::Size16x8 => {
            // Rule at src/isa/aarch64/inst.isle line 1263.
            return ScalarSize::Size16;
        }
        &VectorSize::Size32x2 => {
            // Rule at src/isa/aarch64/inst.isle line 1266.
            return ScalarSize::Size32;
        }
        &VectorSize::Size32x4 => {
            // Rule at src/isa/aarch64/inst.isle line 1265.
            return ScalarSize::Size32;
        }
        &VectorSize::Size64x2 => {
            // Rule at src/isa/aarch64/inst.isle line 1267.
            return ScalarSize::Size64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vector_lane_size", "src/isa/aarch64/inst.isle line 1260"
    )
}

// Generated as internal constructor for term vector_size.
pub fn constructor_vector_size<C: Context>(ctx: &mut C, arg0: Type) -> VectorSize {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                match v2.1 {
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1302.
                        return VectorSize::Size8x8;
                    }
                    0x10 => {
                        // Rule at src/isa/aarch64/inst.isle line 1303.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10 => {
                match v2.1 {
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1304.
                        return VectorSize::Size16x4;
                    }
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1305.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20 => {
                match v2.1 {
                    0x2 => {
                        // Rule at src/isa/aarch64/inst.isle line 1306.
                        return VectorSize::Size32x2;
                    }
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1307.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/aarch64/inst.isle line 1308.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    let v12 = C::dynamic_lane(ctx, arg0);
    if let Some(v13) = v12 {
        match v13.0 {
            0x8 => {
                match v13.1 {
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1309.
                        return VectorSize::Size8x8;
                    }
                    0x10 => {
                        // Rule at src/isa/aarch64/inst.isle line 1310.
                        return VectorSize::Size8x16;
                    }
                    _ => {}
                }
            }
            0x10 => {
                match v13.1 {
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1311.
                        return VectorSize::Size16x4;
                    }
                    0x8 => {
                        // Rule at src/isa/aarch64/inst.isle line 1312.
                        return VectorSize::Size16x8;
                    }
                    _ => {}
                }
            }
            0x20 => {
                match v13.1 {
                    0x2 => {
                        // Rule at src/isa/aarch64/inst.isle line 1313.
                        return VectorSize::Size32x2;
                    }
                    0x4 => {
                        // Rule at src/isa/aarch64/inst.isle line 1314.
                        return VectorSize::Size32x4;
                    }
                    _ => {}
                }
            }
            0x40 => {
                if v13.1 == 0x2 {
                    // Rule at src/isa/aarch64/inst.isle line 1315.
                    return VectorSize::Size64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vector_size", "src/isa/aarch64/inst.isle line 1301"
    )
}

// Generated as internal constructor for term imm12_from_negated_value.
pub fn constructor_imm12_from_negated_value<C: Context>(ctx: &mut C, arg0: Value) -> Option<Imm12> {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::first_result(ctx, v2);
        if let Some(v4) = v3 {
            let v6 = &C::inst_data(ctx, v2);
            if let &InstructionData::UnaryImm {
                opcode: ref v7,
                imm: v8,
            } = v6
            {
                if let &Opcode::Iconst = v7 {
                    let v5 = C::value_type(ctx, v4);
                    let v9 = C::i64_sextend_imm64(ctx, v5, v8);
                    let v10 = C::i64_neg(ctx, v9);
                    let v11 = C::i64_as_u64(ctx, v10);
                    let v12 = C::imm12_from_u64(ctx, v11);
                    if let Some(v13) = v12 {
                        // Rule at src/isa/aarch64/inst.isle line 1810.
                        return Some(v13);
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term value_regs_zero.
pub fn constructor_value_regs_zero<C: Context>(ctx: &mut C) -> ValueRegs {
    let v3 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v4 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v5 = C::value_regs(ctx, v3, v4);
    // Rule at src/isa/aarch64/inst.isle line 1856.
    return v5;
}

// Generated as internal constructor for term mov.
pub fn constructor_mov<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &constructor_operand_size(ctx, arg1);
    let v5 = MInst::Mov {
        size: v4.clone(),
        rd: v3,
        rm: arg0,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1864.
    return v7;
}

// Generated as internal constructor for term movz.
pub fn constructor_movz<C: Context>(ctx: &mut C, arg0: MoveWideConst, arg1: &OperandSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovZ,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1871.
    return v7;
}

// Generated as internal constructor for term movn.
pub fn constructor_movn<C: Context>(ctx: &mut C, arg0: MoveWideConst, arg1: &OperandSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovWide {
        op: MoveWideOp::MovN,
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1878.
    return v7;
}

// Generated as internal constructor for term alu_rr_imm_logic.
pub fn constructor_alu_rr_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmLogic,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmLogic {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imml: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1885.
    return v9;
}

// Generated as internal constructor for term alu_rr_imm_shift.
pub fn constructor_alu_rr_imm_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: ImmShift,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImmShift {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        immshift: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1892.
    return v9;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRR {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1899.
    return v9;
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: &VecALUOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRR {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1906.
    return v8;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp1,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRR {
        fpu_op: arg0.clone(),
        size: arg2.clone(),
        rd: v4,
        rn: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1913.
    return v7;
}

// Generated as internal constructor for term vec_rrr_mod.
pub fn constructor_vec_rrr_mod<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 1921.
    return v9;
}

// Generated as internal constructor for term vec_fmla_elem.
pub fn constructor_vec_fmla_elem<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: &VectorSize,
    arg5: u8,
) -> Reg {
    let v7 = C::temp_writable_reg(ctx, I8X16);
    let v8 = MInst::VecFmlaElem {
        alu_op: arg0.clone(),
        rd: v7,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        size: arg4.clone(),
        idx: arg5,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v7);
    // Rule at src/isa/aarch64/inst.isle line 1929.
    return v10;
}

// Generated as internal constructor for term fpu_rri.
pub fn constructor_fpu_rri<C: Context>(ctx: &mut C, arg0: &FPUOpRI, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRRI {
        fpu_op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1935.
    return v6;
}

// Generated as internal constructor for term fpu_rri_mod.
pub fn constructor_fpu_rri_mod<C: Context>(
    ctx: &mut C,
    arg0: &FPUOpRIMod,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, F64);
    let v5 = MInst::FpuRRIMod {
        fpu_op: arg0.clone(),
        rd: v4,
        ri: arg1,
        rn: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1941.
    return v7;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp2,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, F64);
    let v6 = MInst::FpuRRR {
        fpu_op: arg0.clone(),
        size: arg3.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1948.
    return v8;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &FPUOp3,
    arg1: &ScalarSize,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, F64);
    let v7 = MInst::FpuRRRR {
        fpu_op: arg0.clone(),
        size: arg1.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 1955.
    return v9;
}

// Generated as internal constructor for term fpu_cmp.
pub fn constructor_fpu_cmp<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = MInst::FpuCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 1962.
    return v4;
}

// Generated as internal constructor for term vec_lanes.
pub fn constructor_vec_lanes<C: Context>(
    ctx: &mut C,
    arg0: &VecLanesOp,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLanes {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1968.
    return v7;
}

// Generated as internal constructor for term vec_shift_imm.
pub fn constructor_vec_shift_imm<C: Context>(
    ctx: &mut C,
    arg0: &VecShiftImmOp,
    arg1: u8,
    arg2: Reg,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecShiftImm {
        op: arg0.clone(),
        rd: v5,
        rn: arg2,
        size: arg3.clone(),
        imm: arg1,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 1975.
    return v8;
}

// Generated as internal constructor for term vec_dup.
pub fn constructor_vec_dup<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDup {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 1982.
    return v6;
}

// Generated as internal constructor for term vec_dup_from_fpu.
pub fn constructor_vec_dup_from_fpu<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: u8,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecDupFromFpu {
        rd: v4,
        rn: arg0,
        size: arg1.clone(),
        lane: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1989.
    return v7;
}

// Generated as internal constructor for term vec_dup_imm.
pub fn constructor_vec_dup_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDMovModImm,
    arg1: bool,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecDupImm {
        rd: v4,
        imm: arg0,
        invert: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 1996.
    return v7;
}

// Generated as internal constructor for term alu_rr_imm12.
pub fn constructor_alu_rr_imm12<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Imm12,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg1);
    let v7 = MInst::AluRRImm12 {
        alu_op: arg0.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg2,
        imm12: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2003.
    return v9;
}

// Generated as internal constructor for term alu_rrr_shift.
pub fn constructor_alu_rrr_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: ShiftOpAndAmt,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRShift {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        shiftop: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2010.
    return v10;
}

// Generated as internal constructor for term cmp_rr_shift.
pub fn constructor_cmp_rr_shift<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> ProducesFlags {
    let v5 = C::lshr_from_u64(ctx, I64, arg3);
    if let Some(v6) = v5 {
        let v8 = C::writable_zero_reg(ctx);
        let v9 = MInst::AluRRRShift {
            alu_op: ALUOp::SubS,
            size: arg0.clone(),
            rd: v8,
            rn: arg1,
            rm: arg2,
            shiftop: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsSideEffect { inst: v9 };
        // Rule at src/isa/aarch64/inst.isle line 2018.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_rr_shift", "src/isa/aarch64/inst.isle line 2017"
    )
}

// Generated as internal constructor for term cmp_rr_shift_asr.
pub fn constructor_cmp_rr_shift_asr<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: u64,
) -> ProducesFlags {
    let v5 = C::ashr_from_u64(ctx, I64, arg3);
    if let Some(v6) = v5 {
        let v8 = C::writable_zero_reg(ctx);
        let v9 = MInst::AluRRRShift {
            alu_op: ALUOp::SubS,
            size: arg0.clone(),
            rd: v8,
            rn: arg1,
            rm: arg2,
            shiftop: v6,
        };
        let v10 = ProducesFlags::ProducesFlagsSideEffect { inst: v9 };
        // Rule at src/isa/aarch64/inst.isle line 2027.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_rr_shift_asr", "src/isa/aarch64/inst.isle line 2026"
    )
}

// Generated as internal constructor for term alu_rrr_extend.
pub fn constructor_alu_rrr_extend<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: &ExtendOp,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRExtend {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        extendop: arg4.clone(),
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2035.
    return v10;
}

// Generated as internal constructor for term alu_rr_extend_reg.
pub fn constructor_alu_rr_extend_reg<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: &ExtendedValue,
) -> Reg {
    let v4 = C::put_extended_in_reg(ctx, arg3);
    let v5 = &C::get_extended_op(ctx, arg3);
    let v6 = constructor_alu_rrr_extend(ctx, arg0, arg1, arg2, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 2043.
    return v6;
}

// Generated as internal constructor for term alu_rrrr.
pub fn constructor_alu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp3,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = &constructor_operand_size(ctx, arg1);
    let v8 = MInst::AluRRRR {
        alu_op: arg0.clone(),
        size: v7.clone(),
        rd: v6,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2050.
    return v10;
}

// Generated as internal constructor for term alu_rrr_with_flags_paired.
pub fn constructor_alu_rrr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ALUOp,
) -> ProducesFlags {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: arg3.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v5);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2057.
    return v9;
}

// Generated as internal constructor for term alu_rrr_with_flags_chained.
pub fn constructor_alu_rrr_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ALUOp,
) -> ConsumesAndProducesFlags {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: arg3.clone(),
        size: v6.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v5);
    let v9 = ConsumesAndProducesFlags::ReturnsReg {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2065.
    return v9;
}

// Generated as internal constructor for term bit_rr.
pub fn constructor_bit_rr<C: Context>(ctx: &mut C, arg0: &BitOp, arg1: Type, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = &constructor_operand_size(ctx, arg1);
    let v6 = MInst::BitRR {
        op: arg0.clone(),
        size: v5.clone(),
        rd: v4,
        rn: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2073.
    return v8;
}

// Generated as internal constructor for term add_with_flags_paired.
pub fn constructor_add_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::AddS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2080.
    return v9;
}

// Generated as internal constructor for term adc_paired.
pub fn constructor_adc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Adc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2088.
    return v9;
}

// Generated as internal constructor for term sub_with_flags_paired.
pub fn constructor_sub_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2096.
    return v9;
}

// Generated as internal constructor for term materialize_bool_result.
pub fn constructor_materialize_bool_result<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2105.
    return v5;
}

// Generated as internal constructor for term cmn_imm.
pub fn constructor_cmn_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 2112.
    return v6;
}

// Generated as internal constructor for term cmp.
pub fn constructor_cmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRR {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 2118.
    return v6;
}

// Generated as internal constructor for term cmp_imm.
pub fn constructor_cmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Imm12,
) -> ProducesFlags {
    let v4 = C::writable_zero_reg(ctx);
    let v5 = MInst::AluRRImm12 {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v4,
        rn: arg1,
        imm12: arg2,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 2124.
    return v6;
}

// Generated as internal constructor for term cmp64_imm.
pub fn constructor_cmp64_imm<C: Context>(ctx: &mut C, arg0: Reg, arg1: Imm12) -> ProducesFlags {
    let v3 = &constructor_cmp_imm(ctx, &OperandSize::Size64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2130.
    return v3.clone();
}

// Generated as internal constructor for term cmp_extend.
pub fn constructor_cmp_extend<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> ProducesFlags {
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRRExtend {
        alu_op: ALUOp::SubS,
        size: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        extendop: arg3.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/aarch64/inst.isle line 2134.
    return v7;
}

// Generated as internal constructor for term sbc_paired.
pub fn constructor_sbc_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v6 = &constructor_operand_size(ctx, arg0);
    let v7 = MInst::AluRRR {
        alu_op: ALUOp::Sbc,
        size: v6.clone(),
        rd: v4,
        rn: arg1,
        rm: arg2,
    };
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v7,
        result: v8,
    };
    // Rule at src/isa/aarch64/inst.isle line 2141.
    return v9;
}

// Generated as internal constructor for term vec_misc.
pub fn constructor_vec_misc<C: Context>(
    ctx: &mut C,
    arg0: &VecMisc2,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecMisc {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2149.
    return v7;
}

// Generated as internal constructor for term vec_tbl.
pub fn constructor_vec_tbl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecTbl {
        rd: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2156.
    return v6;
}

// Generated as internal constructor for term vec_tbl_ext.
pub fn constructor_vec_tbl_ext<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecTblExt {
        rd: v4,
        ri: arg0,
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2162.
    return v7;
}

// Generated as internal constructor for term vec_tbl2.
pub fn constructor_vec_tbl2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecTbl2 {
        rd: v5,
        rn: arg0,
        rn2: arg1,
        rm: arg2,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2169.
    return v8;
}

// Generated as internal constructor for term vec_tbl2_ext.
pub fn constructor_vec_tbl2_ext<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: Type,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecTbl2Ext {
        rd: v6,
        ri: arg0,
        rn: arg1,
        rn2: arg2,
        rm: arg3,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2178.
    return v9;
}

// Generated as internal constructor for term vec_rrr_long.
pub fn constructor_vec_rrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongOp,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRRLong {
        alu_op: arg0.clone(),
        rd: v5,
        rn: arg1,
        rm: arg2,
        high_half: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2187.
    return v8;
}

// Generated as internal constructor for term vec_rr_pair_long.
pub fn constructor_vec_rr_pair_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRPairLongOp,
    arg1: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecRRPairLong {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2194.
    return v6;
}

// Generated as internal constructor for term vec_rrrr_long.
pub fn constructor_vec_rrrr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRRLongModOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
    arg4: bool,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecRRRLongMod {
        alu_op: arg0.clone(),
        rd: v6,
        ri: arg1,
        rn: arg2,
        rm: arg3,
        high_half: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2201.
    return v9;
}

// Generated as internal constructor for term vec_rr_narrow_low.
pub fn constructor_vec_rr_narrow_low<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRNarrowLow {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        lane_size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2208.
    return v7;
}

// Generated as internal constructor for term vec_rr_narrow_high.
pub fn constructor_vec_rr_narrow_high<C: Context>(
    ctx: &mut C,
    arg0: &VecRRNarrowOp,
    arg1: Reg,
    arg2: Reg,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecRRNarrowHigh {
        op: arg0.clone(),
        rd: v5,
        ri: arg1,
        rn: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2216.
    return v8;
}

// Generated as internal constructor for term vec_rr_long.
pub fn constructor_vec_rr_long<C: Context>(
    ctx: &mut C,
    arg0: &VecRRLongOp,
    arg1: Reg,
    arg2: bool,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecRRLong {
        op: arg0.clone(),
        rd: v4,
        rn: arg1,
        high_half: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2223.
    return v7;
}

// Generated as internal constructor for term fpu_csel.
pub fn constructor_fpu_csel<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> ConsumesFlags {
    match arg0 {
        F32 => {
            let v5 = C::temp_writable_reg(ctx, F32);
            let v6 = MInst::FpuCSel32 {
                rd: v5,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v7 = C::writable_reg_to_reg(ctx, v5);
            let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v6,
                result: v7,
            };
            // Rule at src/isa/aarch64/inst.isle line 2231.
            return v8;
        }
        F64 => {
            let v10 = C::temp_writable_reg(ctx, F64);
            let v11 = MInst::FpuCSel64 {
                rd: v10,
                rn: arg2,
                rm: arg3,
                cond: arg1.clone(),
            };
            let v12 = C::writable_reg_to_reg(ctx, v10);
            let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v11,
                result: v12,
            };
            // Rule at src/isa/aarch64/inst.isle line 2237.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_csel", "src/isa/aarch64/inst.isle line 2230"
    )
}

// Generated as internal constructor for term vec_csel.
pub fn constructor_vec_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecCSel {
        rd: v4,
        rn: arg1,
        rm: arg2,
        cond: arg0.clone(),
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2245.
    return v7;
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(ctx: &mut C, arg0: &FpuRoundMode, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuRound {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2253.
    return v6;
}

// Generated as internal constructor for term fpu_move.
pub fn constructor_fpu_move<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v7 = C::fits_in_64(ctx, arg0);
    if let Some(v8) = v7 {
        let v10 = C::temp_writable_reg(ctx, F64);
        let v11 = MInst::FpuMove64 { rd: v10, rn: arg1 };
        let v12 = C::emit(ctx, &v11);
        let v13 = C::writable_reg_to_reg(ctx, v10);
        // Rule at src/isa/aarch64/inst.isle line 2264.
        return v13;
    }
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuMove128 { rd: v3, rn: arg1 };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2260.
    return v6;
}

// Generated as internal constructor for term mov_to_fpu.
pub fn constructor_mov_to_fpu<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::MovToFpu {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2271.
    return v6;
}

// Generated as internal constructor for term fpu_move_fp_imm.
pub fn constructor_fpu_move_fp_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDFPModImm,
    arg1: &ScalarSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuMoveFPImm {
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2278.
    return v6;
}

// Generated as internal constructor for term mov_to_vec.
pub fn constructor_mov_to_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: &VectorSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::MovToVec {
        rd: v5,
        ri: arg0,
        rn: arg1,
        idx: arg2,
        size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2285.
    return v8;
}

// Generated as internal constructor for term mov_vec_elem.
pub fn constructor_mov_vec_elem<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: u8,
    arg3: u8,
    arg4: &VectorSize,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I8X16);
    let v7 = MInst::VecMovElement {
        rd: v6,
        ri: arg0,
        rn: arg1,
        dest_idx: arg2,
        src_idx: arg3,
        size: arg4.clone(),
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2292.
    return v9;
}

// Generated as internal constructor for term mov_from_vec.
pub fn constructor_mov_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::MovFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2299.
    return v7;
}

// Generated as internal constructor for term mov_from_vec_signed.
pub fn constructor_mov_from_vec_signed<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
    arg3: &OperandSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::MovFromVecSigned {
        rd: v5,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
        scalar_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2306.
    return v8;
}

// Generated as internal constructor for term fpu_move_from_vec.
pub fn constructor_fpu_move_from_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::FpuMoveFromVec {
        rd: v4,
        rn: arg0,
        idx: arg1,
        size: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2312.
    return v7;
}

// Generated as internal constructor for term extend.
pub fn constructor_extend<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: bool,
    arg2: u8,
    arg3: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::Extend {
        rd: v5,
        rn: arg0,
        signed: arg1,
        from_bits: arg2,
        to_bits: arg3,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2319.
    return v8;
}

// Generated as internal constructor for term fpu_extend.
pub fn constructor_fpu_extend<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F32X4);
    let v4 = MInst::FpuExtend {
        rd: v3,
        rn: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2326.
    return v6;
}

// Generated as internal constructor for term vec_extend.
pub fn constructor_vec_extend<C: Context>(
    ctx: &mut C,
    arg0: &VecExtendOp,
    arg1: Reg,
    arg2: bool,
    arg3: &ScalarSize,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, I8X16);
    let v6 = MInst::VecExtend {
        t: arg0.clone(),
        rd: v5,
        rn: arg1,
        high_half: arg2,
        lane_size: arg3.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 2333.
    return v8;
}

// Generated as internal constructor for term vec_extract.
pub fn constructor_vec_extract<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: u8) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecExtract {
        rd: v4,
        rn: arg0,
        rm: arg1,
        imm4: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2340.
    return v7;
}

// Generated as internal constructor for term load_acquire.
pub fn constructor_load_acquire<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadAcquire {
        access_ty: arg0,
        rt: v4,
        rn: arg2,
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 2347.
    return v7;
}

// Generated as internal constructor for term store_release.
pub fn constructor_store_release<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreRelease {
        access_ty: arg0,
        rt: arg2,
        rn: arg3,
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/aarch64/inst.isle line 2354.
    return v5;
}

// Generated as internal constructor for term tst_imm.
pub fn constructor_tst_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmLogic,
) -> ProducesFlags {
    let v4 = &constructor_operand_size(ctx, arg0);
    let v5 = C::writable_zero_reg(ctx);
    let v6 = MInst::AluRRImmLogic {
        alu_op: ALUOp::AndS,
        size: v4.clone(),
        rd: v5,
        rn: arg1,
        imml: arg2,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/aarch64/inst.isle line 2362.
    return v7;
}

// Generated as internal constructor for term csel.
pub fn constructor_csel<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::CSel {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2376.
    return v7;
}

// Generated as internal constructor for term cset.
pub fn constructor_cset<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2384.
    return v5;
}

// Generated as internal constructor for term cset_paired.
pub fn constructor_cset_paired<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSet {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2391.
    return v5;
}

// Generated as internal constructor for term csetm.
pub fn constructor_csetm<C: Context>(ctx: &mut C, arg0: &Cond) -> ConsumesFlags {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::CSetm {
        rd: v2,
        cond: arg0.clone(),
    };
    let v4 = C::writable_reg_to_reg(ctx, v2);
    let v5 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v3,
        result: v4,
    };
    // Rule at src/isa/aarch64/inst.isle line 2397.
    return v5;
}

// Generated as internal constructor for term csneg.
pub fn constructor_csneg<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
    arg2: Reg,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::CSNeg {
        rd: v4,
        cond: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/aarch64/inst.isle line 2407.
    return v7;
}

// Generated as internal constructor for term ccmp.
pub fn constructor_ccmp<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: Reg,
    arg3: NZCV,
    arg4: &Cond,
    arg5: &ProducesFlags,
) -> ProducesFlags {
    let v6 = MInst::CCmp {
        size: arg0.clone(),
        rn: arg1,
        rm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    let v8 = &constructor_produces_flags_concat(ctx, arg5, &v7);
    // Rule at src/isa/aarch64/inst.isle line 2417.
    return v8.clone();
}

// Generated as internal constructor for term ccmp_imm.
pub fn constructor_ccmp_imm<C: Context>(
    ctx: &mut C,
    arg0: &OperandSize,
    arg1: Reg,
    arg2: UImm5,
    arg3: NZCV,
    arg4: &Cond,
) -> ConsumesFlags {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    let v10 = C::value_reg(ctx, v9);
    let v7 = MInst::CCmpImm {
        size: arg0.clone(),
        rn: arg1,
        imm: arg2,
        nzcv: arg3,
        cond: arg4.clone(),
    };
    let v8 = MInst::CSet {
        rd: v6,
        cond: arg4.clone(),
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v7,
        inst2: v8,
        result: v10,
    };
    // Rule at src/isa/aarch64/inst.isle line 2422.
    return v11;
}

// Generated as internal constructor for term add.
pub fn constructor_add<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2432.
    return v4;
}

// Generated as internal constructor for term add_imm.
pub fn constructor_add_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Imm12) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2435.
    return v4;
}

// Generated as internal constructor for term add_extend.
pub fn constructor_add_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2438.
    return v4;
}

// Generated as internal constructor for term add_extend_op.
pub fn constructor_add_extend_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &ExtendOp,
) -> Reg {
    let v5 = constructor_alu_rrr_extend(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2441.
    return v5;
}

// Generated as internal constructor for term add_shift.
pub fn constructor_add_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Add, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2444.
    return v5;
}

// Generated as internal constructor for term add_vec.
pub fn constructor_add_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Add, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2447.
    return v4;
}

// Generated as internal constructor for term sub.
pub fn constructor_sub<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2452.
    return v4;
}

// Generated as internal constructor for term sub_imm.
pub fn constructor_sub_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Imm12) -> Reg {
    let v4 = constructor_alu_rr_imm12(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2455.
    return v4;
}

// Generated as internal constructor for term sub_extend.
pub fn constructor_sub_extend<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &ExtendedValue,
) -> Reg {
    let v4 = constructor_alu_rr_extend_reg(ctx, &ALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2458.
    return v4;
}

// Generated as internal constructor for term sub_shift.
pub fn constructor_sub_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Sub, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2461.
    return v5;
}

// Generated as internal constructor for term sub_vec.
pub fn constructor_sub_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2464.
    return v4;
}

// Generated as internal constructor for term sub_i128.
pub fn constructor_sub_i128<C: Context>(
    ctx: &mut C,
    arg0: ValueRegs,
    arg1: ValueRegs,
) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v6 = C::value_regs_get(ctx, arg1, 0x0);
    let v7 = C::value_regs_get(ctx, arg1, 0x1);
    let v9 = &constructor_sub_with_flags_paired(ctx, I64, v3, v6);
    let v10 = &constructor_sbc_paired(ctx, I64, v5, v7);
    let v11 = constructor_with_flags(ctx, v9, v10);
    // Rule at src/isa/aarch64/inst.isle line 2467.
    return v11;
}

// Generated as internal constructor for term madd.
pub fn constructor_madd<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MAdd, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2487.
    return v5;
}

// Generated as internal constructor for term msub.
pub fn constructor_msub<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::MSub, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2492.
    return v5;
}

// Generated as internal constructor for term umaddl.
pub fn constructor_umaddl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::UMAddL, I32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2496.
    return v5;
}

// Generated as internal constructor for term smaddl.
pub fn constructor_smaddl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Reg) -> Reg {
    let v5 = constructor_alu_rrrr(ctx, &ALUOp3::SMAddL, I32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2500.
    return v5;
}

// Generated as internal constructor for term uqadd.
pub fn constructor_uqadd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqadd, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2504.
    return v4;
}

// Generated as internal constructor for term sqadd.
pub fn constructor_sqadd<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqadd, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2508.
    return v4;
}

// Generated as internal constructor for term uqsub.
pub fn constructor_uqsub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uqsub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2512.
    return v4;
}

// Generated as internal constructor for term sqsub.
pub fn constructor_sqsub<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sqsub, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2516.
    return v4;
}

// Generated as internal constructor for term umulh.
pub fn constructor_umulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UMulH, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2520.
    return v4;
}

// Generated as internal constructor for term smulh.
pub fn constructor_smulh<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SMulH, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2524.
    return v4;
}

// Generated as internal constructor for term mul.
pub fn constructor_mul<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Mul, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2528.
    return v4;
}

// Generated as internal constructor for term neg.
pub fn constructor_neg<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Neg, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2532.
    return v3;
}

// Generated as internal constructor for term rev16.
pub fn constructor_rev16<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev16, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2536.
    return v3;
}

// Generated as internal constructor for term rev32.
pub fn constructor_rev32<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2540.
    return v3;
}

// Generated as internal constructor for term rev64.
pub fn constructor_rev64<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Rev64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2544.
    return v3;
}

// Generated as internal constructor for term xtn.
pub fn constructor_xtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Xtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2548.
    return v3;
}

// Generated as internal constructor for term fcvtn.
pub fn constructor_fcvtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Fcvtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2552.
    return v3;
}

// Generated as internal constructor for term sqxtn.
pub fn constructor_sqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2556.
    return v3;
}

// Generated as internal constructor for term sqxtn2.
pub fn constructor_sqxtn2<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &ScalarSize) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtn, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2560.
    return v4;
}

// Generated as internal constructor for term sqxtun.
pub fn constructor_sqxtun<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2564.
    return v3;
}

// Generated as internal constructor for term sqxtun2.
pub fn constructor_sqxtun2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &ScalarSize,
) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Sqxtun, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2568.
    return v4;
}

// Generated as internal constructor for term uqxtn.
pub fn constructor_uqxtn<C: Context>(ctx: &mut C, arg0: Reg, arg1: &ScalarSize) -> Reg {
    let v3 = constructor_vec_rr_narrow_low(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2572.
    return v3;
}

// Generated as internal constructor for term uqxtn2.
pub fn constructor_uqxtn2<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &ScalarSize) -> Reg {
    let v4 = constructor_vec_rr_narrow_high(ctx, &VecRRNarrowOp::Uqxtn, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2576.
    return v4;
}

// Generated as internal constructor for term aarch64_fence.
pub fn constructor_aarch64_fence<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Fence };
    // Rule at src/isa/aarch64/inst.isle line 2580.
    return v1;
}

// Generated as internal constructor for term csdb.
pub fn constructor_csdb<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Csdb };
    // Rule at src/isa/aarch64/inst.isle line 2585.
    return v1;
}

// Generated as internal constructor for term brk.
pub fn constructor_brk<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Brk };
    // Rule at src/isa/aarch64/inst.isle line 2590.
    return v1;
}

// Generated as internal constructor for term addp.
pub fn constructor_addp<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Addp, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2595.
    return v4;
}

// Generated as internal constructor for term zip1.
pub fn constructor_zip1<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2599.
    return v4;
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Abs, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2603.
    return v3;
}

// Generated as internal constructor for term abs.
pub fn constructor_abs<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: Reg) -> Reg {
    let v3 = C::u8_into_imm12(ctx, 0x0);
    let v4 = &constructor_cmp_imm(ctx, arg0, arg1, v3);
    let v6 = &constructor_csneg(ctx, &Cond::Gt, arg1, arg1);
    let v7 = constructor_with_flags(ctx, v4, v6);
    let v9 = C::value_regs_get(ctx, v7, 0x0);
    // Rule at src/isa/aarch64/inst.isle line 2608.
    return v9;
}

// Generated as internal constructor for term addv.
pub fn constructor_addv<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_lanes(ctx, &VecLanesOp::Addv, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2614.
    return v3;
}

// Generated as internal constructor for term shll32.
pub fn constructor_shll32<C: Context>(ctx: &mut C, arg0: Reg, arg1: bool) -> Reg {
    let v3 = constructor_vec_rr_long(ctx, &VecRRLongOp::Shll32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2618.
    return v3;
}

// Generated as internal constructor for term saddlp8.
pub fn constructor_saddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp8, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2623.
    return v2;
}

// Generated as internal constructor for term saddlp16.
pub fn constructor_saddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Saddlp16, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2626.
    return v2;
}

// Generated as internal constructor for term uaddlp8.
pub fn constructor_uaddlp8<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp8, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2629.
    return v2;
}

// Generated as internal constructor for term uaddlp16.
pub fn constructor_uaddlp16<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = constructor_vec_rr_pair_long(ctx, &VecRRPairLongOp::Uaddlp16, arg0);
    // Rule at src/isa/aarch64/inst.isle line 2632.
    return v2;
}

// Generated as internal constructor for term umlal32.
pub fn constructor_umlal32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: bool,
) -> Reg {
    let v5 = constructor_vec_rrrr_long(ctx, &VecRRRLongModOp::Umlal32, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2636.
    return v5;
}

// Generated as internal constructor for term smull8.
pub fn constructor_smull8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull8, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2640.
    return v4;
}

// Generated as internal constructor for term umull8.
pub fn constructor_umull8<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull8, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2644.
    return v4;
}

// Generated as internal constructor for term smull16.
pub fn constructor_smull16<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull16, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2648.
    return v4;
}

// Generated as internal constructor for term umull16.
pub fn constructor_umull16<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull16, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2652.
    return v4;
}

// Generated as internal constructor for term smull32.
pub fn constructor_smull32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Smull32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2656.
    return v4;
}

// Generated as internal constructor for term umull32.
pub fn constructor_umull32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: bool) -> Reg {
    let v4 = constructor_vec_rrr_long(ctx, &VecRRRLongOp::Umull32, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2660.
    return v4;
}

// Generated as internal constructor for term asr.
pub fn constructor_asr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2664.
    return v4;
}

// Generated as internal constructor for term asr_imm.
pub fn constructor_asr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Asr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2667.
    return v4;
}

// Generated as internal constructor for term lsr.
pub fn constructor_lsr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2671.
    return v4;
}

// Generated as internal constructor for term lsr_imm.
pub fn constructor_lsr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2674.
    return v4;
}

// Generated as internal constructor for term lsl.
pub fn constructor_lsl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2678.
    return v4;
}

// Generated as internal constructor for term lsl_imm.
pub fn constructor_lsl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmShift) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::Lsl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2681.
    return v4;
}

// Generated as internal constructor for term a64_udiv.
pub fn constructor_a64_udiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::UDiv, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2685.
    return v4;
}

// Generated as internal constructor for term a64_sdiv.
pub fn constructor_a64_sdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::SDiv, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2689.
    return v4;
}

// Generated as internal constructor for term not.
pub fn constructor_not<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Not, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2693.
    return v3;
}

// Generated as internal constructor for term orr_not.
pub fn constructor_orr_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::OrrNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2698.
    return v4;
}

// Generated as internal constructor for term orr_not_shift.
pub fn constructor_orr_not_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::OrrNot, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2701.
    return v5;
}

// Generated as internal constructor for term orr.
pub fn constructor_orr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2706.
    return v4;
}

// Generated as internal constructor for term orr_imm.
pub fn constructor_orr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmLogic) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2709.
    return v4;
}

// Generated as internal constructor for term orr_shift.
pub fn constructor_orr_shift<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: ShiftOpAndAmt,
) -> Reg {
    let v5 = constructor_alu_rrr_shift(ctx, &ALUOp::Orr, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 2712.
    return v5;
}

// Generated as internal constructor for term orr_vec.
pub fn constructor_orr_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Orr, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2715.
    return v4;
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2720.
    return v4;
}

// Generated as internal constructor for term and_imm.
pub fn constructor_and_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: ImmLogic) -> Reg {
    let v4 = constructor_alu_rr_imm_logic(ctx, &ALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2723.
    return v4;
}

// Generated as internal constructor for term and_vec.
pub fn constructor_and_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::And, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2726.
    return v4;
}

// Generated as internal constructor for term eor.
pub fn constructor_eor<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::Eor, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2730.
    return v4;
}

// Generated as internal constructor for term eor_vec.
pub fn constructor_eor_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Eor, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2733.
    return v4;
}

// Generated as internal constructor for term bic.
pub fn constructor_bic<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::AndNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2738.
    return v4;
}

// Generated as internal constructor for term bic_vec.
pub fn constructor_bic_vec<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Bic, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2741.
    return v4;
}

// Generated as internal constructor for term sshl.
pub fn constructor_sshl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Sshl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2745.
    return v4;
}

// Generated as internal constructor for term ushl.
pub fn constructor_ushl<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: &VectorSize) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Ushl, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2749.
    return v4;
}

// Generated as internal constructor for term ushl_vec_imm.
pub fn constructor_ushl_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Shl, arg1, arg0, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2753.
    return v4;
}

// Generated as internal constructor for term ushr_vec_imm.
pub fn constructor_ushr_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Ushr, arg1, arg0, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2757.
    return v4;
}

// Generated as internal constructor for term sshr_vec_imm.
pub fn constructor_sshr_vec_imm<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: u8,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_shift_imm(ctx, &VecShiftImmOp::Sshr, arg1, arg0, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2761.
    return v4;
}

// Generated as internal constructor for term a64_rotr.
pub fn constructor_a64_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::RotR, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2766.
    return v4;
}

// Generated as internal constructor for term a64_rotr_imm.
pub fn constructor_a64_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_alu_rr_imm_shift(ctx, &ALUOp::RotR, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2769.
    return v4;
}

// Generated as internal constructor for term rbit.
pub fn constructor_rbit<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::RBit, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2774.
    return v3;
}

// Generated as internal constructor for term a64_clz.
pub fn constructor_a64_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Clz, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2779.
    return v3;
}

// Generated as internal constructor for term a64_cls.
pub fn constructor_a64_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Cls, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2784.
    return v3;
}

// Generated as internal constructor for term a64_rev16.
pub fn constructor_a64_rev16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev16, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2789.
    return v3;
}

// Generated as internal constructor for term a64_rev32.
pub fn constructor_a64_rev32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev32, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2792.
    return v3;
}

// Generated as internal constructor for term a64_rev64.
pub fn constructor_a64_rev64<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = constructor_bit_rr(ctx, &BitOp::Rev64, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2795.
    return v3;
}

// Generated as internal constructor for term eon.
pub fn constructor_eon<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = constructor_alu_rrr(ctx, &ALUOp::EorNot, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 2800.
    return v4;
}

// Generated as internal constructor for term vec_cnt.
pub fn constructor_vec_cnt<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cnt, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 2805.
    return v3;
}

// Generated as internal constructor for term bsl.
pub fn constructor_bsl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v5 = &constructor_vector_size(ctx, arg0);
    let v6 = constructor_vec_rrr_mod(ctx, &VecALUModOp::Bsl, arg1, arg2, arg3, v5);
    // Rule at src/isa/aarch64/inst.isle line 2810.
    return v6;
}

// Generated as internal constructor for term udf.
pub fn constructor_udf<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Udf {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 2816.
    return v2;
}

// Generated as internal constructor for term aarch64_uload8.
pub fn constructor_aarch64_uload8<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2822.
    return v6;
}

// Generated as internal constructor for term aarch64_sload8.
pub fn constructor_aarch64_sload8<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad8 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2827.
    return v6;
}

// Generated as internal constructor for term aarch64_uload16.
pub fn constructor_aarch64_uload16<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2832.
    return v6;
}

// Generated as internal constructor for term aarch64_sload16.
pub fn constructor_aarch64_sload16<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad16 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2837.
    return v6;
}

// Generated as internal constructor for term aarch64_uload32.
pub fn constructor_aarch64_uload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2842.
    return v6;
}

// Generated as internal constructor for term aarch64_sload32.
pub fn constructor_aarch64_sload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::SLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2847.
    return v6;
}

// Generated as internal constructor for term aarch64_uload64.
pub fn constructor_aarch64_uload64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::ULoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2852.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload32.
pub fn constructor_aarch64_fpuload32<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad32 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2857.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload64.
pub fn constructor_aarch64_fpuload64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64);
    let v4 = MInst::FpuLoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2862.
    return v6;
}

// Generated as internal constructor for term aarch64_fpuload128.
pub fn constructor_aarch64_fpuload128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, F64X2);
    let v4 = MInst::FpuLoad128 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 2867.
    return v6;
}

// Generated as internal constructor for term aarch64_loadp64.
pub fn constructor_aarch64_loadp64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
) -> ValueRegs {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::LoadP64 {
        rt: v3,
        rt2: v4,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v8 = C::writable_reg_to_reg(ctx, v4);
    let v9 = C::value_regs(ctx, v7, v8);
    // Rule at src/isa/aarch64/inst.isle line 2872.
    return v9;
}

// Generated as internal constructor for term aarch64_store8.
pub fn constructor_aarch64_store8<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store8 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2881.
    return v4;
}

// Generated as internal constructor for term aarch64_store16.
pub fn constructor_aarch64_store16<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store16 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2884.
    return v4;
}

// Generated as internal constructor for term aarch64_store32.
pub fn constructor_aarch64_store32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2887.
    return v4;
}

// Generated as internal constructor for term aarch64_store64.
pub fn constructor_aarch64_store64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::Store64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2890.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore32.
pub fn constructor_aarch64_fpustore32<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore32 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2893.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore64.
pub fn constructor_aarch64_fpustore64<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore64 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2896.
    return v4;
}

// Generated as internal constructor for term aarch64_fpustore128.
pub fn constructor_aarch64_fpustore128<C: Context>(
    ctx: &mut C,
    arg0: &AMode,
    arg1: MemFlags,
    arg2: Reg,
) -> SideEffectNoResult {
    let v3 = MInst::FpuStore128 {
        rd: arg2,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 2899.
    return v4;
}

// Generated as internal constructor for term aarch64_storep64.
pub fn constructor_aarch64_storep64<C: Context>(
    ctx: &mut C,
    arg0: &PairAMode,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> SideEffectNoResult {
    let v4 = MInst::StoreP64 {
        rt: arg2,
        rt2: arg3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = SideEffectNoResult::Inst { inst: v4 };
    // Rule at src/isa/aarch64/inst.isle line 2902.
    return v5;
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
    arg2: &Cond,
) -> InstOutput {
    let v3 = C::cond_br_cond(ctx, arg2);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v4 };
    let v6 = &constructor_with_flags_side_effect(ctx, arg0, &v5);
    let v7 = constructor_side_effect(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 2908.
    return v7;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: &ImmExtend, arg2: u64) -> Reg {
    let v1 = C::integral_ty(ctx, arg0);
    if let Some(v2) = v1 {
        if let &ImmExtend::Zero = arg1 {
            let v5 = C::move_wide_const_from_u64(ctx, v2, arg2);
            if let Some(v6) = v5 {
                let v7 = &constructor_operand_size(ctx, v2);
                let v8 = constructor_movz(ctx, v6, v7);
                let v10 = C::add_range_fact(ctx, v8, 0x40, arg2, arg2);
                // Rule at src/isa/aarch64/inst.isle line 2936.
                return v10;
            }
            let v11 = C::ty_32_or_64(ctx, v2);
            if let Some(v12) = v11 {
                let v13 = C::move_wide_const_from_inverted_u64(ctx, v12, arg2);
                if let Some(v14) = v13 {
                    let v15 = &constructor_operand_size(ctx, v12);
                    let v16 = constructor_movn(ctx, v14, v15);
                    let v17 = C::add_range_fact(ctx, v16, 0x40, arg2, arg2);
                    // Rule at src/isa/aarch64/inst.isle line 2941.
                    return v17;
                }
            }
            let v18 = C::imm_logic_from_u64(ctx, v2, arg2);
            if let Some(v19) = v18 {
                let v20 = C::imm_size_from_type(ctx, v2);
                if let Some(v21) = v20 {
                    let v22 = C::zero_reg(ctx);
                    let v23 = constructor_orr_imm(ctx, v2, v22, v19);
                    let v24 = C::add_range_fact(ctx, v23, v21, arg2, arg2);
                    // Rule at src/isa/aarch64/inst.isle line 2949.
                    return v24;
                }
            }
        }
        let v25 = C::load_constant64_full(ctx, v2, arg1, arg2);
        // Rule at src/isa/aarch64/inst.isle line 2960.
        return v25;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/aarch64/inst.isle line 2932"
    )
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2971.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2972.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, true, v6, 0x20);
        // Rule at src/isa/aarch64/inst.isle line 2967.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext32", "src/isa/aarch64/inst.isle line 2966"
    )
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    match v1 {
        I32 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2980.
            return v4;
        }
        I64 => {
            let v4 = C::put_in_reg(ctx, arg0);
            // Rule at src/isa/aarch64/inst.isle line 2981.
            return v4;
        }
        _ => {}
    }
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, false, v6, 0x20);
        // Rule at src/isa/aarch64/inst.isle line 2976.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext32", "src/isa/aarch64/inst.isle line 2975"
    )
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, true, v6, 0x40);
        // Rule at src/isa/aarch64/inst.isle line 2985.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/aarch64/inst.isle line 2989.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext64", "src/isa/aarch64/inst.isle line 2984"
    )
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_32(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v6 = C::ty_bits(ctx, v3);
        let v8 = constructor_extend(ctx, v4, false, v6, 0x40);
        // Rule at src/isa/aarch64/inst.isle line 2993.
        return v8;
    }
    if v1 == I64 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/aarch64/inst.isle line 2997.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext64", "src/isa/aarch64/inst.isle line 2992"
    )
}

// Generated as internal constructor for term trap_if_zero_divisor.
pub fn constructor_trap_if_zero_divisor<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v1 = C::cond_br_zero(ctx, arg0);
    let v2 = &C::trap_code_division_by_zero(ctx);
    let v3 = MInst::TrapIf {
        kind: v1,
        trap_code: v2.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    // Rule at src/isa/aarch64/inst.isle line 3002.
    return arg0;
}

// Generated as internal constructor for term size_from_ty.
pub fn constructor_size_from_ty<C: Context>(ctx: &mut C, arg0: Type) -> OperandSize {
    let v1 = C::fits_in_32(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/aarch64/inst.isle line 3007.
        return OperandSize::Size32;
    }
    if arg0 == I64 {
        // Rule at src/isa/aarch64/inst.isle line 3008.
        return OperandSize::Size64;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "size_from_ty", "src/isa/aarch64/inst.isle line 3006"
    )
}

// Generated as internal constructor for term trap_if_div_overflow.
pub fn constructor_trap_if_div_overflow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v4 = &constructor_operand_size(ctx, arg0);
    let v5 = C::writable_zero_reg(ctx);
    let v7 = C::u8_into_imm12(ctx, 0x1);
    let v8 = MInst::AluRRImm12 {
        alu_op: ALUOp::AddS,
        size: v4.clone(),
        rd: v5,
        rn: arg2,
        imm12: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = &constructor_size_from_ty(ctx, arg0);
    let v11 = C::u8_into_uimm5(ctx, 0x1);
    let v13 = C::nzcv(ctx, false, false, false, false);
    let v15 = MInst::CCmpImm {
        size: v10.clone(),
        rn: arg1,
        imm: v11,
        nzcv: v13,
        cond: Cond::Eq,
    };
    let v16 = C::emit(ctx, &v15);
    let v18 = C::cond_br_cond(ctx, &Cond::Vs);
    let v19 = &C::trap_code_integer_overflow(ctx);
    let v20 = MInst::TrapIf {
        kind: v18,
        trap_code: v19.clone(),
    };
    let v21 = C::emit(ctx, &v20);
    // Rule at src/isa/aarch64/inst.isle line 3014.
    return arg1;
}

// Generated as internal constructor for term trap_if_overflow.
pub fn constructor_trap_if_overflow<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &TrapCode,
) -> Reg {
    let v3 = C::cond_br_cond(ctx, &Cond::Hs);
    let v4 = MInst::TrapIf {
        kind: v3,
        trap_code: arg1.clone(),
    };
    let v5 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v4 };
    let v6 = constructor_with_flags_reg(ctx, arg0, &v5);
    // Rule at src/isa/aarch64/inst.isle line 3033.
    return v6;
}

// Generated as internal constructor for term sink_atomic_load.
pub fn constructor_sink_atomic_load<C: Context>(ctx: &mut C, arg0: Inst) -> Reg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::LoadNoOffset {
        opcode: ref v2,
        arg: v3,
        flags: v4,
    } = v1
    {
        if let &Opcode::AtomicLoad = v2 {
            let v5 = C::sink_inst(ctx, arg0);
            let v6 = C::put_in_reg(ctx, v3);
            // Rule at src/isa/aarch64/inst.isle line 3040.
            return v6;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_atomic_load", "src/isa/aarch64/inst.isle line 3039"
    )
}

// Generated as internal constructor for term alu_rs_imm_logic_commutative.
pub fn constructor_alu_rs_imm_logic_commutative<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v15 = C::def_inst(ctx, arg2);
    if let Some(v16) = v15 {
        let v17 = &C::inst_data(ctx, v16);
        match v17 {
            &InstructionData::Binary {
                opcode: ref v38,
                args: ref v39,
            } => {
                if let &Opcode::Ishl = v38 {
                    let v40 = C::unpack_value_array_2(ctx, v39);
                    let v43 = C::def_inst(ctx, v40.1);
                    if let Some(v44) = v43 {
                        let v45 = &C::inst_data(ctx, v44);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v46,
                            imm: v47,
                        } = v45
                        {
                            if let &Opcode::Iconst = v46 {
                                let v48 = C::lshl_from_imm64(ctx, arg1, v47);
                                if let Some(v49) = v48 {
                                    let v22 = C::put_in_reg(ctx, arg3);
                                    let v50 = C::put_in_reg(ctx, v40.0);
                                    let v51 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v22, v50, v49);
                                    // Rule at src/isa/aarch64/inst.isle line 3065.
                                    return v51;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } => {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::imm_logic_from_imm64(ctx, arg1, v19);
                    if let Some(v21) = v20 {
                        let v22 = C::put_in_reg(ctx, arg3);
                        let v23 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v22, v21);
                        // Rule at src/isa/aarch64/inst.isle line 3057.
                        return v23;
                    }
                }
            }
            _ => {}
        }
    }
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v24,
                args: ref v25,
            } => {
                if let &Opcode::Ishl = v24 {
                    let v26 = C::unpack_value_array_2(ctx, v25);
                    let v29 = C::def_inst(ctx, v26.1);
                    if let Some(v30) = v29 {
                        let v31 = &C::inst_data(ctx, v30);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v32,
                            imm: v33,
                        } = v31
                        {
                            if let &Opcode::Iconst = v32 {
                                let v34 = C::lshl_from_imm64(ctx, arg1, v33);
                                if let Some(v35) = v34 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v36 = C::put_in_reg(ctx, v26.0);
                                    let v37 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v36, v35);
                                    // Rule at src/isa/aarch64/inst.isle line 3062.
                                    return v37;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src/isa/aarch64/inst.isle line 3054.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 3050.
    return v6;
}

// Generated as internal constructor for term alu_rs_imm_logic.
pub fn constructor_alu_rs_imm_logic<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> Reg {
    let v7 = C::def_inst(ctx, arg3);
    if let Some(v8) = v7 {
        let v9 = &C::inst_data(ctx, v8);
        match v9 {
            &InstructionData::Binary {
                opcode: ref v15,
                args: ref v16,
            } => {
                if let &Opcode::Ishl = v15 {
                    let v17 = C::unpack_value_array_2(ctx, v16);
                    let v20 = C::def_inst(ctx, v17.1);
                    if let Some(v21) = v20 {
                        let v22 = &C::inst_data(ctx, v21);
                        if let &InstructionData::UnaryImm {
                            opcode: ref v23,
                            imm: v24,
                        } = v22
                        {
                            if let &Opcode::Iconst = v23 {
                                let v25 = C::lshl_from_imm64(ctx, arg1, v24);
                                if let Some(v26) = v25 {
                                    let v4 = C::put_in_reg(ctx, arg2);
                                    let v27 = C::put_in_reg(ctx, v17.0);
                                    let v28 =
                                        constructor_alu_rrr_shift(ctx, arg0, arg1, v4, v27, v26);
                                    // Rule at src/isa/aarch64/inst.isle line 3077.
                                    return v28;
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v10,
                imm: v11,
            } => {
                if let &Opcode::Iconst = v10 {
                    let v12 = C::imm_logic_from_imm64(ctx, arg1, v11);
                    if let Some(v13) = v12 {
                        let v4 = C::put_in_reg(ctx, arg2);
                        let v14 = constructor_alu_rr_imm_logic(ctx, arg0, arg1, v4, v13);
                        // Rule at src/isa/aarch64/inst.isle line 3074.
                        return v14;
                    }
                }
            }
            _ => {}
        }
    }
    let v4 = C::put_in_reg(ctx, arg2);
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = constructor_alu_rrr(ctx, arg0, arg1, v4, v5);
    // Rule at src/isa/aarch64/inst.isle line 3072.
    return v6;
}

// Generated as internal constructor for term i128_alu_bitop.
pub fn constructor_i128_alu_bitop<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Value,
    arg3: Value,
) -> ValueRegs {
    let v4 = C::put_in_regs(ctx, arg2);
    let v6 = C::value_regs_get(ctx, v4, 0x0);
    let v8 = C::value_regs_get(ctx, v4, 0x1);
    let v9 = C::put_in_regs(ctx, arg3);
    let v10 = C::value_regs_get(ctx, v9, 0x0);
    let v11 = C::value_regs_get(ctx, v9, 0x1);
    let v12 = constructor_alu_rrr(ctx, arg0, arg1, v6, v10);
    let v13 = constructor_alu_rrr(ctx, arg0, arg1, v8, v11);
    let v14 = C::value_regs(ctx, v12, v13);
    // Rule at src/isa/aarch64/inst.isle line 3086.
    return v14;
}

// Generated as internal constructor for term ld1r.
pub fn constructor_ld1r<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &VectorSize,
    arg2: MemFlags,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I8X16);
    let v5 = MInst::VecLoadReplicate {
        rd: v4,
        rn: arg0,
        size: arg1.clone(),
        flags: arg2,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/aarch64/inst.isle line 3101.
    return v7;
}

// Generated as internal constructor for term load_ext_name.
pub fn constructor_load_ext_name<C: Context>(ctx: &mut C, arg0: BoxExternalName, arg1: i64) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::LoadExtName {
        rd: v3,
        name: arg0,
        offset: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3108.
    return v6;
}

// Generated as internal constructor for term amode.
pub fn constructor_amode<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: i32) -> AMode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::Binary {
            opcode: ref v7,
            args: ref v8,
        } = v6
        {
            if let &Opcode::Iadd = v7 {
                let v9 = C::unpack_value_array_2(ctx, v8);
                let v22 = C::def_inst(ctx, v9.0);
                if let Some(v23) = v22 {
                    let v24 = &C::inst_data(ctx, v23);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v25,
                        imm: v26,
                    } = v24
                    {
                        if let &Opcode::Iconst = v25 {
                            let v27 = C::simm32(ctx, v26);
                            if let Some(v28) = v27 {
                                let v29 = C::s32_add_fallible(ctx, v28, arg2);
                                if let Some(v30) = v29 {
                                    let v31 =
                                        &constructor_amode_no_more_iconst(ctx, arg0, v9.1, v30);
                                    // Rule at src/isa/aarch64/inst.isle line 3133.
                                    return v31.clone();
                                }
                            }
                        }
                    }
                }
                let v12 = C::def_inst(ctx, v9.1);
                if let Some(v13) = v12 {
                    let v14 = &C::inst_data(ctx, v13);
                    if let &InstructionData::UnaryImm {
                        opcode: ref v15,
                        imm: v16,
                    } = v14
                    {
                        if let &Opcode::Iconst = v15 {
                            let v17 = C::simm32(ctx, v16);
                            if let Some(v18) = v17 {
                                let v19 = C::s32_add_fallible(ctx, v18, arg2);
                                if let Some(v20) = v19 {
                                    let v21 =
                                        &constructor_amode_no_more_iconst(ctx, arg0, v9.0, v20);
                                    // Rule at src/isa/aarch64/inst.isle line 3130.
                                    return v21.clone();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    let v3 = &constructor_amode_no_more_iconst(ctx, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3128.
    return v3.clone();
}

// Generated as internal constructor for term amode_no_more_iconst.
pub fn constructor_amode_no_more_iconst<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: i32,
) -> AMode {
    let v16 = C::def_inst(ctx, arg1);
    if let Some(v17) = v16 {
        let v18 = &C::inst_data(ctx, v17);
        if let &InstructionData::Binary {
            opcode: ref v19,
            args: ref v20,
        } = v18
        {
            if let &Opcode::Iadd = v19 {
                let v21 = C::unpack_value_array_2(ctx, v20);
                let v39 = C::def_inst(ctx, v21.0);
                if let Some(v40) = v39 {
                    let v41 = &C::inst_data(ctx, v40);
                    if let &InstructionData::Binary {
                        opcode: ref v67,
                        args: ref v68,
                    } = v41
                    {
                        if let &Opcode::Ishl = v67 {
                            let v69 = C::unpack_value_array_2(ctx, v68);
                            let v72 = C::def_inst(ctx, v69.1);
                            if let Some(v73) = v72 {
                                let v74 = &C::inst_data(ctx, v73);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v75,
                                    imm: v76,
                                } = v74
                                {
                                    if let &Opcode::Iconst = v75 {
                                        let v61 = C::ty_bytes(ctx, arg0);
                                        let v62 = C::u16_as_u64(ctx, v61);
                                        let v77 = C::u64_from_imm64(ctx, v76);
                                        let v78 = C::u64_shl(ctx, 0x1, v77);
                                        let v79 = C::u64_eq(ctx, v62, v78);
                                        if v79 == true {
                                            let v45 = C::put_in_reg(ctx, v21.1);
                                            let v46 = constructor_amode_add(ctx, v45, arg2);
                                            let v80 =
                                                &constructor_amode_reg_scaled(ctx, v46, v69.0);
                                            // Rule at src/isa/aarch64/inst.isle line 3180.
                                            return v80.clone();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                let v28 = C::def_inst(ctx, v21.1);
                if let Some(v29) = v28 {
                    let v30 = &C::inst_data(ctx, v29);
                    if let &InstructionData::Binary {
                        opcode: ref v50,
                        args: ref v51,
                    } = v30
                    {
                        if let &Opcode::Ishl = v50 {
                            let v52 = C::unpack_value_array_2(ctx, v51);
                            let v55 = C::def_inst(ctx, v52.1);
                            if let Some(v56) = v55 {
                                let v57 = &C::inst_data(ctx, v56);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v58,
                                    imm: v59,
                                } = v57
                                {
                                    if let &Opcode::Iconst = v58 {
                                        let v61 = C::ty_bytes(ctx, arg0);
                                        let v62 = C::u16_as_u64(ctx, v61);
                                        let v60 = C::u64_from_imm64(ctx, v59);
                                        let v64 = C::u64_shl(ctx, 0x1, v60);
                                        let v65 = C::u64_eq(ctx, v62, v64);
                                        if v65 == true {
                                            let v24 = C::put_in_reg(ctx, v21.0);
                                            let v25 = constructor_amode_add(ctx, v24, arg2);
                                            let v66 =
                                                &constructor_amode_reg_scaled(ctx, v25, v52.0);
                                            // Rule at src/isa/aarch64/inst.isle line 3177.
                                            return v66.clone();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if let Some(v40) = v39 {
                    let v41 = &C::inst_data(ctx, v40);
                    if let &InstructionData::Unary {
                        opcode: ref v42,
                        arg: v43,
                    } = v41
                    {
                        match v42 {
                            &Opcode::Uextend => {
                                let v44 = C::value_type(ctx, v43);
                                if v44 == I32 {
                                    let v45 = C::put_in_reg(ctx, v21.1);
                                    let v46 = constructor_amode_add(ctx, v45, arg2);
                                    let v47 = C::put_in_reg(ctx, v43);
                                    let v48 = AMode::RegExtended {
                                        rn: v46,
                                        rm: v47,
                                        extendop: ExtendOp::UXTW,
                                    };
                                    // Rule at src/isa/aarch64/inst.isle line 3165.
                                    return v48;
                                }
                            }
                            &Opcode::Sextend => {
                                let v44 = C::value_type(ctx, v43);
                                if v44 == I32 {
                                    let v45 = C::put_in_reg(ctx, v21.1);
                                    let v46 = constructor_amode_add(ctx, v45, arg2);
                                    let v47 = C::put_in_reg(ctx, v43);
                                    let v49 = AMode::RegExtended {
                                        rn: v46,
                                        rm: v47,
                                        extendop: ExtendOp::SXTW,
                                    };
                                    // Rule at src/isa/aarch64/inst.isle line 3167.
                                    return v49;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                if let Some(v29) = v28 {
                    let v30 = &C::inst_data(ctx, v29);
                    if let &InstructionData::Unary {
                        opcode: ref v31,
                        arg: v32,
                    } = v30
                    {
                        match v31 {
                            &Opcode::Uextend => {
                                let v33 = C::value_type(ctx, v32);
                                if v33 == I32 {
                                    let v24 = C::put_in_reg(ctx, v21.0);
                                    let v25 = constructor_amode_add(ctx, v24, arg2);
                                    let v34 = C::put_in_reg(ctx, v32);
                                    let v36 = AMode::RegExtended {
                                        rn: v25,
                                        rm: v34,
                                        extendop: ExtendOp::UXTW,
                                    };
                                    // Rule at src/isa/aarch64/inst.isle line 3161.
                                    return v36;
                                }
                            }
                            &Opcode::Sextend => {
                                let v33 = C::value_type(ctx, v32);
                                if v33 == I32 {
                                    let v24 = C::put_in_reg(ctx, v21.0);
                                    let v25 = constructor_amode_add(ctx, v24, arg2);
                                    let v34 = C::put_in_reg(ctx, v32);
                                    let v38 = AMode::RegExtended {
                                        rn: v25,
                                        rm: v34,
                                        extendop: ExtendOp::SXTW,
                                    };
                                    // Rule at src/isa/aarch64/inst.isle line 3163.
                                    return v38;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                let v24 = C::put_in_reg(ctx, v21.0);
                let v25 = constructor_amode_add(ctx, v24, arg2);
                let v26 = C::put_in_reg(ctx, v21.1);
                let v27 = AMode::RegReg { rn: v25, rm: v26 };
                // Rule at src/isa/aarch64/inst.isle line 3159.
                return v27;
            }
        }
    }
    let v6 = C::i32_as_i64(ctx, arg2);
    let v13 = &C::uimm12_scaled_from_i64(ctx, v6, arg0);
    if let Some(v14) = v13 {
        let v3 = C::put_in_reg(ctx, arg1);
        let v15 = AMode::UnsignedOffset {
            rn: v3,
            uimm12: v14.clone(),
        };
        // Rule at src/isa/aarch64/inst.isle line 3148.
        return v15;
    }
    let v10 = &C::simm9_from_i64(ctx, v6);
    if let Some(v11) = v10 {
        let v3 = C::put_in_reg(ctx, arg1);
        let v12 = AMode::Unscaled {
            rn: v3,
            simm9: v11.clone(),
        };
        // Rule at src/isa/aarch64/inst.isle line 3145.
        return v12;
    }
    let v3 = C::put_in_reg(ctx, arg1);
    let v7 = C::i64_as_u64(ctx, v6);
    let v8 = constructor_imm(ctx, I64, &ImmExtend::Zero, v7);
    let v9 = AMode::RegReg { rn: v3, rm: v8 };
    // Rule at src/isa/aarch64/inst.isle line 3140.
    return v9;
}

// Generated as internal constructor for term amode_reg_scaled.
pub fn constructor_amode_reg_scaled<C: Context>(ctx: &mut C, arg0: Reg, arg1: Value) -> AMode {
    let v4 = C::def_inst(ctx, arg1);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::Unary {
            opcode: ref v7,
            arg: v8,
        } = v6
        {
            match v7 {
                &Opcode::Uextend => {
                    let v9 = C::value_type(ctx, v8);
                    if v9 == I32 {
                        let v10 = C::put_in_reg(ctx, v8);
                        let v12 = AMode::RegScaledExtended {
                            rn: arg0,
                            rm: v10,
                            extendop: ExtendOp::UXTW,
                        };
                        // Rule at src/isa/aarch64/inst.isle line 3187.
                        return v12;
                    }
                }
                &Opcode::Sextend => {
                    let v9 = C::value_type(ctx, v8);
                    if v9 == I32 {
                        let v10 = C::put_in_reg(ctx, v8);
                        let v14 = AMode::RegScaledExtended {
                            rn: arg0,
                            rm: v10,
                            extendop: ExtendOp::SXTW,
                        };
                        // Rule at src/isa/aarch64/inst.isle line 3189.
                        return v14;
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg1);
    let v3 = AMode::RegScaled { rn: arg0, rm: v2 };
    // Rule at src/isa/aarch64/inst.isle line 3185.
    return v3;
}

// Generated as internal constructor for term amode_add.
pub fn constructor_amode_add<C: Context>(ctx: &mut C, arg0: Reg, arg1: i32) -> Reg {
    if arg1 == 0x0 {
        // Rule at src/isa/aarch64/inst.isle line 3200.
        return arg0;
    }
    let v4 = C::i32_as_i64(ctx, arg1);
    let v5 = C::i64_as_u64(ctx, v4);
    let v8 = C::imm12_from_u64(ctx, v5);
    if let Some(v9) = v8 {
        let v10 = constructor_add_imm(ctx, I64, arg0, v9);
        // Rule at src/isa/aarch64/inst.isle line 3197.
        return v10;
    }
    let v6 = constructor_imm(ctx, I64, &ImmExtend::Zero, v5);
    let v7 = constructor_add(ctx, I64, arg0, v6);
    // Rule at src/isa/aarch64/inst.isle line 3195.
    return v7;
}

// Generated as internal constructor for term pair_amode.
pub fn constructor_pair_amode<C: Context>(ctx: &mut C, arg0: Value, arg1: i32) -> PairAMode {
    let v9 = C::i32_as_i64(ctx, arg1);
    let v10 = C::simm7_scaled_from_i64(ctx, v9, I64);
    if let Some(v11) = v10 {
        let v6 = C::put_in_reg(ctx, arg0);
        let v12 = PairAMode::SignedOffset {
            reg: v6,
            simm7: v11,
        };
        // Rule at src/isa/aarch64/inst.isle line 3212.
        return v12;
    }
    let v4 = C::simm7_scaled_from_i64(ctx, 0x0, I64);
    if let Some(v5) = v4 {
        let v6 = C::put_in_reg(ctx, arg0);
        let v7 = constructor_amode_add(ctx, v6, arg1);
        let v8 = PairAMode::SignedOffset { reg: v7, simm7: v5 };
        // Rule at src/isa/aarch64/inst.isle line 3207.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "pair_amode", "src/isa/aarch64/inst.isle line 3204"
    )
}

// Generated as internal constructor for term sink_load_into_addr.
pub fn constructor_sink_load_into_addr<C: Context>(ctx: &mut C, arg0: Type, arg1: Inst) -> Reg {
    let v2 = &C::inst_data(ctx, arg1);
    if let &InstructionData::Load {
        opcode: ref v3,
        arg: v4,
        flags: v5,
        offset: v6,
    } = v2
    {
        if let &Opcode::Load = v3 {
            let v8 = C::sink_inst(ctx, arg1);
            let v9 = C::put_in_reg(ctx, v4);
            let v7 = C::offset32(ctx, v6);
            let v10 = C::i32_as_i64(ctx, v7);
            let v11 = C::i64_as_u64(ctx, v10);
            let v12 = constructor_add_imm_to_addr(ctx, v9, v11);
            // Rule at src/isa/aarch64/inst.isle line 3227.
            return v12;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_load_into_addr", "src/isa/aarch64/inst.isle line 3226"
    )
}

// Generated as internal constructor for term add_imm_to_addr.
pub fn constructor_add_imm_to_addr<C: Context>(ctx: &mut C, arg0: Reg, arg1: u64) -> Reg {
    if arg1 == 0x0 {
        // Rule at src/isa/aarch64/inst.isle line 3232.
        return arg0;
    }
    let v2 = C::imm12_from_u64(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = constructor_add_imm(ctx, I64, arg0, v3);
        // Rule at src/isa/aarch64/inst.isle line 3233.
        return v5;
    }
    let v7 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg1);
    let v8 = constructor_add(ctx, I64, arg0, v7);
    // Rule at src/isa/aarch64/inst.isle line 3234.
    return v8;
}

// Generated as internal constructor for term constant_f32.
pub fn constructor_constant_f32<C: Context>(ctx: &mut C, arg0: u32) -> Reg {
    if arg0 == 0x0 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v5 = constructor_vec_dup_imm(ctx, v2, false, &VectorSize::Size32x2);
        // Rule at src/isa/aarch64/inst.isle line 3242.
        return v5;
    }
    let v6 = C::u32_as_u64(ctx, arg0);
    let v7 = C::asimd_fp_mod_imm_from_u64(ctx, v6, &ScalarSize::Size32);
    if let Some(v8) = v7 {
        let v9 = constructor_fpu_move_fp_imm(ctx, v8, &ScalarSize::Size32);
        // Rule at src/isa/aarch64/inst.isle line 3246.
        return v9;
    }
    let v12 = constructor_imm(ctx, I32, &ImmExtend::Zero, v6);
    let v13 = constructor_mov_to_fpu(ctx, v12, &ScalarSize::Size32);
    // Rule at src/isa/aarch64/inst.isle line 3249.
    return v13;
}

// Generated as internal constructor for term constant_f64.
pub fn constructor_constant_f64<C: Context>(ctx: &mut C, arg0: u64) -> Reg {
    if arg0 == 0x0 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size32);
        let v5 = constructor_vec_dup_imm(ctx, v2, false, &VectorSize::Size32x2);
        // Rule at src/isa/aarch64/inst.isle line 3260.
        return v5;
    }
    let v7 = C::asimd_fp_mod_imm_from_u64(ctx, arg0, &ScalarSize::Size64);
    if let Some(v8) = v7 {
        let v9 = constructor_fpu_move_fp_imm(ctx, v8, &ScalarSize::Size64);
        // Rule at src/isa/aarch64/inst.isle line 3264.
        return v9;
    }
    let v10 = C::u64_as_u32(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = constructor_constant_f32(ctx, v11);
        // Rule at src/isa/aarch64/inst.isle line 3267.
        return v12;
    }
    let v13 = C::u64_low32_bits_unset(ctx, arg0);
    if let Some(v14) = v13 {
        let v17 = constructor_imm(ctx, I64, &ImmExtend::Zero, v14);
        let v18 = constructor_mov_to_fpu(ctx, v17, &ScalarSize::Size64);
        // Rule at src/isa/aarch64/inst.isle line 3269.
        return v18;
    }
    let v19 = C::emit_u64_le_const(ctx, arg0);
    let v20 = AMode::Const { addr: v19 };
    let v21 = C::mem_flags_trusted(ctx);
    let v22 = constructor_fpu_load64(ctx, &v20, v21);
    // Rule at src/isa/aarch64/inst.isle line 3271.
    return v22;
}

// Generated as internal constructor for term constant_f128.
pub fn constructor_constant_f128<C: Context>(ctx: &mut C, arg0: u128) -> Reg {
    if arg0 == 0x0 {
        let v2 = C::asimd_mov_mod_imm_zero(ctx, &ScalarSize::Size8);
        let v5 = constructor_vec_dup_imm(ctx, v2, false, &VectorSize::Size8x16);
        // Rule at src/isa/aarch64/inst.isle line 3280.
        return v5;
    }
    let v6 = C::u128_as_u64(ctx, arg0);
    if let Some(v7) = v6 {
        let v8 = constructor_constant_f64(ctx, v7);
        // Rule at src/isa/aarch64/inst.isle line 3286.
        return v8;
    }
    let v9 = C::u128_replicated_u64(ctx, arg0);
    if let Some(v10) = v9 {
        let v12 = constructor_splat_const(ctx, v10, &VectorSize::Size64x2);
        // Rule at src/isa/aarch64/inst.isle line 3290.
        return v12;
    }
    let v13 = C::emit_u128_le_const(ctx, arg0);
    let v14 = AMode::Const { addr: v13 };
    let v15 = C::mem_flags_trusted(ctx);
    let v16 = constructor_fpu_load128(ctx, &v14, v15);
    // Rule at src/isa/aarch64/inst.isle line 3294.
    return v16;
}

// Generated as internal constructor for term splat_const.
pub fn constructor_splat_const<C: Context>(ctx: &mut C, arg0: u64, arg1: &VectorSize) -> Reg {
    match arg1 {
        &VectorSize::Size16x4 => {
            let v12 = C::u16_replicated_u8(ctx, arg0);
            if let Some(v13) = v12 {
                let v14 = C::u8_as_u64(ctx, v13);
                let v18 = constructor_splat_const(ctx, v14, &VectorSize::Size8x8);
                // Rule at src/isa/aarch64/inst.isle line 3313.
                return v18;
            }
        }
        &VectorSize::Size16x8 => {
            let v12 = C::u16_replicated_u8(ctx, arg0);
            if let Some(v13) = v12 {
                let v14 = C::u8_as_u64(ctx, v13);
                let v16 = constructor_splat_const(ctx, v14, &VectorSize::Size8x16);
                // Rule at src/isa/aarch64/inst.isle line 3311.
                return v16;
            }
        }
        &VectorSize::Size32x2 => {
            let v6 = C::u32_replicated_u16(ctx, arg0);
            if let Some(v7) = v6 {
                let v11 = constructor_splat_const(ctx, v7, &VectorSize::Size16x4);
                // Rule at src/isa/aarch64/inst.isle line 3309.
                return v11;
            }
        }
        &VectorSize::Size32x4 => {
            let v6 = C::u32_replicated_u16(ctx, arg0);
            if let Some(v7) = v6 {
                let v9 = constructor_splat_const(ctx, v7, &VectorSize::Size16x8);
                // Rule at src/isa/aarch64/inst.isle line 3307.
                return v9;
            }
        }
        &VectorSize::Size64x2 => {
            let v1 = C::u64_replicated_u32(ctx, arg0);
            if let Some(v2) = v1 {
                let v5 = constructor_splat_const(ctx, v2, &VectorSize::Size32x4);
                // Rule at src/isa/aarch64/inst.isle line 3305.
                return v5;
            }
        }
        _ => {}
    }
    let v19 = &constructor_vector_lane_size(ctx, arg1);
    let v20 = C::asimd_mov_mod_imm_from_u64(ctx, arg0, v19);
    if let Some(v21) = v20 {
        let v23 = constructor_vec_dup_imm(ctx, v21, false, arg1);
        // Rule at src/isa/aarch64/inst.isle line 3318.
        return v23;
    }
    let v24 = C::u64_not(ctx, arg0);
    let v25 = C::asimd_mov_mod_imm_from_u64(ctx, v24, v19);
    if let Some(v26) = v25 {
        let v28 = constructor_vec_dup_imm(ctx, v26, true, arg1);
        // Rule at src/isa/aarch64/inst.isle line 3321.
        return v28;
    }
    match arg1 {
        &VectorSize::Size32x2 => {
            let v30 = C::u64_shl(ctx, arg0, 0x20);
            let v31 = C::u64_or(ctx, arg0, v30);
            let v33 = C::asimd_mov_mod_imm_from_u64(ctx, v31, &ScalarSize::Size64);
            if let Some(v34) = v33 {
                let v36 = constructor_vec_dup_imm(ctx, v34, false, &VectorSize::Size64x2);
                let v37 = constructor_fpu_extend(ctx, v36, &ScalarSize::Size64);
                // Rule at src/isa/aarch64/inst.isle line 3330.
                return v37;
            }
        }
        &VectorSize::Size32x4 => {
            let v30 = C::u64_shl(ctx, arg0, 0x20);
            let v31 = C::u64_or(ctx, arg0, v30);
            let v33 = C::asimd_mov_mod_imm_from_u64(ctx, v31, &ScalarSize::Size64);
            if let Some(v34) = v33 {
                let v36 = constructor_vec_dup_imm(ctx, v34, false, &VectorSize::Size64x2);
                // Rule at src/isa/aarch64/inst.isle line 3327.
                return v36;
            }
        }
        _ => {}
    }
    let v38 = C::asimd_fp_mod_imm_from_u64(ctx, arg0, v19);
    if let Some(v39) = v38 {
        let v40 = constructor_vec_dup_fp_imm(ctx, v39, arg1);
        // Rule at src/isa/aarch64/inst.isle line 3334.
        return v40;
    }
    let v43 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg0);
    let v44 = constructor_vec_dup(ctx, v43, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3340.
    return v44;
}

// Generated as internal constructor for term float_cmp_zero.
pub fn constructor_float_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3375.
    return v4;
}

// Generated as internal constructor for term float_cmp_zero_swap.
pub fn constructor_float_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::float_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3380.
    return v4;
}

// Generated as internal constructor for term fcmeq0.
pub fn constructor_fcmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Fcmeq0, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3385.
    return v3;
}

// Generated as internal constructor for term int_cmp_zero.
pub fn constructor_int_cmp_zero<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3405.
    return v4;
}

// Generated as internal constructor for term int_cmp_zero_swap.
pub fn constructor_int_cmp_zero_swap<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v3 = &C::int_cc_cmp_zero_to_vec_misc_op_swap(ctx, arg0);
    let v4 = constructor_vec_misc(ctx, v3, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3410.
    return v4;
}

// Generated as internal constructor for term cmeq0.
pub fn constructor_cmeq0<C: Context>(ctx: &mut C, arg0: Reg, arg1: &VectorSize) -> Reg {
    let v3 = constructor_vec_misc(ctx, &VecMisc2::Cmeq0, arg0, arg1);
    // Rule at src/isa/aarch64/inst.isle line 3415.
    return v3;
}

// Generated as internal constructor for term lse_atomic_rmw.
pub fn constructor_lse_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWOp,
    arg1: Value,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = C::temp_writable_reg(ctx, arg3);
    let v7 = MInst::AtomicRMW {
        op: arg0.clone(),
        rs: arg2,
        rt: v6,
        rn: v5,
        ty: arg3,
        flags: arg4,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 3420.
    return v9;
}

// Generated as internal constructor for term lse_atomic_cas.
pub fn constructor_lse_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg3);
    let v6 = MInst::AtomicCAS {
        rd: v5,
        rs: arg1,
        rt: arg2,
        rn: arg0,
        ty: arg3,
        flags: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/aarch64/inst.isle line 3430.
    return v8;
}

// Generated as internal constructor for term atomic_rmw_loop.
pub fn constructor_atomic_rmw_loop<C: Context>(
    ctx: &mut C,
    arg0: &AtomicRMWLoopOp,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = C::temp_writable_reg(ctx, I64);
    let v9 = MInst::AtomicRMWLoop {
        ty: arg3,
        op: arg0.clone(),
        flags: arg4,
        addr: arg1,
        operand: arg2,
        oldval: v6,
        scratch1: v7,
        scratch2: v8,
    };
    let v10 = C::emit(ctx, &v9);
    let v11 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 3444.
    return v11;
}

// Generated as internal constructor for term atomic_cas_loop.
pub fn constructor_atomic_cas_loop<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Reg,
    arg3: Type,
    arg4: MemFlags,
) -> Reg {
    let v6 = C::temp_writable_reg(ctx, I64);
    let v7 = C::temp_writable_reg(ctx, I64);
    let v8 = MInst::AtomicCASLoop {
        ty: arg3,
        flags: arg4,
        addr: arg0,
        expected: arg1,
        replacement: arg2,
        oldval: v6,
        scratch: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v6);
    // Rule at src/isa/aarch64/inst.isle line 3458.
    return v10;
}

// Generated as internal constructor for term copy_reg.
pub fn constructor_copy_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v5 = MInst::Mov {
                size: OperandSize::Size32,
                rd: v3,
                rm: arg1,
            };
            let v6 = C::emit(ctx, &v5);
            let v7 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/aarch64/inst.isle line 3471.
            return v7;
        }
        I64 => {
            let v9 = C::temp_writable_reg(ctx, I64);
            let v11 = MInst::Mov {
                size: OperandSize::Size64,
                rd: v9,
                rm: arg1,
            };
            let v12 = C::emit(ctx, &v11);
            let v13 = C::writable_reg_to_reg(ctx, v9);
            // Rule at src/isa/aarch64/inst.isle line 3477.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg", "src/isa/aarch64/inst.isle line 3470"
    )
}

// Generated as internal constructor for term mov_from_preg.
pub fn constructor_mov_from_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovFromPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 3487.
    return v5;
}

// Generated as internal constructor for term mov_to_preg.
pub fn constructor_mov_to_preg<C: Context>(
    ctx: &mut C,
    arg0: PReg,
    arg1: Reg,
) -> SideEffectNoResult {
    let v2 = MInst::MovToPReg { rd: arg0, rm: arg1 };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/aarch64/inst.isle line 3493.
    return v3;
}

// Generated as internal constructor for term aarch64_sp.
pub fn constructor_aarch64_sp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_sp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/aarch64/inst.isle line 3509.
    return v1;
}

// Generated as internal constructor for term aarch64_fp.
pub fn constructor_aarch64_fp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_fp(ctx);
    let v1 = constructor_mov_from_preg(ctx, v0);
    // Rule at src/isa/aarch64/inst.isle line 3513.
    return v1;
}

// Generated as internal constructor for term aarch64_link.
pub fn constructor_aarch64_link<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preserve_frame_pointers(ctx);
    if let Some(v1) = v0 {
        let v2 = C::sign_return_address_disabled(ctx);
        if let Some(v3) = v2 {
            let v5 = C::temp_writable_reg(ctx, I64);
            let v7 = AMode::FPOffset { off: 0x8 };
            let v8 = C::mem_flags_trusted(ctx);
            let v9 = MInst::ULoad64 {
                rd: v5,
                mem: v7,
                flags: v8,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v5);
            // Rule at src/isa/aarch64/inst.isle line 3517.
            return v11;
        }
        let v12 = C::writable_link_reg(ctx);
        let v7 = AMode::FPOffset { off: 0x8 };
        let v8 = C::mem_flags_trusted(ctx);
        let v13 = MInst::ULoad64 {
            rd: v12,
            mem: v7,
            flags: v8,
        };
        let v14 = C::emit(ctx, &v13);
        let v16 = C::emit(ctx, &MInst::Xpaclri);
        let v17 = C::preg_link(ctx);
        let v18 = constructor_mov_from_preg(ctx, v17);
        // Rule at src/isa/aarch64/inst.isle line 3533.
        return v18;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aarch64_link", "src/isa/aarch64/inst.isle line 3516"
    )
}

// Generated as internal constructor for term max_shift.
pub fn constructor_max_shift<C: Context>(ctx: &mut C, arg0: Type) -> u8 {
    match arg0 {
        F32 => {
            // Rule at src/isa/aarch64/inst.isle line 3549.
            return 0x1F;
        }
        F64 => {
            // Rule at src/isa/aarch64/inst.isle line 3548.
            return 0x3F;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "max_shift", "src/isa/aarch64/inst.isle line 3547"
    )
}

// Generated as internal constructor for term fcopy_sign.
pub fn constructor_fcopy_sign<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg, arg2: Type) -> Reg {
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = C::temp_writable_reg(ctx, F64);
        let v8 = constructor_max_shift(ctx, v4);
        let v7 = C::ty_bits(ctx, v4);
        let v9 = &C::fpu_op_ri_ushr(ctx, v7, v8);
        let v10 = constructor_fpu_rri(ctx, v9, arg1);
        let v11 = constructor_max_shift(ctx, v4);
        let v12 = &C::fpu_op_ri_sli(ctx, v7, v11);
        let v13 = MInst::FpuRRIMod {
            fpu_op: v12.clone(),
            rd: v6,
            ri: arg0,
            rn: v10,
        };
        let v14 = C::emit(ctx, &v13);
        let v15 = C::writable_reg_to_reg(ctx, v6);
        // Rule at src/isa/aarch64/inst.isle line 3554.
        return v15;
    }
    let v16 = C::multi_lane(ctx, arg2);
    if let Some(v17) = v16 {
        let v21 = C::temp_writable_reg(ctx, I8X16);
        let v22 = C::lane_type(ctx, arg2);
        let v23 = constructor_max_shift(ctx, v22);
        let v24 = &constructor_vector_size(ctx, arg2);
        let v25 = constructor_ushr_vec_imm(ctx, arg1, v23, v24);
        let v27 = &constructor_vector_size(ctx, arg2);
        let v28 = constructor_max_shift(ctx, v22);
        let v29 = MInst::VecShiftImmMod {
            op: VecShiftImmModOp::Sli,
            rd: v21,
            ri: arg0,
            rn: v25,
            size: v27.clone(),
            imm: v28,
        };
        let v30 = C::emit(ctx, &v29);
        let v31 = C::writable_reg_to_reg(ctx, v21);
        // Rule at src/isa/aarch64/inst.isle line 3559.
        return v31;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcopy_sign", "src/isa/aarch64/inst.isle line 3553"
    )
}

// Generated as internal constructor for term fpu_to_int_nan_check.
pub fn constructor_fpu_to_int_nan_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
) -> Reg {
    let v2 = &constructor_fpu_cmp(ctx, arg0, arg1, arg1);
    let v4 = C::cond_br_cond(ctx, &Cond::Vs);
    let v5 = &C::trap_code_bad_conversion_to_integer(ctx);
    let v6 = MInst::TrapIf {
        kind: v4,
        trap_code: v5.clone(),
    };
    let v7 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v6,
        result: arg1,
    };
    let v8 = constructor_with_flags(ctx, v2, &v7);
    let v10 = C::value_regs_get(ctx, v8, 0x0);
    // Rule at src/isa/aarch64/inst.isle line 3568.
    return v10;
}

// Generated as internal constructor for term fpu_to_int_underflow_check.
pub fn constructor_fpu_to_int_underflow_check<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg0 {
        true => {
            match arg1 {
                F32 => {
                    let v3 = C::fits_in_16(ctx, arg2);
                    if let Some(v4) = v3 {
                        let v8 = &constructor_fpu_cmp(ctx, &ScalarSize::Size32, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v14 = constructor_with_flags(ctx, v8, &v13);
                        let v16 = C::value_regs_get(ctx, v14, 0x0);
                        // Rule at src/isa/aarch64/inst.isle line 3581.
                        return v16;
                    }
                }
                F64 => {
                    let v17 = C::fits_in_32(ctx, arg2);
                    if let Some(v18) = v17 {
                        let v20 = &constructor_fpu_cmp(ctx, &ScalarSize::Size64, arg3, arg4);
                        let v10 = C::cond_br_cond(ctx, &Cond::Le);
                        let v11 = &C::trap_code_integer_overflow(ctx);
                        let v12 = MInst::TrapIf {
                            kind: v10,
                            trap_code: v11.clone(),
                        };
                        let v13 = ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: v12,
                            result: arg3,
                        };
                        let v21 = constructor_with_flags(ctx, v20, &v13);
                        let v22 = C::value_regs_get(ctx, v21, 0x0);
                        // Rule at src/isa/aarch64/inst.isle line 3589.
                        return v22;
                    }
                }
                _ => {}
            }
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v26 = C::cond_br_cond(ctx, &Cond::Lt);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v27 = MInst::TrapIf {
                kind: v26,
                trap_code: v11.clone(),
            };
            let v28 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v27,
                result: arg3,
            };
            let v29 = constructor_with_flags(ctx, v24, &v28);
            let v30 = C::value_regs_get(ctx, v29, 0x0);
            // Rule at src/isa/aarch64/inst.isle line 3597.
            return v30;
        }
        false => {
            let v23 = &constructor_scalar_size(ctx, arg1);
            let v24 = &constructor_fpu_cmp(ctx, v23, arg3, arg4);
            let v31 = C::cond_br_cond(ctx, &Cond::Le);
            let v11 = &C::trap_code_integer_overflow(ctx);
            let v32 = MInst::TrapIf {
                kind: v31,
                trap_code: v11.clone(),
            };
            let v33 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v32,
                result: arg3,
            };
            let v34 = constructor_with_flags(ctx, v24, &v33);
            let v35 = C::value_regs_get(ctx, v34, 0x0);
            // Rule at src/isa/aarch64/inst.isle line 3605.
            return v35;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_to_int_underflow_check", "src/isa/aarch64/inst.isle line 3580"
    )
}

// Generated as internal constructor for term fpu_to_int_overflow_check.
pub fn constructor_fpu_to_int_overflow_check<C: Context>(
    ctx: &mut C,
    arg0: &ScalarSize,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpu_cmp(ctx, arg0, arg1, arg2);
    let v5 = C::cond_br_cond(ctx, &Cond::Ge);
    let v6 = &C::trap_code_integer_overflow(ctx);
    let v7 = MInst::TrapIf {
        kind: v5,
        trap_code: v6.clone(),
    };
    let v8 = ConsumesFlags::ConsumesFlagsReturnsReg {
        inst: v7,
        result: arg1,
    };
    let v9 = constructor_with_flags(ctx, v3, &v8);
    let v11 = C::value_regs_get(ctx, v9, 0x0);
    // Rule at src/isa/aarch64/inst.isle line 3615.
    return v11;
}

// Generated as internal constructor for term fpu_to_int_cvt.
pub fn constructor_fpu_to_int_cvt<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
    arg4: Type,
) -> Reg {
    let v5 = &constructor_scalar_size(ctx, arg3);
    let v8 = constructor_fpu_to_int_nan_check(ctx, v5, arg1);
    let v6 = C::ty_bits(ctx, arg3);
    let v7 = C::ty_bits(ctx, arg4);
    let v9 = C::min_fp_value(ctx, arg2, v6, v7);
    let v10 = constructor_fpu_to_int_underflow_check(ctx, arg2, arg3, arg4, v8, v9);
    let v11 = C::max_fp_value(ctx, arg2, v6, v7);
    let v12 = constructor_fpu_to_int_overflow_check(ctx, v5, v10, v11);
    let v13 = constructor_fpu_to_int(ctx, arg0, v12);
    // Rule at src/isa/aarch64/inst.isle line 3631.
    return v13;
}

// Generated as internal constructor for term fpu_to_int_cvt_sat.
pub fn constructor_fpu_to_int_cvt_sat<C: Context>(
    ctx: &mut C,
    arg0: &FpuToIntOp,
    arg1: Reg,
    arg2: bool,
    arg3: Type,
) -> Reg {
    match arg3 {
        I32 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src/isa/aarch64/inst.isle line 3650.
            return v4;
        }
        I64 => {
            let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
            // Rule at src/isa/aarch64/inst.isle line 3648.
            return v4;
        }
        _ => {}
    }
    match arg2 {
        true => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v15 = constructor_signed_max(ctx, v6);
                let v16 = constructor_signed_min(ctx, v6);
                let v17 = &constructor_operand_size(ctx, v6);
                let v18 = &constructor_cmp(ctx, v17, v4, v15);
                let v20 = &constructor_csel(ctx, &Cond::Gt, v15, v4);
                let v21 = constructor_with_flags_reg(ctx, v18, v20);
                let v22 = &constructor_operand_size(ctx, v6);
                let v23 = &constructor_cmp(ctx, v22, v21, v16);
                let v25 = &constructor_csel(ctx, &Cond::Lt, v16, v21);
                let v26 = constructor_with_flags_reg(ctx, v23, v25);
                // Rule at src/isa/aarch64/inst.isle line 3658.
                return v26;
            }
        }
        false => {
            let v5 = C::fits_in_16(ctx, arg3);
            if let Some(v6) = v5 {
                let v4 = constructor_fpu_to_int(ctx, arg0, arg1);
                let v8 = C::ty_mask(ctx, v6);
                let v9 = constructor_imm(ctx, v6, &ImmExtend::Zero, v8);
                let v11 = &constructor_cmp(ctx, &OperandSize::Size32, v4, v9);
                let v13 = &constructor_csel(ctx, &Cond::Hi, v9, v4);
                let v14 = constructor_with_flags_reg(ctx, v11, v13);
                // Rule at src/isa/aarch64/inst.isle line 3652.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpu_to_int_cvt_sat", "src/isa/aarch64/inst.isle line 3647"
    )
}

// Generated as internal constructor for term signed_min.
pub fn constructor_signed_min<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x80);
            // Rule at src/isa/aarch64/inst.isle line 3671.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x8000);
            // Rule at src/isa/aarch64/inst.isle line 3672.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "signed_min", "src/isa/aarch64/inst.isle line 3670"
    )
}

// Generated as internal constructor for term signed_max.
pub fn constructor_signed_max<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_imm(ctx, I8, &ImmExtend::Sign, 0x7F);
            // Rule at src/isa/aarch64/inst.isle line 3675.
            return v4;
        }
        I16 => {
            let v7 = constructor_imm(ctx, I16, &ImmExtend::Sign, 0x7FFF);
            // Rule at src/isa/aarch64/inst.isle line 3676.
            return v7;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "signed_max", "src/isa/aarch64/inst.isle line 3674"
    )
}

// Generated as internal constructor for term fpu_to_int.
pub fn constructor_fpu_to_int<C: Context>(ctx: &mut C, arg0: &FpuToIntOp, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::FpuToInt {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3679.
    return v6;
}

// Generated as internal constructor for term int_to_fpu.
pub fn constructor_int_to_fpu<C: Context>(ctx: &mut C, arg0: &IntToFpuOp, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::IntToFpu {
        op: arg0.clone(),
        rd: v3,
        rn: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3687.
    return v6;
}

// Generated as internal constructor for term write_pinned_reg.
pub fn constructor_write_pinned_reg<C: Context>(ctx: &mut C, arg0: Reg) -> SideEffectNoResult {
    let v1 = C::preg_pinned(ctx);
    let v2 = &constructor_mov_to_preg(ctx, v1, arg0);
    // Rule at src/isa/aarch64/inst.isle line 3703.
    return v2.clone();
}

// Generated as internal constructor for term compute_stack_addr.
pub fn constructor_compute_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: StackSlot,
    arg1: Offset32,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg0, arg1);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 3709.
    return v6;
}

// Generated as internal constructor for term vec_cmp_vc.
pub fn constructor_vec_cmp_vc<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg0, arg2);
    let v5 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg1, arg1, arg2);
    let v7 = constructor_vec_rrr(ctx, &VecALUOp::And, v4, v5, arg2);
    // Rule at src/isa/aarch64/inst.isle line 3717.
    return v7;
}

// Generated as internal constructor for term vec_cmp.
pub fn constructor_vec_cmp<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: Type,
    arg3: &Cond,
) -> Reg {
    match arg3 {
        &Cond::Eq => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3761.
                return v23;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3739.
                return v12;
            }
        }
        &Cond::Ne => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v23 = constructor_vec_rrr(ctx, &VecALUOp::Cmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v24 = constructor_vec_misc(ctx, &VecMisc2::Not, v23, v9);
                // Rule at src/isa/aarch64/inst.isle line 3764.
                return v24;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v12 = constructor_vec_rrr(ctx, &VecALUOp::Fcmeq, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v13 = constructor_vec_misc(ctx, &VecMisc2::Not, v12, v9);
                // Rule at src/isa/aarch64/inst.isle line 3742.
                return v13;
            }
        }
        &Cond::Hs => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v30 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3774.
                return v30;
            }
        }
        &Cond::Lo => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v36 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3790.
                return v36;
            }
        }
        &Cond::Mi => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v18 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3753.
                return v18;
            }
        }
        &Cond::Vs => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                let v9 = &constructor_vector_size(ctx, arg2);
                let v10 = constructor_vec_misc(ctx, &VecMisc2::Not, v7, v9);
                // Rule at src/isa/aarch64/inst.isle line 3729.
                return v10;
            }
        }
        &Cond::Vc => {
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v7 = constructor_vec_cmp_vc(ctx, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3726.
                return v7;
            }
        }
        &Cond::Hi => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v32 = constructor_vec_rrr(ctx, &VecALUOp::Cmhi, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3777.
                return v32;
            }
        }
        &Cond::Ls => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v35 = constructor_vec_rrr(ctx, &VecALUOp::Cmhs, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3787.
                return v35;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v19 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3756.
                return v19;
            }
        }
        &Cond::Ge => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v26 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3768.
                return v26;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v15 = constructor_vec_rrr(ctx, &VecALUOp::Fcmge, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3746.
                return v15;
            }
        }
        &Cond::Lt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v34 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3784.
                return v34;
            }
        }
        &Cond::Gt => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v28 = constructor_vec_rrr(ctx, &VecALUOp::Cmgt, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3771.
                return v28;
            }
            let v4 = C::ty_vector_float(ctx, arg2);
            if let Some(v5) = v4 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v17 = constructor_vec_rrr(ctx, &VecALUOp::Fcmgt, arg0, arg1, v6);
                // Rule at src/isa/aarch64/inst.isle line 3749.
                return v17;
            }
        }
        &Cond::Le => {
            let v20 = C::ty_vector_not_float(ctx, arg2);
            if let Some(v21) = v20 {
                let v6 = &constructor_vector_size(ctx, arg2);
                let v33 = constructor_vec_rrr(ctx, &VecALUOp::Cmge, arg1, arg0, v6);
                // Rule at src/isa/aarch64/inst.isle line 3781.
                return v33;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmp", "src/isa/aarch64/inst.isle line 3723"
    )
}

// Generated as internal constructor for term vanytrue.
pub fn constructor_vanytrue<C: Context>(ctx: &mut C, arg0: Reg, arg1: Type) -> ProducesFlags {
    let v2 = C::ty_vec128(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = constructor_vec_rrr(ctx, &VecALUOp::Umaxp, arg0, arg0, &VectorSize::Size32x4);
        let v9 = constructor_mov_from_vec(ctx, v6, 0x0, &ScalarSize::Size64);
        let v11 = C::u8_into_imm12(ctx, 0x0);
        let v12 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v9, v11);
        // Rule at src/isa/aarch64/inst.isle line 3802.
        return v12.clone();
    }
    let v13 = C::ty_vec64_ctor(ctx, arg1);
    if let Some(v14) = v13 {
        let v15 = constructor_mov_from_vec(ctx, arg0, 0x0, &ScalarSize::Size64);
        let v16 = C::u8_into_imm12(ctx, 0x0);
        let v17 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v15, v16);
        // Rule at src/isa/aarch64/inst.isle line 3806.
        return v17.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vanytrue", "src/isa/aarch64/inst.isle line 3801"
    )
}

// Generated as internal constructor for term elf_tls_get_addr.
pub fn constructor_elf_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::box_external_name(ctx, arg0);
    let v5 = MInst::ElfTlsGetAddr {
        symbol: v4,
        rd: v2,
        tmp: v3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 3815.
    return v7;
}

// Generated as internal constructor for term macho_tls_get_addr.
pub fn constructor_macho_tls_get_addr<C: Context>(ctx: &mut C, arg0: ExternalName) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MachOTlsGetAddr {
        symbol: arg0,
        rd: v2,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst.isle line 3822.
    return v5;
}

// Generated as internal constructor for term flags_and_cc.
pub fn constructor_flags_and_cc<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &IntCC,
) -> FlagsAndCC {
    let v2 = FlagsAndCC::FlagsAndCC {
        flags: arg0.clone(),
        cc: arg1.clone(),
    };
    // Rule at src/isa/aarch64/inst.isle line 3833.
    return v2;
}

// Generated as internal constructor for term flags_and_cc_to_bool.
pub fn constructor_flags_and_cc_to_bool<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> ValueRegs {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        let v3 = &C::cond_code(ctx, v2);
        let v4 = &constructor_materialize_bool_result(ctx, v3);
        let v5 = constructor_with_flags(ctx, v1, v4);
        // Rule at src/isa/aarch64/inst.isle line 3837.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_to_bool", "src/isa/aarch64/inst.isle line 3836"
    )
}

// Generated as internal constructor for term flags_and_cc_flags.
pub fn constructor_flags_and_cc_flags<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> ProducesFlags {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        // Rule at src/isa/aarch64/inst.isle line 3842.
        return v1.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_flags", "src/isa/aarch64/inst.isle line 3841"
    )
}

// Generated as internal constructor for term flags_and_cc_cc.
pub fn constructor_flags_and_cc_cc<C: Context>(ctx: &mut C, arg0: &FlagsAndCC) -> IntCC {
    if let &FlagsAndCC::FlagsAndCC {
        flags: ref v1,
        cc: ref v2,
    } = arg0
    {
        // Rule at src/isa/aarch64/inst.isle line 3846.
        return v2.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "flags_and_cc_cc", "src/isa/aarch64/inst.isle line 3845"
    )
}

// Generated as internal constructor for term lower_icmp.
pub fn constructor_lower_icmp<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::fits_in_16(ctx, arg3);
    if let Some(v5) = v4 {
        let v6 = &C::signed_cond_code(ctx, arg0);
        if let Some(v7) = v6 {
            let v8 = constructor_put_in_reg_sext32(ctx, arg1);
            let v9 = &constructor_operand_size(ctx, v5);
            let v10 = C::put_in_reg(ctx, arg2);
            let v12 = &constructor_lower_extend_op(ctx, v5, &ArgumentExtension::Sext);
            let v13 = &constructor_cmp_extend(ctx, v9, v8, v10, v12);
            let v14 = &constructor_flags_and_cc(ctx, v13, arg0);
            // Rule at src/isa/aarch64/inst.isle line 3880.
            return v14.clone();
        }
    }
    if arg3 == I128 {
        match arg0 {
            &IntCC::Equal => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v39 = &constructor_flags_and_cc(ctx, v37, &IntCC::Equal);
                // Rule at src/isa/aarch64/inst.isle line 3946.
                return v39.clone();
            }
            &IntCC::NotEqual => {
                let v37 = &constructor_lower_icmp_i128_eq_ne(ctx, arg1, arg2);
                let v41 = &constructor_flags_and_cc(ctx, v37, &IntCC::NotEqual);
                // Rule at src/isa/aarch64/inst.isle line 3948.
                return v41.clone();
            }
            _ => {}
        }
    }
    if let Some(v5) = v4 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17
            {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v21 = C::imm12_from_u64(ctx, v20);
                    if let Some(v22) = v21 {
                        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
                        let v9 = &constructor_operand_size(ctx, v5);
                        let v24 = &constructor_cmp_imm(ctx, v9, v23, v22);
                        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
                        // Rule at src/isa/aarch64/inst.isle line 3884.
                        return v25.clone();
                    }
                }
            }
        }
        let v23 = constructor_put_in_reg_zext32(ctx, arg1);
        let v9 = &constructor_operand_size(ctx, v5);
        let v10 = C::put_in_reg(ctx, arg2);
        let v27 = &constructor_lower_extend_op(ctx, v5, &ArgumentExtension::Uext);
        let v28 = &constructor_cmp_extend(ctx, v9, v23, v10, v27);
        let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3887.
        return v29.clone();
    }
    let v30 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v31) = v30 {
        let v15 = C::def_inst(ctx, arg2);
        if let Some(v16) = v15 {
            let v17 = &C::inst_data(ctx, v16);
            if let &InstructionData::UnaryImm {
                opcode: ref v18,
                imm: v19,
            } = v17
            {
                if let &Opcode::Iconst = v18 {
                    let v20 = C::u64_from_imm64(ctx, v19);
                    let v32 = &constructor_lower_icmp_const(ctx, arg0, arg1, v20, arg3);
                    // Rule at src/isa/aarch64/inst.isle line 3890.
                    return v32.clone();
                }
            }
        }
        let v33 = &constructor_operand_size(ctx, arg3);
        let v34 = C::put_in_reg(ctx, arg1);
        let v10 = C::put_in_reg(ctx, arg2);
        let v35 = &constructor_cmp(ctx, v33, v34, v10);
        let v36 = &constructor_flags_and_cc(ctx, v35, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3893.
        return v36.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp", "src/isa/aarch64/inst.isle line 3851"
    )
}

// Generated as internal constructor for term lower_icmp_into_reg.
pub fn constructor_lower_icmp_into_reg<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
    arg4: Type,
) -> ValueRegs {
    let v4 = C::multi_lane(ctx, arg3);
    if let Some(v5) = v4 {
        let v9 = &C::cond_code(ctx, arg0);
        let v10 = C::put_in_reg(ctx, arg1);
        let v11 = C::put_in_reg(ctx, arg2);
        let v12 = constructor_vec_cmp(ctx, v10, v11, arg3, v9);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src/isa/aarch64/inst.isle line 3861.
        return v13;
    }
    if arg3 == I128 {
        if arg4 == I8 {
            match arg0 {
                &IntCC::Equal => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src/isa/aarch64/inst.isle line 3923.
                    return v20;
                }
                &IntCC::NotEqual => {
                    let v9 = &C::cond_code(ctx, arg0);
                    let v19 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, I128);
                    let v20 = constructor_flags_and_cc_to_bool(ctx, v19);
                    // Rule at src/isa/aarch64/inst.isle line 3927.
                    return v20;
                }
                _ => {}
            }
            let v21 = &C::intcc_unsigned(ctx, arg0);
            let v22 = &C::cond_code(ctx, v21);
            let v23 = &C::cond_code(ctx, arg0);
            let v24 = C::put_in_regs(ctx, arg1);
            let v25 = C::put_in_regs(ctx, arg2);
            let v27 = C::value_regs_get(ctx, v24, 0x0);
            let v29 = C::value_regs_get(ctx, v24, 0x1);
            let v30 = C::value_regs_get(ctx, v25, 0x0);
            let v31 = C::value_regs_get(ctx, v25, 0x1);
            let v33 = &constructor_cmp(ctx, &OperandSize::Size64, v27, v30);
            let v34 = &constructor_materialize_bool_result(ctx, v22);
            let v35 = constructor_with_flags_reg(ctx, v33, v34);
            let v36 = &constructor_cmp(ctx, &OperandSize::Size64, v29, v31);
            let v37 = &constructor_lower_icmp_i128_consumer(ctx, v23, v35);
            let v38 = constructor_with_flags(ctx, v36, v37);
            // Rule at src/isa/aarch64/inst.isle line 3956.
            return v38;
        }
    }
    let v14 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v15) = v14 {
        let v9 = &C::cond_code(ctx, arg0);
        let v16 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
        let v17 = constructor_flags_and_cc_to_bool(ctx, v16);
        // Rule at src/isa/aarch64/inst.isle line 3875.
        return v17;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_into_reg", "src/isa/aarch64/inst.isle line 3852"
    )
}

// Generated as internal constructor for term lower_icmp_into_flags.
pub fn constructor_lower_icmp_into_flags<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: Value,
    arg3: Type,
) -> FlagsAndCC {
    match arg0 {
        &IntCC::SignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4051.
                return v27.clone();
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1);
                let v15 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v13);
                let v16 = &constructor_flags_and_cc(ctx, v15, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4030.
                return v16.clone();
            }
        }
        &IntCC::SignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4059.
                return v29.clone();
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v13 = constructor_imm(ctx, I64, &ImmExtend::Sign, 0x1);
                let v21 = &constructor_cmp(ctx, &OperandSize::Size64, v13, v9);
                let v22 = &constructor_flags_and_cc(ctx, v21, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4040.
                return v22.clone();
            }
        }
        &IntCC::UnsignedGreaterThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v26 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v25);
                let v27 = &constructor_flags_and_cc(ctx, v26, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4055.
                return v27.clone();
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1);
                let v19 = &constructor_cmp(ctx, &OperandSize::Size64, v9, v18);
                let v20 = &constructor_flags_and_cc(ctx, v19, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4035.
                return v20.clone();
            }
        }
        &IntCC::UnsignedLessThan => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v25 = C::zero_reg(ctx);
                let v28 = &constructor_cmp(ctx, &OperandSize::Size64, v25, v9);
                let v29 = &constructor_flags_and_cc(ctx, v28, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4063.
                return v29.clone();
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            if arg3 == I128 {
                let v7 = constructor_lower_icmp_into_reg(ctx, arg0, arg1, arg2, I128, I8);
                let v9 = C::value_regs_get(ctx, v7, 0x0);
                let v18 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x1);
                let v23 = &constructor_cmp(ctx, &OperandSize::Size64, v18, v9);
                let v24 = &constructor_flags_and_cc(ctx, v23, arg0);
                // Rule at src/isa/aarch64/inst.isle line 4045.
                return v24.clone();
            }
        }
        _ => {}
    }
    let v4 = &constructor_lower_icmp(ctx, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 3857.
    return v4.clone();
}

// Generated as internal constructor for term lower_icmp_const.
pub fn constructor_lower_icmp_const<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: Value,
    arg2: u64,
    arg3: Type,
) -> FlagsAndCC {
    let v4 = C::ty_int_ref_scalar_64(ctx, arg3);
    if let Some(v5) = v4 {
        match arg0 {
            &IntCC::SignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v17 = &constructor_flags_and_cc(ctx, v13, &IntCC::SignedGreaterThan);
                        // Rule at src/isa/aarch64/inst.isle line 3908.
                        return v17.clone();
                    }
                }
            }
            &IntCC::UnsignedGreaterThanOrEqual => {
                let v6 = C::u64_is_odd(ctx, arg2);
                if v6 == true {
                    let v8 = C::u64_sub(ctx, arg2, 0x1);
                    let v9 = C::imm12_from_u64(ctx, v8);
                    if let Some(v10) = v9 {
                        let v11 = &constructor_operand_size(ctx, arg3);
                        let v12 = C::put_in_reg(ctx, arg1);
                        let v13 = &constructor_cmp_imm(ctx, v11, v12, v10);
                        let v15 = &constructor_flags_and_cc(ctx, v13, &IntCC::UnsignedGreaterThan);
                        // Rule at src/isa/aarch64/inst.isle line 3903.
                        return v15.clone();
                    }
                }
            }
            _ => {}
        }
        let v18 = C::imm12_from_u64(ctx, arg2);
        if let Some(v19) = v18 {
            let v11 = &constructor_operand_size(ctx, arg3);
            let v12 = C::put_in_reg(ctx, arg1);
            let v20 = &constructor_cmp_imm(ctx, v11, v12, v19);
            let v21 = &constructor_flags_and_cc(ctx, v20, arg0);
            // Rule at src/isa/aarch64/inst.isle line 3914.
            return v21.clone();
        }
        let v11 = &constructor_operand_size(ctx, arg3);
        let v12 = C::put_in_reg(ctx, arg1);
        let v23 = constructor_imm(ctx, arg3, &ImmExtend::Zero, arg2);
        let v24 = &constructor_cmp(ctx, v11, v12, v23);
        let v25 = &constructor_flags_and_cc(ctx, v24, arg0);
        // Rule at src/isa/aarch64/inst.isle line 3917.
        return v25.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_icmp_const", "src/isa/aarch64/inst.isle line 3854"
    )
}

// Generated as internal constructor for term lower_extend_op.
pub fn constructor_lower_extend_op<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ArgumentExtension,
) -> ExtendOp {
    match arg0 {
        I8 => {
            match arg1 {
                &ArgumentExtension::Uext => {
                    // Rule at src/isa/aarch64/inst.isle line 3871.
                    return ExtendOp::UXTB;
                }
                &ArgumentExtension::Sext => {
                    // Rule at src/isa/aarch64/inst.isle line 3869.
                    return ExtendOp::SXTB;
                }
                _ => {}
            }
        }
        I16 => {
            match arg1 {
                &ArgumentExtension::Uext => {
                    // Rule at src/isa/aarch64/inst.isle line 3872.
                    return ExtendOp::UXTH;
                }
                &ArgumentExtension::Sext => {
                    // Rule at src/isa/aarch64/inst.isle line 3870.
                    return ExtendOp::SXTH;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_extend_op", "src/isa/aarch64/inst.isle line 3868"
    )
}

// Generated as internal constructor for term lower_icmp_i128_eq_ne.
pub fn constructor_lower_icmp_i128_eq_ne<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
) -> ProducesFlags {
    let v2 = C::put_in_regs(ctx, arg0);
    let v3 = C::put_in_regs(ctx, arg1);
    let v5 = C::value_regs_get(ctx, v2, 0x0);
    let v7 = C::value_regs_get(ctx, v2, 0x1);
    let v8 = C::value_regs_get(ctx, v3, 0x0);
    let v9 = C::value_regs_get(ctx, v3, 0x1);
    let v11 = &constructor_cmp(ctx, &OperandSize::Size64, v5, v8);
    let v13 = C::nzcv(ctx, false, false, false, false);
    let v15 = &constructor_ccmp(ctx, &OperandSize::Size64, v7, v9, v13, &Cond::Eq, v11);
    // Rule at src/isa/aarch64/inst.isle line 3935.
    return v15.clone();
}

// Generated as internal constructor for term lower_icmp_i128_consumer.
pub fn constructor_lower_icmp_i128_consumer<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: Reg,
) -> ConsumesFlags {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = C::temp_writable_reg(ctx, I64);
    let v9 = C::writable_reg_to_reg(ctx, v4);
    let v10 = C::value_reg(ctx, v9);
    let v5 = MInst::CSet {
        rd: v3,
        cond: arg0.clone(),
    };
    let v7 = C::writable_reg_to_reg(ctx, v3);
    let v8 = MInst::CSel {
        rd: v4,
        cond: Cond::Eq,
        rn: arg1,
        rm: v7,
    };
    let v11 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
        inst1: v5,
        inst2: v8,
        result: v10,
    };
    // Rule at src/isa/aarch64/inst.isle line 3971.
    return v11;
}

// Generated as internal constructor for term lower_bmask.
pub fn constructor_lower_bmask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: ValueRegs,
) -> ValueRegs {
    let v27 = C::fits_in_16(ctx, arg1);
    if let Some(v28) = v27 {
        let v30 = C::ty_mask(ctx, v28);
        let v31 = C::imm_logic_from_u64(ctx, I32, v30);
        if let Some(v32) = v31 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0);
            let v33 = constructor_and_imm(ctx, I32, v17, v32);
            let v34 = C::value_reg(ctx, v33);
            let v35 = constructor_lower_bmask(ctx, arg0, I32, v34);
            // Rule at src/isa/aarch64/inst.isle line 4020.
            return v35;
        }
    }
    if arg0 == I128 {
        let v24 = constructor_lower_bmask(ctx, I64, arg1, arg2);
        let v25 = C::value_regs_get(ctx, v24, 0x0);
        let v26 = C::value_regs(ctx, v25, v25);
        // Rule at src/isa/aarch64/inst.isle line 4008.
        return v26;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == I128 {
            let v17 = C::value_regs_get(ctx, arg2, 0x0);
            let v19 = C::value_regs_get(ctx, arg2, 0x1);
            let v21 = constructor_orr(ctx, I64, v17, v19);
            let v22 = C::value_reg(ctx, v21);
            let v23 = constructor_lower_bmask(ctx, v2, I64, v22);
            // Rule at src/isa/aarch64/inst.isle line 3999.
            return v23;
        }
        let v4 = C::ty_32_or_64(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = &constructor_operand_size(ctx, v5);
            let v9 = C::value_regs_get(ctx, arg2, 0x0);
            let v11 = C::u8_into_imm12(ctx, 0x0);
            let v12 = &constructor_cmp_imm(ctx, v7, v9, v11);
            let v14 = &constructor_csetm(ctx, &Cond::Ne);
            let v15 = constructor_with_flags_reg(ctx, v12, v14);
            let v16 = C::value_reg(ctx, v15);
            // Rule at src/isa/aarch64/inst.isle line 3986.
            return v16;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bmask", "src/isa/aarch64/inst.isle line 3979"
    )
}

// Generated as internal constructor for term lower_select.
pub fn constructor_lower_select<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: Type,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    if arg2 == I128 {
        let v21 = C::temp_writable_reg(ctx, I64);
        let v22 = C::temp_writable_reg(ctx, I64);
        let v23 = C::put_in_regs(ctx, arg3);
        let v24 = C::put_in_regs(ctx, arg4);
        let v26 = C::value_regs_get(ctx, v23, 0x0);
        let v28 = C::value_regs_get(ctx, v23, 0x1);
        let v29 = C::value_regs_get(ctx, v24, 0x0);
        let v30 = C::value_regs_get(ctx, v24, 0x1);
        let v33 = C::writable_reg_to_reg(ctx, v21);
        let v34 = C::writable_reg_to_reg(ctx, v22);
        let v35 = C::value_regs(ctx, v33, v34);
        let v31 = MInst::CSel {
            rd: v21,
            cond: arg1.clone(),
            rn: v26,
            rm: v29,
        };
        let v32 = MInst::CSel {
            rd: v22,
            cond: arg1.clone(),
            rn: v28,
            rm: v30,
        };
        let v36 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v31,
            inst2: v32,
            result: v35,
        };
        let v37 = constructor_with_flags(ctx, arg0, &v36);
        // Rule at src/isa/aarch64/inst.isle line 4077.
        return v37;
    }
    let v11 = C::ty_vec128(ctx, arg2);
    if let Some(v12) = v11 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v13 = &constructor_vec_csel(ctx, arg1, v7, v8);
        let v14 = constructor_with_flags(ctx, arg0, v13);
        // Rule at src/isa/aarch64/inst.isle line 4072.
        return v14;
    }
    let v3 = C::ty_scalar_float(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v9 = &constructor_fpu_csel(ctx, v4, arg1, v7, v8);
        let v10 = constructor_with_flags(ctx, arg0, v9);
        // Rule at src/isa/aarch64/inst.isle line 4070.
        return v10;
    }
    let v38 = C::ty_int_ref_scalar_64(ctx, arg2);
    if let Some(v39) = v38 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v40 = &constructor_csel(ctx, arg1, v7, v8);
        let v41 = constructor_with_flags(ctx, arg0, v40);
        // Rule at src/isa/aarch64/inst.isle line 4091.
        return v41;
    }
    let v15 = C::ty_vec64_ctor(ctx, arg2);
    if let Some(v16) = v15 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v18 = &constructor_fpu_csel(ctx, F64, arg1, v7, v8);
        let v19 = constructor_with_flags(ctx, arg0, v18);
        // Rule at src/isa/aarch64/inst.isle line 4074.
        return v19;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_select", "src/isa/aarch64/inst.isle line 4069"
    )
}

// Generated as internal constructor for term aarch64_jump.
pub fn constructor_aarch64_jump<C: Context>(ctx: &mut C, arg0: BranchTarget) -> SideEffectNoResult {
    let v1 = MInst::Jump { dest: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 4097.
    return v2;
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: MachLabel,
    arg2: &BoxVecMachLabel,
) -> ConsumesFlags {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = C::temp_writable_reg(ctx, I64);
    let v6 = MInst::JTSequence {
        default: arg1,
        targets: arg2.clone(),
        ridx: arg0,
        rtmp1: v4,
        rtmp2: v5,
    };
    let v7 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/aarch64/inst.isle line 4119.
    return v7;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: CondBrKind,
) -> ConsumesFlags {
    let v3 = MInst::CondBr {
        taken: arg0,
        not_taken: arg1,
        kind: arg2,
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/aarch64/inst.isle line 4127.
    return v4;
}

// Generated as internal constructor for term test_branch.
pub fn constructor_test_branch<C: Context>(
    ctx: &mut C,
    arg0: &TestBitAndBranchKind,
    arg1: BranchTarget,
    arg2: BranchTarget,
    arg3: Reg,
    arg4: u8,
) -> SideEffectNoResult {
    let v5 = MInst::TestBitAndBranch {
        kind: arg0.clone(),
        taken: arg1,
        not_taken: arg2,
        rn: arg3,
        bit: arg4,
    };
    let v6 = SideEffectNoResult::Inst { inst: v5 };
    // Rule at src/isa/aarch64/inst.isle line 4133.
    return v6;
}

// Generated as internal constructor for term tbnz.
pub fn constructor_tbnz<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: Reg,
    arg3: u8,
) -> SideEffectNoResult {
    let v5 = &constructor_test_branch(ctx, &TestBitAndBranchKind::NZ, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 4138.
    return v5.clone();
}

// Generated as internal constructor for term tbz.
pub fn constructor_tbz<C: Context>(
    ctx: &mut C,
    arg0: BranchTarget,
    arg1: BranchTarget,
    arg2: Reg,
    arg3: u8,
) -> SideEffectNoResult {
    let v5 = &constructor_test_branch(ctx, &TestBitAndBranchKind::Z, arg0, arg1, arg2, arg3);
    // Rule at src/isa/aarch64/inst.isle line 4143.
    return v5.clone();
}

// Generated as internal constructor for term mov_to_nzcv.
pub fn constructor_mov_to_nzcv<C: Context>(ctx: &mut C, arg0: Reg) -> ProducesFlags {
    let v1 = MInst::MovToNZCV { rn: arg0 };
    let v2 = ProducesFlags::ProducesFlagsSideEffect { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 4148.
    return v2;
}

// Generated as internal constructor for term emit_island.
pub fn constructor_emit_island<C: Context>(ctx: &mut C, arg0: CodeOffset) -> SideEffectNoResult {
    let v1 = MInst::EmitIsland { needed_space: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/aarch64/inst.isle line 4154.
    return v2;
}

// Generated as internal constructor for term br_table_impl.
pub fn constructor_br_table_impl<C: Context>(
    ctx: &mut C,
    arg0: u64,
    arg1: Reg,
    arg2: MachLabel,
    arg3: &BoxVecMachLabel,
) -> Unit {
    let v1 = C::imm12_from_u64(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = &constructor_cmp_imm(ctx, &OperandSize::Size32, arg1, v2);
        let v8 = &constructor_jt_sequence(ctx, arg1, arg2, arg3);
        let v9 = &constructor_with_flags_side_effect(ctx, v7, v8);
        let v10 = constructor_emit_side_effect(ctx, v9);
        // Rule at src/isa/aarch64/inst.isle line 4160.
        return v10;
    }
    let v13 = constructor_imm(ctx, I64, &ImmExtend::Zero, arg0);
    let v14 = &constructor_cmp(ctx, &OperandSize::Size32, arg1, v13);
    let v15 = &constructor_jt_sequence(ctx, arg1, arg2, arg3);
    let v16 = &constructor_with_flags_side_effect(ctx, v14, v15);
    let v17 = constructor_emit_side_effect(ctx, v16);
    // Rule at src/isa/aarch64/inst.isle line 4164.
    return v17;
}

// Generated as internal constructor for term vec_uzp1.
pub fn constructor_vec_uzp1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uzp1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4172.
    return v4;
}

// Generated as internal constructor for term vec_uzp2.
pub fn constructor_vec_uzp2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Uzp2, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4176.
    return v4;
}

// Generated as internal constructor for term vec_zip1.
pub fn constructor_vec_zip1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4180.
    return v4;
}

// Generated as internal constructor for term vec_zip2.
pub fn constructor_vec_zip2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Zip2, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4184.
    return v4;
}

// Generated as internal constructor for term vec_trn1.
pub fn constructor_vec_trn1<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Trn1, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4188.
    return v4;
}

// Generated as internal constructor for term vec_trn2.
pub fn constructor_vec_trn2<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &VectorSize,
) -> Reg {
    let v4 = constructor_vec_rrr(ctx, &VecALUOp::Trn2, arg0, arg1, arg2);
    // Rule at src/isa/aarch64/inst.isle line 4192.
    return v4;
}

// Generated as internal constructor for term vec_dup_fp_imm.
pub fn constructor_vec_dup_fp_imm<C: Context>(
    ctx: &mut C,
    arg0: ASIMDFPModImm,
    arg1: &VectorSize,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::VecDupFPImm {
        rd: v3,
        imm: arg0,
        size: arg1.clone(),
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 4208.
    return v6;
}

// Generated as internal constructor for term fpu_load64.
pub fn constructor_fpu_load64<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuLoad64 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 4215.
    return v6;
}

// Generated as internal constructor for term fpu_load128.
pub fn constructor_fpu_load128<C: Context>(ctx: &mut C, arg0: &AMode, arg1: MemFlags) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I8X16);
    let v4 = MInst::FpuLoad128 {
        rd: v3,
        mem: arg0.clone(),
        flags: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/aarch64/inst.isle line 4222.
    return v6;
}

// Generated as internal constructor for term fpu_move_128.
pub fn constructor_fpu_move_128<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I8X16);
    let v3 = MInst::FpuMove128 { rd: v2, rn: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/aarch64/inst_neon.isle line 4.
    return v5;
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v1379,
            args: ref v1380,
            flags: v1381,
        } => {
            if let &Opcode::AtomicCas = v1379 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1285 = C::valid_atomic_transaction(ctx, v3);
                    if let Some(v1286) = v1285 {
                        let v1306 = C::use_lse(ctx, arg0);
                        if let Some(v1307) = v1306 {
                            let v1382 = C::unpack_value_array_3(ctx, v1380);
                            let v1386 = C::put_in_reg(ctx, v1382.0);
                            let v1387 = C::put_in_reg(ctx, v1382.1);
                            let v1388 = C::put_in_reg(ctx, v1382.2);
                            let v1389 =
                                constructor_lse_atomic_cas(ctx, v1386, v1387, v1388, v1286, v1381);
                            let v1390 = constructor_output_reg(ctx, v1389);
                            // Rule at src/isa/aarch64/lower.isle line 2125.
                            return Some(v1390);
                        }
                        let v1382 = C::unpack_value_array_3(ctx, v1380);
                        let v1386 = C::put_in_reg(ctx, v1382.0);
                        let v1387 = C::put_in_reg(ctx, v1382.1);
                        let v1388 = C::put_in_reg(ctx, v1382.2);
                        let v1391 =
                            constructor_atomic_cas_loop(ctx, v1386, v1387, v1388, v1286, v1381);
                        let v1392 = constructor_output_reg(ctx, v1391);
                        // Rule at src/isa/aarch64/lower.isle line 2130.
                        return Some(v1392);
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v1308,
            args: ref v1309,
            flags: v1310,
            op: ref v1311,
        } => {
            if let &Opcode::AtomicRmw = v1308 {
                match v1311 {
                    &AtomicRmwOp::Add => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1285 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1286) = v1285 {
                                let v1306 = C::use_lse(ctx, arg0);
                                if let Some(v1307) = v1306 {
                                    let v1312 = C::unpack_value_array_2(ctx, v1309);
                                    let v1316 = C::put_in_reg(ctx, v1312.1);
                                    let v1317 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Add,
                                        v1312.0,
                                        v1316,
                                        v1286,
                                        v1310,
                                    );
                                    let v1318 = constructor_output_reg(ctx, v1317);
                                    // Rule at src/isa/aarch64/lower.isle line 2052.
                                    return Some(v1318);
                                }
                                let v1312 = C::unpack_value_array_2(ctx, v1309);
                                let v1346 = C::put_in_reg(ctx, v1312.0);
                                let v1337 = C::put_in_reg(ctx, v1312.1);
                                let v1347 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Add,
                                    v1346,
                                    v1337,
                                    v1286,
                                    v1310,
                                );
                                let v1348 = constructor_output_reg(ctx, v1347);
                                // Rule at src/isa/aarch64/lower.isle line 2090.
                                return Some(v1348);
                            }
                        }
                    }
                    &AtomicRmwOp::And => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1285 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1286) = v1285 {
                                let v1306 = C::use_lse(ctx, arg0);
                                if let Some(v1307) = v1306 {
                                    let v1312 = C::unpack_value_array_2(ctx, v1309);
                                    let v1316 = C::put_in_reg(ctx, v1312.1);
                                    let v1211 = C::zero_reg(ctx);
                                    let v1342 = constructor_eon(ctx, v1286, v1316, v1211);
                                    let v1343 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Clr,
                                        v1312.0,
                                        v1342,
                                        v1286,
                                        v1310,
                                    );
                                    let v1344 = constructor_output_reg(ctx, v1343);
                                    // Rule at src/isa/aarch64/lower.isle line 2084.
                                    return Some(v1344);
                                }
                                let v1312 = C::unpack_value_array_2(ctx, v1309);
                                let v1346 = C::put_in_reg(ctx, v1312.0);
                                let v1337 = C::put_in_reg(ctx, v1312.1);
                                let v1353 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::And,
                                    v1346,
                                    v1337,
                                    v1286,
                                    v1310,
                                );
                                let v1354 = constructor_output_reg(ctx, v1353);
                                // Rule at src/isa/aarch64/lower.isle line 2096.
                                return Some(v1354);
                            }
                        }
                    }
                    &AtomicRmwOp::Nand => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1285 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1286) = v1285 {
                                let v1312 = C::unpack_value_array_2(ctx, v1309);
                                let v1346 = C::put_in_reg(ctx, v1312.0);
                                let v1337 = C::put_in_reg(ctx, v1312.1);
                                let v1356 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Nand,
                                    v1346,
                                    v1337,
                                    v1286,
                                    v1310,
                                );
                                let v1357 = constructor_output_reg(ctx, v1356);
                                // Rule at src/isa/aarch64/lower.isle line 2099.
                                return Some(v1357);
                            }
                        }
                    }
                    &AtomicRmwOp::Or => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1285 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1286) = v1285 {
                                let v1306 = C::use_lse(ctx, arg0);
                                if let Some(v1307) = v1306 {
                                    let v1312 = C::unpack_value_array_2(ctx, v1309);
                                    let v1316 = C::put_in_reg(ctx, v1312.1);
                                    let v1323 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Set,
                                        v1312.0,
                                        v1316,
                                        v1286,
                                        v1310,
                                    );
                                    let v1324 = constructor_output_reg(ctx, v1323);
                                    // Rule at src/isa/aarch64/lower.isle line 2060.
                                    return Some(v1324);
                                }
                                let v1312 = C::unpack_value_array_2(ctx, v1309);
                                let v1346 = C::put_in_reg(ctx, v1312.0);
                                let v1337 = C::put_in_reg(ctx, v1312.1);
                                let v1359 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Orr,
                                    v1346,
                                    v1337,
                                    v1286,
                                    v1310,
                                );
                                let v1360 = constructor_output_reg(ctx, v1359);
                                // Rule at src/isa/aarch64/lower.isle line 2102.
                                return Some(v1360);
                            }
                        }
                    }
                    &AtomicRmwOp::Smax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1285 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1286) = v1285 {
                                let v1306 = C::use_lse(ctx, arg0);
                                if let Some(v1307) = v1306 {
                                    let v1312 = C::unpack_value_array_2(ctx, v1309);
                                    let v1316 = C::put_in_reg(ctx, v1312.1);
                                    let v1326 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Smax,
                                        v1312.0,
                                        v1316,
                                        v1286,
                                        v1310,
                                    );
                                    let v1327 = constructor_output_reg(ctx, v1326);
                                    // Rule at src/isa/aarch64/lower.isle line 2064.
                                    return Some(v1327);
                                }
                                let v1312 = C::unpack_value_array_2(ctx, v1309);
                                let v1346 = C::put_in_reg(ctx, v1312.0);
                                let v1337 = C::put_in_reg(ctx, v1312.1);
                                let v1368 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Smax,
                                    v1346,
                                    v1337,
                                    v1286,
                                    v1310,
                                );
                                let v1369 = constructor_output_reg(ctx, v1368);
                                // Rule at src/isa/aarch64/lower.isle line 2111.
                                return Some(v1369);
                            }
                        }
                    }
                    &AtomicRmwOp::Smin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1285 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1286) = v1285 {
                                let v1306 = C::use_lse(ctx, arg0);
                                if let Some(v1307) = v1306 {
                                    let v1312 = C::unpack_value_array_2(ctx, v1309);
                                    let v1316 = C::put_in_reg(ctx, v1312.1);
                                    let v1329 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Smin,
                                        v1312.0,
                                        v1316,
                                        v1286,
                                        v1310,
                                    );
                                    let v1330 = constructor_output_reg(ctx, v1329);
                                    // Rule at src/isa/aarch64/lower.isle line 2068.
                                    return Some(v1330);
                                }
                                let v1312 = C::unpack_value_array_2(ctx, v1309);
                                let v1346 = C::put_in_reg(ctx, v1312.0);
                                let v1337 = C::put_in_reg(ctx, v1312.1);
                                let v1365 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Smin,
                                    v1346,
                                    v1337,
                                    v1286,
                                    v1310,
                                );
                                let v1366 = constructor_output_reg(ctx, v1365);
                                // Rule at src/isa/aarch64/lower.isle line 2108.
                                return Some(v1366);
                            }
                        }
                    }
                    &AtomicRmwOp::Sub => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1285 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1286) = v1285 {
                                let v1306 = C::use_lse(ctx, arg0);
                                if let Some(v1307) = v1306 {
                                    let v580 = C::zero_reg(ctx);
                                    let v1312 = C::unpack_value_array_2(ctx, v1309);
                                    let v1337 = C::put_in_reg(ctx, v1312.1);
                                    let v1338 = constructor_sub(ctx, v1286, v580, v1337);
                                    let v1339 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Add,
                                        v1312.0,
                                        v1338,
                                        v1286,
                                        v1310,
                                    );
                                    let v1340 = constructor_output_reg(ctx, v1339);
                                    // Rule at src/isa/aarch64/lower.isle line 2080.
                                    return Some(v1340);
                                }
                                let v1312 = C::unpack_value_array_2(ctx, v1309);
                                let v1346 = C::put_in_reg(ctx, v1312.0);
                                let v1337 = C::put_in_reg(ctx, v1312.1);
                                let v1350 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Sub,
                                    v1346,
                                    v1337,
                                    v1286,
                                    v1310,
                                );
                                let v1351 = constructor_output_reg(ctx, v1350);
                                // Rule at src/isa/aarch64/lower.isle line 2093.
                                return Some(v1351);
                            }
                        }
                    }
                    &AtomicRmwOp::Umax => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1285 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1286) = v1285 {
                                let v1306 = C::use_lse(ctx, arg0);
                                if let Some(v1307) = v1306 {
                                    let v1312 = C::unpack_value_array_2(ctx, v1309);
                                    let v1316 = C::put_in_reg(ctx, v1312.1);
                                    let v1332 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Umax,
                                        v1312.0,
                                        v1316,
                                        v1286,
                                        v1310,
                                    );
                                    let v1333 = constructor_output_reg(ctx, v1332);
                                    // Rule at src/isa/aarch64/lower.isle line 2072.
                                    return Some(v1333);
                                }
                                let v1312 = C::unpack_value_array_2(ctx, v1309);
                                let v1346 = C::put_in_reg(ctx, v1312.0);
                                let v1337 = C::put_in_reg(ctx, v1312.1);
                                let v1374 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Umax,
                                    v1346,
                                    v1337,
                                    v1286,
                                    v1310,
                                );
                                let v1375 = constructor_output_reg(ctx, v1374);
                                // Rule at src/isa/aarch64/lower.isle line 2117.
                                return Some(v1375);
                            }
                        }
                    }
                    &AtomicRmwOp::Umin => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1285 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1286) = v1285 {
                                let v1306 = C::use_lse(ctx, arg0);
                                if let Some(v1307) = v1306 {
                                    let v1312 = C::unpack_value_array_2(ctx, v1309);
                                    let v1316 = C::put_in_reg(ctx, v1312.1);
                                    let v1335 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Umin,
                                        v1312.0,
                                        v1316,
                                        v1286,
                                        v1310,
                                    );
                                    let v1336 = constructor_output_reg(ctx, v1335);
                                    // Rule at src/isa/aarch64/lower.isle line 2076.
                                    return Some(v1336);
                                }
                                let v1312 = C::unpack_value_array_2(ctx, v1309);
                                let v1346 = C::put_in_reg(ctx, v1312.0);
                                let v1337 = C::put_in_reg(ctx, v1312.1);
                                let v1371 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Umin,
                                    v1346,
                                    v1337,
                                    v1286,
                                    v1310,
                                );
                                let v1372 = constructor_output_reg(ctx, v1371);
                                // Rule at src/isa/aarch64/lower.isle line 2114.
                                return Some(v1372);
                            }
                        }
                    }
                    &AtomicRmwOp::Xchg => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1285 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1286) = v1285 {
                                let v1312 = C::unpack_value_array_2(ctx, v1309);
                                let v1346 = C::put_in_reg(ctx, v1312.0);
                                let v1337 = C::put_in_reg(ctx, v1312.1);
                                let v1377 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Xchg,
                                    v1346,
                                    v1337,
                                    v1286,
                                    v1310,
                                );
                                let v1378 = constructor_output_reg(ctx, v1377);
                                // Rule at src/isa/aarch64/lower.isle line 2120.
                                return Some(v1378);
                            }
                        }
                    }
                    &AtomicRmwOp::Xor => {
                        let v1 = C::first_result(ctx, arg0);
                        if let Some(v2) = v1 {
                            let v3 = C::value_type(ctx, v2);
                            let v1285 = C::valid_atomic_transaction(ctx, v3);
                            if let Some(v1286) = v1285 {
                                let v1306 = C::use_lse(ctx, arg0);
                                if let Some(v1307) = v1306 {
                                    let v1312 = C::unpack_value_array_2(ctx, v1309);
                                    let v1316 = C::put_in_reg(ctx, v1312.1);
                                    let v1320 = constructor_lse_atomic_rmw(
                                        ctx,
                                        &AtomicRMWOp::Eor,
                                        v1312.0,
                                        v1316,
                                        v1286,
                                        v1310,
                                    );
                                    let v1321 = constructor_output_reg(ctx, v1320);
                                    // Rule at src/isa/aarch64/lower.isle line 2056.
                                    return Some(v1321);
                                }
                                let v1312 = C::unpack_value_array_2(ctx, v1309);
                                let v1346 = C::put_in_reg(ctx, v1312.0);
                                let v1337 = C::put_in_reg(ctx, v1312.1);
                                let v1362 = constructor_atomic_rmw_loop(
                                    ctx,
                                    &AtomicRMWLoopOp::Eor,
                                    v1346,
                                    v1337,
                                    v1286,
                                    v1310,
                                );
                                let v1363 = constructor_output_reg(ctx, v1362);
                                // Rule at src/isa/aarch64/lower.isle line 2105.
                                return Some(v1363);
                            }
                        }
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v29,
            args: ref v30,
        } => {
            match v29 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v228 = constructor_vec_tbl(ctx, v34, v35);
                        let v229 = constructor_output_reg(ctx, v228);
                        // Rule at src/isa/aarch64/lower.isle line 241.
                        return Some(v229);
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v674 = C::ty_int(ctx, v3);
                            if let Some(v675) = v674 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v680 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Lt,
                                    true,
                                    v31.0,
                                    v31.1,
                                );
                                let v681 = C::output(ctx, v680);
                                // Rule at src/isa/aarch64/lower.isle line 1076.
                                return Some(v681);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v56 = C::put_in_reg(ctx, v31.1);
                            let v335 = C::put_in_reg(ctx, v31.0);
                            let v695 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmgt,
                                v56,
                                v335,
                                &VectorSize::Size64x2,
                            );
                            let v696 = C::put_in_reg(ctx, v31.0);
                            let v697 = C::put_in_reg(ctx, v31.1);
                            let v698 = constructor_bsl(ctx, I64X2, v695, v696, v697);
                            let v699 = constructor_output_reg(ctx, v698);
                            // Rule at src/isa/aarch64/lower.isle line 1088.
                            return Some(v699);
                        }
                        let v688 = C::not_i64x2(ctx, v3);
                        if let Some(v689) = v688 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v691 = constructor_vec_rrr(ctx, &VecALUOp::Smin, v34, v35, v121);
                            let v692 = constructor_output_reg(ctx, v691);
                            // Rule at src/isa/aarch64/lower.isle line 1085.
                            return Some(v692);
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v674 = C::ty_int(ctx, v3);
                            if let Some(v675) = v674 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v677 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Lo,
                                    false,
                                    v31.0,
                                    v31.1,
                                );
                                let v678 = C::output(ctx, v677);
                                // Rule at src/isa/aarch64/lower.isle line 1074.
                                return Some(v678);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v56 = C::put_in_reg(ctx, v31.1);
                            let v335 = C::put_in_reg(ctx, v31.0);
                            let v704 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmhi,
                                v56,
                                v335,
                                &VectorSize::Size64x2,
                            );
                            let v696 = C::put_in_reg(ctx, v31.0);
                            let v697 = C::put_in_reg(ctx, v31.1);
                            let v705 = constructor_bsl(ctx, I64X2, v704, v696, v697);
                            let v706 = constructor_output_reg(ctx, v705);
                            // Rule at src/isa/aarch64/lower.isle line 1094.
                            return Some(v706);
                        }
                        let v688 = C::not_i64x2(ctx, v3);
                        if let Some(v689) = v688 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v701 = constructor_vec_rrr(ctx, &VecALUOp::Umin, v34, v35, v121);
                            let v702 = constructor_output_reg(ctx, v701);
                            // Rule at src/isa/aarch64/lower.isle line 1091.
                            return Some(v702);
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v674 = C::ty_int(ctx, v3);
                            if let Some(v675) = v674 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v686 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Gt,
                                    true,
                                    v31.0,
                                    v31.1,
                                );
                                let v687 = C::output(ctx, v686);
                                // Rule at src/isa/aarch64/lower.isle line 1080.
                                return Some(v687);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v710 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmgt,
                                v34,
                                v35,
                                &VectorSize::Size64x2,
                            );
                            let v696 = C::put_in_reg(ctx, v31.0);
                            let v697 = C::put_in_reg(ctx, v31.1);
                            let v711 = constructor_bsl(ctx, I64X2, v710, v696, v697);
                            let v712 = constructor_output_reg(ctx, v711);
                            // Rule at src/isa/aarch64/lower.isle line 1100.
                            return Some(v712);
                        }
                        let v688 = C::not_i64x2(ctx, v3);
                        if let Some(v689) = v688 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v708 = constructor_vec_rrr(ctx, &VecALUOp::Smax, v34, v35, v121);
                            let v709 = constructor_output_reg(ctx, v708);
                            // Rule at src/isa/aarch64/lower.isle line 1097.
                            return Some(v709);
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v674 = C::ty_int(ctx, v3);
                            if let Some(v675) = v674 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v683 = constructor_cmp_and_choose(
                                    ctx,
                                    v28,
                                    &Cond::Hi,
                                    false,
                                    v31.0,
                                    v31.1,
                                );
                                let v684 = C::output(ctx, v683);
                                // Rule at src/isa/aarch64/lower.isle line 1078.
                                return Some(v684);
                            }
                        }
                        if v3 == I64X2 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v716 = constructor_vec_rrr(
                                ctx,
                                &VecALUOp::Cmhi,
                                v34,
                                v35,
                                &VectorSize::Size64x2,
                            );
                            let v696 = C::put_in_reg(ctx, v31.0);
                            let v697 = C::put_in_reg(ctx, v31.1);
                            let v717 = constructor_bsl(ctx, I64X2, v716, v696, v697);
                            let v718 = constructor_output_reg(ctx, v717);
                            // Rule at src/isa/aarch64/lower.isle line 1106.
                            return Some(v718);
                        }
                        let v688 = C::not_i64x2(ctx, v3);
                        if let Some(v689) = v688 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v714 = constructor_vec_rrr(ctx, &VecALUOp::Umax, v34, v35, v121);
                            let v715 = constructor_output_reg(ctx, v714);
                            // Rule at src/isa/aarch64/lower.isle line 1103.
                            return Some(v715);
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v334 = constructor_splat_const(ctx, 0x1, &VectorSize::Size64x2);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v335 = C::put_in_reg(ctx, v31.0);
                            let v112 = C::put_in_reg(ctx, v31.1);
                            let v336 = constructor_orr_vec(ctx, v335, v112, &VectorSize::Size64x2);
                            let v337 = constructor_and_vec(ctx, v336, v334, &VectorSize::Size64x2);
                            let v338 = C::put_in_reg(ctx, v31.0);
                            let v340 =
                                constructor_ushr_vec_imm(ctx, v338, 0x1, &VectorSize::Size64x2);
                            let v341 = C::put_in_reg(ctx, v31.1);
                            let v342 =
                                constructor_ushr_vec_imm(ctx, v341, 0x1, &VectorSize::Size64x2);
                            let v343 = constructor_add_vec(ctx, v340, v342, &VectorSize::Size64x2);
                            let v344 = constructor_add_vec(ctx, v337, v343, &VectorSize::Size64x2);
                            let v345 = constructor_output_reg(ctx, v344);
                            // Rule at src/isa/aarch64/lower.isle line 371.
                            return Some(v345);
                        }
                        let v346 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v347) = v346 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v349 = &constructor_vector_size(ctx, v347);
                            let v350 = constructor_vec_rrr(ctx, &VecALUOp::Urhadd, v34, v35, v349);
                            let v351 = constructor_output_reg(ctx, v350);
                            // Rule at src/isa/aarch64/lower.isle line 380.
                            return Some(v351);
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v571 = &constructor_vector_size(ctx, v570);
                            let v572 = constructor_uqadd(ctx, v34, v35, v571);
                            let v573 = constructor_output_reg(ctx, v572);
                            // Rule at src/isa/aarch64/lower.isle line 726.
                            return Some(v573);
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v571 = &constructor_vector_size(ctx, v570);
                            let v574 = constructor_sqadd(ctx, v34, v35, v571);
                            let v575 = constructor_output_reg(ctx, v574);
                            // Rule at src/isa/aarch64/lower.isle line 731.
                            return Some(v575);
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v571 = &constructor_vector_size(ctx, v570);
                            let v576 = constructor_uqsub(ctx, v34, v35, v571);
                            let v577 = constructor_output_reg(ctx, v576);
                            // Rule at src/isa/aarch64/lower.isle line 736.
                            return Some(v577);
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v571 = &constructor_vector_size(ctx, v570);
                            let v578 = constructor_sqsub(ctx, v34, v35, v571);
                            let v579 = constructor_output_reg(ctx, v578);
                            // Rule at src/isa/aarch64/lower.isle line 741.
                            return Some(v579);
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Binary {
                                    opcode: ref v75,
                                    args: ref v76,
                                } = v40
                                {
                                    match v75 {
                                        &Opcode::Imul => {
                                            let v77 = C::unpack_value_array_2(ctx, v76);
                                            let v105 = C::put_in_reg(ctx, v77.0);
                                            let v106 = C::put_in_reg(ctx, v77.1);
                                            let v107 = C::put_in_reg(ctx, v31.0);
                                            let v108 = constructor_madd(ctx, v28, v105, v106, v107);
                                            let v109 = constructor_output_reg(ctx, v108);
                                            // Rule at src/isa/aarch64/lower.isle line 88.
                                            return Some(v109);
                                        }
                                        &Opcode::Ishl => {
                                            let v77 = C::unpack_value_array_2(ctx, v76);
                                            let v80 = C::def_inst(ctx, v77.1);
                                            if let Some(v81) = v80 {
                                                let v82 = &C::inst_data(ctx, v81);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v83,
                                                    imm: v84,
                                                } = v82
                                                {
                                                    if let &Opcode::Iconst = v83 {
                                                        let v85 = C::lshl_from_imm64(ctx, v28, v84);
                                                        if let Some(v86) = v85 {
                                                            let v34 = C::put_in_reg(ctx, v31.0);
                                                            let v87 = C::put_in_reg(ctx, v77.0);
                                                            let v88 = constructor_add_shift(
                                                                ctx, v28, v34, v87, v86,
                                                            );
                                                            let v89 =
                                                                constructor_output_reg(ctx, v88);
                                                            // Rule at src/isa/aarch64/lower.isle line 77.
                                                            return Some(v89);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                match v50 {
                                    &InstructionData::Binary {
                                        opcode: ref v90,
                                        args: ref v91,
                                    } => {
                                        match v90 {
                                            &Opcode::Imul => {
                                                let v92 = C::unpack_value_array_2(ctx, v91);
                                                let v110 = C::put_in_reg(ctx, v92.0);
                                                let v111 = C::put_in_reg(ctx, v92.1);
                                                let v112 = C::put_in_reg(ctx, v31.1);
                                                let v113 =
                                                    constructor_madd(ctx, v28, v110, v111, v112);
                                                let v114 = constructor_output_reg(ctx, v113);
                                                // Rule at src/isa/aarch64/lower.isle line 91.
                                                return Some(v114);
                                            }
                                            &Opcode::Ishl => {
                                                let v92 = C::unpack_value_array_2(ctx, v91);
                                                let v95 = C::def_inst(ctx, v92.1);
                                                if let Some(v96) = v95 {
                                                    let v97 = &C::inst_data(ctx, v96);
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v98,
                                                        imm: v99,
                                                    } = v97
                                                    {
                                                        if let &Opcode::Iconst = v98 {
                                                            let v100 =
                                                                C::lshl_from_imm64(ctx, v28, v99);
                                                            if let Some(v101) = v100 {
                                                                let v56 = C::put_in_reg(ctx, v31.1);
                                                                let v102 =
                                                                    C::put_in_reg(ctx, v92.0);
                                                                let v103 = constructor_add_shift(
                                                                    ctx, v28, v56, v102, v101,
                                                                );
                                                                let v104 = constructor_output_reg(
                                                                    ctx, v103,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 82.
                                                                return Some(v104);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v51,
                                        imm: v52,
                                    } => {
                                        if let &Opcode::Iconst = v51 {
                                            let v53 = C::u64_from_imm64(ctx, v52);
                                            let v54 = C::imm12_from_u64(ctx, v53);
                                            if let Some(v55) = v54 {
                                                let v56 = C::put_in_reg(ctx, v31.1);
                                                let v57 = constructor_add_imm(ctx, v28, v56, v55);
                                                let v58 = constructor_output_reg(ctx, v57);
                                                // Rule at src/isa/aarch64/lower.isle line 54.
                                                return Some(v58);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v44 = C::imm12_from_u64(ctx, v43);
                                        if let Some(v45) = v44 {
                                            let v34 = C::put_in_reg(ctx, v31.0);
                                            let v46 = constructor_add_imm(ctx, v28, v34, v45);
                                            let v47 = constructor_output_reg(ctx, v46);
                                            // Rule at src/isa/aarch64/lower.isle line 51.
                                            return Some(v47);
                                        }
                                    }
                                }
                            }
                            let v63 = constructor_imm12_from_negated_value(ctx, v31.0);
                            if let Some(v64) = v63 {
                                let v56 = C::put_in_reg(ctx, v31.1);
                                let v65 = constructor_sub_imm(ctx, v28, v56, v64);
                                let v66 = constructor_output_reg(ctx, v65);
                                // Rule at src/isa/aarch64/lower.isle line 63.
                                return Some(v66);
                            }
                            let v59 = constructor_imm12_from_negated_value(ctx, v31.1);
                            if let Some(v60) = v59 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v61 = constructor_sub_imm(ctx, v28, v34, v60);
                                let v62 = constructor_output_reg(ctx, v61);
                                // Rule at src/isa/aarch64/lower.isle line 59.
                                return Some(v62);
                            }
                            let v71 = &C::extended_value_from_value(ctx, v31.0);
                            if let Some(v72) = v71 {
                                let v56 = C::put_in_reg(ctx, v31.1);
                                let v73 = constructor_add_extend(ctx, v28, v56, v72);
                                let v74 = constructor_output_reg(ctx, v73);
                                // Rule at src/isa/aarch64/lower.isle line 72.
                                return Some(v74);
                            }
                            let v67 = &C::extended_value_from_value(ctx, v31.1);
                            if let Some(v68) = v67 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v69 = constructor_add_extend(ctx, v28, v34, v68);
                                let v70 = constructor_output_reg(ctx, v69);
                                // Rule at src/isa/aarch64/lower.isle line 69.
                                return Some(v70);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v36 = constructor_add(ctx, v28, v34, v35);
                            let v37 = constructor_output_reg(ctx, v36);
                            // Rule at src/isa/aarch64/lower.isle line 47.
                            return Some(v37);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v122 = constructor_add_vec(ctx, v34, v35, v121);
                            let v123 = constructor_output_reg(ctx, v122);
                            // Rule at src/isa/aarch64/lower.isle line 100.
                            return Some(v123);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v124 = C::put_in_regs(ctx, v31.0);
                            let v126 = C::value_regs_get(ctx, v124, 0x0);
                            let v128 = C::value_regs_get(ctx, v124, 0x1);
                            let v129 = C::put_in_regs(ctx, v31.1);
                            let v130 = C::value_regs_get(ctx, v129, 0x0);
                            let v131 = C::value_regs_get(ctx, v129, 0x1);
                            let v133 = &constructor_add_with_flags_paired(ctx, I64, v126, v130);
                            let v134 = &constructor_adc_paired(ctx, I64, v128, v131);
                            let v135 = constructor_with_flags(ctx, v133, v134);
                            let v136 = C::output(ctx, v135);
                            // Rule at src/isa/aarch64/lower.isle line 104.
                            return Some(v136);
                        }
                        let v1805 = C::dynamic_lane(ctx, v3);
                        if let Some(v1806) = v1805 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v122 = constructor_add_vec(ctx, v34, v35, v121);
                            let v1809 = C::value_reg(ctx, v122);
                            let v1810 = C::output(ctx, v1809);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 3.
                            return Some(v1810);
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v59 = constructor_imm12_from_negated_value(ctx, v31.1);
                            if let Some(v60) = v59 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v558 = constructor_add_imm(ctx, v28, v34, v60);
                                let v559 = constructor_output_reg(ctx, v558);
                                // Rule at src/isa/aarch64/lower.isle line 700.
                                return Some(v559);
                            }
                            let v67 = &C::extended_value_from_value(ctx, v31.1);
                            if let Some(v68) = v67 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v560 = constructor_sub_extend(ctx, v28, v34, v68);
                                let v561 = constructor_output_reg(ctx, v560);
                                // Rule at src/isa/aarch64/lower.isle line 706.
                                return Some(v561);
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                match v40 {
                                    &InstructionData::Binary {
                                        opcode: ref v75,
                                        args: ref v76,
                                    } => {
                                        if let &Opcode::Imul = v75 {
                                            let v77 = C::unpack_value_array_2(ctx, v76);
                                            let v105 = C::put_in_reg(ctx, v77.0);
                                            let v106 = C::put_in_reg(ctx, v77.1);
                                            let v107 = C::put_in_reg(ctx, v31.0);
                                            let v115 = constructor_msub(ctx, v28, v105, v106, v107);
                                            let v116 = constructor_output_reg(ctx, v115);
                                            // Rule at src/isa/aarch64/lower.isle line 95.
                                            return Some(v116);
                                        }
                                    }
                                    &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } => {
                                        if let &Opcode::Iconst = v41 {
                                            let v43 = C::u64_from_imm64(ctx, v42);
                                            let v44 = C::imm12_from_u64(ctx, v43);
                                            if let Some(v45) = v44 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v556 = constructor_sub_imm(ctx, v28, v34, v45);
                                                let v557 = constructor_output_reg(ctx, v556);
                                                // Rule at src/isa/aarch64/lower.isle line 695.
                                                return Some(v557);
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v124 = C::put_in_regs(ctx, v31.0);
                            let v566 = C::put_in_regs(ctx, v31.1);
                            let v567 = constructor_sub_i128(ctx, v124, v566);
                            let v568 = C::output(ctx, v567);
                            // Rule at src/isa/aarch64/lower.isle line 721.
                            return Some(v568);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v564 = constructor_sub_vec(ctx, v34, v35, v121);
                            let v565 = constructor_output_reg(ctx, v564);
                            // Rule at src/isa/aarch64/lower.isle line 717.
                            return Some(v565);
                        }
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Binary {
                                    opcode: ref v75,
                                    args: ref v76,
                                } = v40
                                {
                                    if let &Opcode::Ishl = v75 {
                                        let v77 = C::unpack_value_array_2(ctx, v76);
                                        let v80 = C::def_inst(ctx, v77.1);
                                        if let Some(v81) = v80 {
                                            let v82 = &C::inst_data(ctx, v81);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v83,
                                                imm: v84,
                                            } = v82
                                            {
                                                if let &Opcode::Iconst = v83 {
                                                    let v85 = C::lshl_from_imm64(ctx, v28, v84);
                                                    if let Some(v86) = v85 {
                                                        let v34 = C::put_in_reg(ctx, v31.0);
                                                        let v87 = C::put_in_reg(ctx, v77.0);
                                                        let v562 = constructor_sub_shift(
                                                            ctx, v28, v34, v87, v86,
                                                        );
                                                        let v563 =
                                                            constructor_output_reg(ctx, v562);
                                                        // Rule at src/isa/aarch64/lower.isle line 711.
                                                        return Some(v563);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v554 = constructor_sub(ctx, v28, v34, v35);
                            let v555 = constructor_output_reg(ctx, v554);
                            // Rule at src/isa/aarch64/lower.isle line 691.
                            return Some(v555);
                        }
                        let v1805 = C::dynamic_lane(ctx, v3);
                        if let Some(v1806) = v1805 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v564 = constructor_sub_vec(ctx, v34, v35, v121);
                            let v1811 = C::value_reg(ctx, v564);
                            let v1812 = C::output(ctx, v1811);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 7.
                            return Some(v1812);
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v126 = C::value_regs_get(ctx, v124, 0x0);
                                let v128 = C::value_regs_get(ctx, v124, 0x1);
                                let v129 = C::put_in_regs(ctx, v31.1);
                                let v130 = C::value_regs_get(ctx, v129, 0x0);
                                let v131 = C::value_regs_get(ctx, v129, 0x1);
                                let v593 = constructor_umulh(ctx, I64, v126, v130);
                                let v594 = constructor_madd(ctx, I64, v126, v131, v593);
                                let v595 = constructor_madd(ctx, I64, v128, v130, v594);
                                let v596 = C::zero_reg(ctx);
                                let v597 = constructor_madd(ctx, I64, v126, v130, v596);
                                let v598 = C::value_regs(ctx, v597, v595);
                                let v599 = C::output(ctx, v598);
                                // Rule at src/isa/aarch64/lower.isle line 765.
                                return Some(v599);
                            }
                            I16X8 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            let v612 = C::value_type(ctx, v299);
                                                            if v612 == I8X16 {
                                                                let v613 = C::value_type(ctx, v301);
                                                                if v613 == I8X16 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v614 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v615 = constructor_smull8(
                                                                        ctx, v302, v614, false,
                                                                    );
                                                                    let v616 =
                                                                        constructor_output_reg(
                                                                            ctx, v615,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 864.
                                                                    return Some(v616);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenHigh = v298 {
                                                            let v612 = C::value_type(ctx, v299);
                                                            if v612 == I8X16 {
                                                                let v613 = C::value_type(ctx, v301);
                                                                if v613 == I8X16 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v614 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v617 = constructor_smull8(
                                                                        ctx, v302, v614, true,
                                                                    );
                                                                    let v618 =
                                                                        constructor_output_reg(
                                                                            ctx, v617,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 870.
                                                                    return Some(v618);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            let v612 = C::value_type(ctx, v299);
                                                            if v612 == I8X16 {
                                                                let v613 = C::value_type(ctx, v301);
                                                                if v613 == I8X16 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v614 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v619 = constructor_umull8(
                                                                        ctx, v302, v614, false,
                                                                    );
                                                                    let v620 =
                                                                        constructor_output_reg(
                                                                            ctx, v619,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 876.
                                                                    return Some(v620);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenHigh = v298 {
                                                            let v612 = C::value_type(ctx, v299);
                                                            if v612 == I8X16 {
                                                                let v613 = C::value_type(ctx, v301);
                                                                if v613 == I8X16 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v614 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v621 = constructor_umull8(
                                                                        ctx, v302, v614, true,
                                                                    );
                                                                    let v622 =
                                                                        constructor_output_reg(
                                                                            ctx, v621,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 882.
                                                                    return Some(v622);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            let v612 = C::value_type(ctx, v299);
                                                            if v612 == I16X8 {
                                                                let v613 = C::value_type(ctx, v301);
                                                                if v613 == I16X8 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v614 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v623 = constructor_smull16(
                                                                        ctx, v302, v614, false,
                                                                    );
                                                                    let v624 =
                                                                        constructor_output_reg(
                                                                            ctx, v623,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 888.
                                                                    return Some(v624);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenHigh = v298 {
                                                            let v612 = C::value_type(ctx, v299);
                                                            if v612 == I16X8 {
                                                                let v613 = C::value_type(ctx, v301);
                                                                if v613 == I16X8 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v614 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v625 = constructor_smull16(
                                                                        ctx, v302, v614, true,
                                                                    );
                                                                    let v626 =
                                                                        constructor_output_reg(
                                                                            ctx, v625,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 894.
                                                                    return Some(v626);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            let v612 = C::value_type(ctx, v299);
                                                            if v612 == I16X8 {
                                                                let v613 = C::value_type(ctx, v301);
                                                                if v613 == I16X8 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v614 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v627 = constructor_umull16(
                                                                        ctx, v302, v614, false,
                                                                    );
                                                                    let v628 =
                                                                        constructor_output_reg(
                                                                            ctx, v627,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 900.
                                                                    return Some(v628);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenHigh = v298 {
                                                            let v612 = C::value_type(ctx, v299);
                                                            if v612 == I16X8 {
                                                                let v613 = C::value_type(ctx, v301);
                                                                if v613 == I16X8 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v614 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v629 = constructor_umull16(
                                                                        ctx, v302, v614, true,
                                                                    );
                                                                    let v630 =
                                                                        constructor_output_reg(
                                                                            ctx, v629,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 906.
                                                                    return Some(v630);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I64X2 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            let v612 = C::value_type(ctx, v299);
                                                            if v612 == I32X4 {
                                                                let v613 = C::value_type(ctx, v301);
                                                                if v613 == I32X4 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v614 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v631 = constructor_smull32(
                                                                        ctx, v302, v614, false,
                                                                    );
                                                                    let v632 =
                                                                        constructor_output_reg(
                                                                            ctx, v631,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 912.
                                                                    return Some(v632);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenHigh = v298 {
                                                            let v612 = C::value_type(ctx, v299);
                                                            if v612 == I32X4 {
                                                                let v613 = C::value_type(ctx, v301);
                                                                if v613 == I32X4 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v614 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v633 = constructor_smull32(
                                                                        ctx, v302, v614, true,
                                                                    );
                                                                    let v634 =
                                                                        constructor_output_reg(
                                                                            ctx, v633,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 918.
                                                                    return Some(v634);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenLow => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            let v612 = C::value_type(ctx, v299);
                                                            if v612 == I32X4 {
                                                                let v613 = C::value_type(ctx, v301);
                                                                if v613 == I32X4 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v614 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v635 = constructor_umull32(
                                                                        ctx, v302, v614, false,
                                                                    );
                                                                    let v636 =
                                                                        constructor_output_reg(
                                                                            ctx, v635,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 924.
                                                                    return Some(v636);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenHigh = v298 {
                                                            let v612 = C::value_type(ctx, v299);
                                                            if v612 == I32X4 {
                                                                let v613 = C::value_type(ctx, v301);
                                                                if v613 == I32X4 {
                                                                    let v302 =
                                                                        C::put_in_reg(ctx, v299);
                                                                    let v614 =
                                                                        C::put_in_reg(ctx, v301);
                                                                    let v637 = constructor_umull32(
                                                                        ctx, v302, v614, true,
                                                                    );
                                                                    let v638 =
                                                                        constructor_output_reg(
                                                                            ctx, v637,
                                                                        );
                                                                    // Rule at src/isa/aarch64/lower.isle line 930.
                                                                    return Some(v638);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v604 = constructor_rev64(ctx, v35, &VectorSize::Size32x4);
                                let v605 = constructor_mul(ctx, v604, v34, &VectorSize::Size32x4);
                                let v606 = constructor_xtn(ctx, v34, &ScalarSize::Size32);
                                let v607 = constructor_addp(ctx, v605, v605, &VectorSize::Size32x4);
                                let v608 = constructor_xtn(ctx, v35, &ScalarSize::Size32);
                                let v609 = constructor_shll32(ctx, v607, false);
                                let v610 = constructor_umlal32(ctx, v609, v608, v606, false);
                                let v611 = constructor_output_reg(ctx, v610);
                                // Rule at src/isa/aarch64/lower.isle line 825.
                                return Some(v611);
                            }
                            _ => {}
                        }
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v600 = C::not_i64x2(ctx, v570);
                            if let Some(v601) = v600 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v571 = &constructor_vector_size(ctx, v570);
                                let v602 = constructor_mul(ctx, v34, v35, v571);
                                let v603 = constructor_output_reg(ctx, v602);
                                // Rule at src/isa/aarch64/lower.isle line 793.
                                return Some(v603);
                            }
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v269 = C::zero_reg(ctx);
                            let v591 = constructor_madd(ctx, v28, v34, v35, v269);
                            let v592 = constructor_output_reg(ctx, v591);
                            // Rule at src/isa/aarch64/lower.isle line 761.
                            return Some(v592);
                        }
                        let v346 = C::lane_fits_in_32(ctx, v3);
                        if let Some(v347) = v346 {
                            let v1813 = C::dynamic_lane(ctx, v347);
                            if let Some(v1814) = v1813 {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v349 = &constructor_vector_size(ctx, v347);
                                let v1818 =
                                    constructor_vec_rrr(ctx, &VecALUOp::Mul, v34, v35, v349);
                                let v1819 = C::value_reg(ctx, v1818);
                                let v1820 = C::output(ctx, v1819);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 11.
                                return Some(v1820);
                            }
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v648 = constructor_umulh(ctx, I64, v34, v35);
                            let v649 = constructor_output_reg(ctx, v648);
                            // Rule at src/isa/aarch64/lower.isle line 949.
                            return Some(v649);
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v650 = constructor_put_in_reg_zext64(ctx, v31.0);
                            let v651 = constructor_put_in_reg_zext64(ctx, v31.1);
                            let v269 = C::zero_reg(ctx);
                            let v652 = constructor_madd(ctx, I64, v650, v651, v269);
                            let v644 = C::ty_bits(ctx, v319);
                            let v645 = C::imm_shift_from_u8(ctx, v644);
                            let v653 = constructor_lsr_imm(ctx, I64, v652, v645);
                            let v654 = C::value_reg(ctx, v653);
                            let v655 = C::output(ctx, v654);
                            // Rule at src/isa/aarch64/lower.isle line 952.
                            return Some(v655);
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v639 = constructor_smulh(ctx, I64, v34, v35);
                            let v640 = constructor_output_reg(ctx, v639);
                            // Rule at src/isa/aarch64/lower.isle line 937.
                            return Some(v640);
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v641 = constructor_put_in_reg_sext64(ctx, v31.0);
                            let v642 = constructor_put_in_reg_sext64(ctx, v31.1);
                            let v269 = C::zero_reg(ctx);
                            let v643 = constructor_madd(ctx, I64, v641, v642, v269);
                            let v644 = C::ty_bits(ctx, v319);
                            let v645 = C::imm_shift_from_u8(ctx, v644);
                            let v646 = constructor_asr_imm(ctx, I64, v643, v645);
                            let v647 = constructor_output_reg(ctx, v646);
                            // Rule at src/isa/aarch64/lower.isle line 940.
                            return Some(v647);
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v353 =
                                constructor_vec_rrr(ctx, &VecALUOp::Sqrdmulh, v34, v35, v121);
                            let v354 = constructor_output_reg(ctx, v353);
                            // Rule at src/isa/aarch64/lower.isle line 385.
                            return Some(v354);
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v650 = constructor_put_in_reg_zext64(ctx, v31.0);
                            let v656 = constructor_put_nonzero_in_reg_zext64(ctx, v31.1);
                            let v657 = constructor_a64_udiv(ctx, I64, v650, v656);
                            let v658 = constructor_output_reg(ctx, v657);
                            // Rule at src/isa/aarch64/lower.isle line 968.
                            return Some(v658);
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v663 = C::safe_divisor_from_imm64(ctx, v28, v42);
                                        if let Some(v664) = v663 {
                                            let v641 = constructor_put_in_reg_sext64(ctx, v31.0);
                                            let v666 =
                                                constructor_imm(ctx, v28, &ImmExtend::Sign, v664);
                                            let v667 = constructor_a64_sdiv(ctx, I64, v641, v666);
                                            let v668 = constructor_output_reg(ctx, v667);
                                            // Rule at src/isa/aarch64/lower.isle line 1010.
                                            return Some(v668);
                                        }
                                    }
                                }
                            }
                            let v641 = constructor_put_in_reg_sext64(ctx, v31.0);
                            let v659 = constructor_put_nonzero_in_reg_sext64(ctx, v31.1);
                            let v660 = constructor_trap_if_div_overflow(ctx, v28, v641, v659);
                            let v661 = constructor_a64_sdiv(ctx, I64, v660, v659);
                            let v662 = constructor_output_reg(ctx, v661);
                            // Rule at src/isa/aarch64/lower.isle line 1001.
                            return Some(v662);
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v650 = constructor_put_in_reg_zext64(ctx, v31.0);
                            let v656 = constructor_put_nonzero_in_reg_zext64(ctx, v31.1);
                            let v657 = constructor_a64_udiv(ctx, I64, v650, v656);
                            let v669 = constructor_msub(ctx, I64, v657, v656, v650);
                            let v670 = constructor_output_reg(ctx, v669);
                            // Rule at src/isa/aarch64/lower.isle line 1039.
                            return Some(v670);
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v641 = constructor_put_in_reg_sext64(ctx, v31.0);
                            let v659 = constructor_put_nonzero_in_reg_sext64(ctx, v31.1);
                            let v671 = constructor_a64_sdiv(ctx, I64, v641, v659);
                            let v672 = constructor_msub(ctx, I64, v671, v659, v641);
                            let v673 = constructor_output_reg(ctx, v672);
                            // Rule at src/isa/aarch64/lower.isle line 1046.
                            return Some(v673);
                        }
                    }
                }
                &Opcode::UaddOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1724 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1725) = v1724 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1728 = constructor_overflow_op_normal(
                                ctx,
                                v1725,
                                v31.0,
                                v31.1,
                                &ALUOp::AddS,
                                &Cond::Hs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2687.
                            return Some(v1728);
                        }
                        let v903 = C::fits_in_16(ctx, v3);
                        if let Some(v904) = v903 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1723 = constructor_overflow_op_small(
                                ctx,
                                v904,
                                v31.0,
                                v31.1,
                                &ArgumentExtension::Uext,
                                &ALUOp::Add,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2683.
                            return Some(v1723);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1730 = constructor_overflow_op_128(
                                ctx,
                                v31.0,
                                v31.1,
                                &ALUOp::AddS,
                                &ALUOp::AdcS,
                                &Cond::Hs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2691.
                            return Some(v1730);
                        }
                    }
                }
                &Opcode::SaddOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1724 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1725) = v1724 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1734 = constructor_overflow_op_normal(
                                ctx,
                                v1725,
                                v31.0,
                                v31.1,
                                &ALUOp::AddS,
                                &Cond::Vs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2705.
                            return Some(v1734);
                        }
                        let v903 = C::fits_in_16(ctx, v3);
                        if let Some(v904) = v903 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1732 = constructor_overflow_op_small(
                                ctx,
                                v904,
                                v31.0,
                                v31.1,
                                &ArgumentExtension::Sext,
                                &ALUOp::Add,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2700.
                            return Some(v1732);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1735 = constructor_overflow_op_128(
                                ctx,
                                v31.0,
                                v31.1,
                                &ALUOp::AddS,
                                &ALUOp::AdcS,
                                &Cond::Vs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2711.
                            return Some(v1735);
                        }
                    }
                }
                &Opcode::UsubOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1724 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1725) = v1724 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1739 = constructor_overflow_op_normal(
                                ctx,
                                v1725,
                                v31.0,
                                v31.1,
                                &ALUOp::SubS,
                                &Cond::Lo,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2725.
                            return Some(v1739);
                        }
                        let v903 = C::fits_in_16(ctx, v3);
                        if let Some(v904) = v903 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1737 = constructor_overflow_op_small(
                                ctx,
                                v904,
                                v31.0,
                                v31.1,
                                &ArgumentExtension::Uext,
                                &ALUOp::Sub,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2720.
                            return Some(v1737);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1741 = constructor_overflow_op_128(
                                ctx,
                                v31.0,
                                v31.1,
                                &ALUOp::SubS,
                                &ALUOp::SbcS,
                                &Cond::Lo,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2731.
                            return Some(v1741);
                        }
                    }
                }
                &Opcode::SsubOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1724 = C::ty_32_or_64(ctx, v3);
                        if let Some(v1725) = v1724 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1743 = constructor_overflow_op_normal(
                                ctx,
                                v1725,
                                v31.0,
                                v31.1,
                                &ALUOp::SubS,
                                &Cond::Vs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2745.
                            return Some(v1743);
                        }
                        let v903 = C::fits_in_16(ctx, v3);
                        if let Some(v904) = v903 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1742 = constructor_overflow_op_small(
                                ctx,
                                v904,
                                v31.0,
                                v31.1,
                                &ArgumentExtension::Sext,
                                &ALUOp::Sub,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2740.
                            return Some(v1742);
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1744 = constructor_overflow_op_128(
                                ctx,
                                v31.0,
                                v31.1,
                                &ALUOp::SubS,
                                &ALUOp::SbcS,
                                &Cond::Vs,
                            );
                            // Rule at src/isa/aarch64/lower.isle line 2751.
                            return Some(v1744);
                        }
                    }
                }
                &Opcode::UmulOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v269 = C::zero_reg(ctx);
                                let v1755 = constructor_umaddl(ctx, v34, v35, v269);
                                let v1757 = &constructor_cmp_extend(
                                    ctx,
                                    &OperandSize::Size64,
                                    v1755,
                                    v1755,
                                    &ExtendOp::UXTW,
                                );
                                let v1758 = &constructor_cset(ctx, &Cond::Ne);
                                let v1759 = constructor_with_flags_reg(ctx, v1757, v1758);
                                let v1760 = C::value_reg(ctx, v1755);
                                let v1761 = C::value_reg(ctx, v1759);
                                let v1762 = C::output_pair(ctx, v1760, v1761);
                                // Rule at src/isa/aarch64/lower.isle line 2777.
                                return Some(v1762);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v269 = C::zero_reg(ctx);
                                let v1763 = constructor_madd(ctx, I64, v34, v35, v269);
                                let v916 = C::put_in_reg(ctx, v31.0);
                                let v1764 = C::put_in_reg(ctx, v31.1);
                                let v1765 = constructor_umulh(ctx, I64, v916, v1764);
                                let v1766 = C::u8_into_imm12(ctx, 0x0);
                                let v1767 = &constructor_cmp64_imm(ctx, v1765, v1766);
                                let v1768 = &constructor_cset(ctx, &Cond::Ne);
                                let v1769 = constructor_with_flags_reg(ctx, v1767, v1768);
                                let v1770 = C::value_reg(ctx, v1763);
                                let v1771 = C::value_reg(ctx, v1769);
                                let v1772 = C::output_pair(ctx, v1770, v1771);
                                // Rule at src/isa/aarch64/lower.isle line 2791.
                                return Some(v1772);
                            }
                            _ => {}
                        }
                        let v903 = C::fits_in_16(ctx, v3);
                        if let Some(v904) = v903 {
                            let v1745 =
                                &constructor_lower_extend_op(ctx, v904, &ArgumentExtension::Uext);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1746 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v1747 = constructor_put_in_reg_zext32(ctx, v31.1);
                            let v791 = C::zero_reg(ctx);
                            let v1748 = constructor_madd(ctx, v904, v1746, v1747, v791);
                            let v1749 = &constructor_cmp_extend(
                                ctx,
                                &OperandSize::Size32,
                                v1748,
                                v1748,
                                v1745,
                            );
                            let v1750 = &constructor_cset(ctx, &Cond::Ne);
                            let v1751 = constructor_with_flags_reg(ctx, v1749, v1750);
                            let v1752 = C::value_reg(ctx, v1748);
                            let v1753 = C::value_reg(ctx, v1751);
                            let v1754 = C::output_pair(ctx, v1752, v1753);
                            // Rule at src/isa/aarch64/lower.isle line 2761.
                            return Some(v1754);
                        }
                    }
                }
                &Opcode::SmulOverflow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v269 = C::zero_reg(ctx);
                                let v1782 = constructor_smaddl(ctx, v34, v35, v269);
                                let v1784 = &constructor_cmp_extend(
                                    ctx,
                                    &OperandSize::Size64,
                                    v1782,
                                    v1782,
                                    &ExtendOp::SXTW,
                                );
                                let v1758 = &constructor_cset(ctx, &Cond::Ne);
                                let v1785 = constructor_with_flags_reg(ctx, v1784, v1758);
                                let v1786 = C::value_reg(ctx, v1782);
                                let v1787 = C::value_reg(ctx, v1785);
                                let v1788 = C::output_pair(ctx, v1786, v1787);
                                // Rule at src/isa/aarch64/lower.isle line 2825.
                                return Some(v1788);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v35 = C::put_in_reg(ctx, v31.1);
                                let v269 = C::zero_reg(ctx);
                                let v1763 = constructor_madd(ctx, I64, v34, v35, v269);
                                let v916 = C::put_in_reg(ctx, v31.0);
                                let v1764 = C::put_in_reg(ctx, v31.1);
                                let v1789 = constructor_smulh(ctx, I64, v916, v1764);
                                let v1791 = &constructor_cmp_rr_shift_asr(
                                    ctx,
                                    &OperandSize::Size64,
                                    v1789,
                                    v1763,
                                    0x3F,
                                );
                                let v1792 = &constructor_cset(ctx, &Cond::Ne);
                                let v1793 = constructor_with_flags_reg(ctx, v1791, v1792);
                                let v1794 = C::value_reg(ctx, v1763);
                                let v1795 = C::value_reg(ctx, v1793);
                                let v1796 = C::output_pair(ctx, v1794, v1795);
                                // Rule at src/isa/aarch64/lower.isle line 2839.
                                return Some(v1796);
                            }
                            _ => {}
                        }
                        let v903 = C::fits_in_16(ctx, v3);
                        if let Some(v904) = v903 {
                            let v1773 =
                                &constructor_lower_extend_op(ctx, v904, &ArgumentExtension::Sext);
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1774 = constructor_put_in_reg_sext32(ctx, v31.0);
                            let v1775 = constructor_put_in_reg_sext32(ctx, v31.1);
                            let v791 = C::zero_reg(ctx);
                            let v1776 = constructor_madd(ctx, v904, v1774, v1775, v791);
                            let v1777 = &constructor_cmp_extend(
                                ctx,
                                &OperandSize::Size32,
                                v1776,
                                v1776,
                                v1773,
                            );
                            let v1750 = &constructor_cset(ctx, &Cond::Ne);
                            let v1778 = constructor_with_flags_reg(ctx, v1777, v1750);
                            let v1779 = C::value_reg(ctx, v1776);
                            let v1780 = C::value_reg(ctx, v1778);
                            let v1781 = C::output_pair(ctx, v1779, v1780);
                            // Rule at src/isa/aarch64/lower.isle line 2809.
                            return Some(v1781);
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v56 = C::put_in_reg(ctx, v31.1);
                                        let v822 = C::put_in_reg(ctx, v299);
                                        let v571 = &constructor_vector_size(ctx, v570);
                                        let v823 = constructor_bic_vec(ctx, v56, v822, v571);
                                        let v824 = constructor_output_reg(ctx, v823);
                                        // Rule at src/isa/aarch64/lower.isle line 1249.
                                        return Some(v824);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v34 = C::put_in_reg(ctx, v31.0);
                                        let v614 = C::put_in_reg(ctx, v301);
                                        let v571 = &constructor_vector_size(ctx, v570);
                                        let v820 = constructor_bic_vec(ctx, v34, v614, v571);
                                        let v821 = constructor_output_reg(ctx, v820);
                                        // Rule at src/isa/aarch64/lower.isle line 1247.
                                        return Some(v821);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v818 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::AndNot,
                                            I64,
                                            v31.1,
                                            v299,
                                        );
                                        let v819 = C::output(ctx, v818);
                                        // Rule at src/isa/aarch64/lower.isle line 1245.
                                        return Some(v819);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v816 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::AndNot,
                                            I64,
                                            v31.0,
                                            v301,
                                        );
                                        let v817 = C::output(ctx, v816);
                                        // Rule at src/isa/aarch64/lower.isle line 1244.
                                        return Some(v817);
                                    }
                                }
                            }
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v814 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::AndNot,
                                            v28,
                                            v31.1,
                                            v299,
                                        );
                                        let v815 = constructor_output_reg(ctx, v814);
                                        // Rule at src/isa/aarch64/lower.isle line 1241.
                                        return Some(v815);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v812 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::AndNot,
                                            v28,
                                            v31.0,
                                            v301,
                                        );
                                        let v813 = constructor_output_reg(ctx, v812);
                                        // Rule at src/isa/aarch64/lower.isle line 1239.
                                        return Some(v813);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v807 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::And, I64, v31.0, v31.1);
                            let v808 = C::output(ctx, v807);
                            // Rule at src/isa/aarch64/lower.isle line 1230.
                            return Some(v808);
                        }
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v805 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::And,
                                v28,
                                v31.0,
                                v31.1,
                            );
                            let v806 = constructor_output_reg(ctx, v805);
                            // Rule at src/isa/aarch64/lower.isle line 1227.
                            return Some(v806);
                        }
                        if let Some(v570) = v569 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v571 = &constructor_vector_size(ctx, v570);
                            let v809 = constructor_and_vec(ctx, v34, v35, v571);
                            let v810 = constructor_output_reg(ctx, v809);
                            // Rule at src/isa/aarch64/lower.isle line 1232.
                            return Some(v810);
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v839 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            I64,
                                            v31.1,
                                            v299,
                                        );
                                        let v840 = C::output(ctx, v839);
                                        // Rule at src/isa/aarch64/lower.isle line 1272.
                                        return Some(v840);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v837 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            I64,
                                            v31.0,
                                            v301,
                                        );
                                        let v838 = C::output(ctx, v837);
                                        // Rule at src/isa/aarch64/lower.isle line 1271.
                                        return Some(v838);
                                    }
                                }
                            }
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v835 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            v28,
                                            v31.1,
                                            v299,
                                        );
                                        let v836 = constructor_output_reg(ctx, v835);
                                        // Rule at src/isa/aarch64/lower.isle line 1268.
                                        return Some(v836);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v833 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::OrrNot,
                                            v28,
                                            v31.0,
                                            v301,
                                        );
                                        let v834 = constructor_output_reg(ctx, v833);
                                        // Rule at src/isa/aarch64/lower.isle line 1266.
                                        return Some(v834);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v828 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::Orr, I64, v31.0, v31.1);
                            let v829 = C::output(ctx, v828);
                            // Rule at src/isa/aarch64/lower.isle line 1257.
                            return Some(v829);
                        }
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v826 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::Orr,
                                v28,
                                v31.0,
                                v31.1,
                            );
                            let v827 = constructor_output_reg(ctx, v826);
                            // Rule at src/isa/aarch64/lower.isle line 1254.
                            return Some(v827);
                        }
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v571 = &constructor_vector_size(ctx, v570);
                            let v830 = constructor_orr_vec(ctx, v34, v35, v571);
                            let v831 = constructor_output_reg(ctx, v830);
                            // Rule at src/isa/aarch64/lower.isle line 1259.
                            return Some(v831);
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v854 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::EorNot,
                                            I64,
                                            v31.1,
                                            v299,
                                        );
                                        let v855 = C::output(ctx, v854);
                                        // Rule at src/isa/aarch64/lower.isle line 1294.
                                        return Some(v855);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v852 = constructor_i128_alu_bitop(
                                            ctx,
                                            &ALUOp::EorNot,
                                            I64,
                                            v31.0,
                                            v301,
                                        );
                                        let v853 = C::output(ctx, v852);
                                        // Rule at src/isa/aarch64/lower.isle line 1293.
                                        return Some(v853);
                                    }
                                }
                            }
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v48 = C::def_inst(ctx, v31.0);
                            if let Some(v49) = v48 {
                                let v50 = &C::inst_data(ctx, v49);
                                if let &InstructionData::Unary {
                                    opcode: ref v298,
                                    arg: v299,
                                } = v50
                                {
                                    if let &Opcode::Bnot = v298 {
                                        let v850 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::EorNot,
                                            v28,
                                            v31.1,
                                            v299,
                                        );
                                        let v851 = constructor_output_reg(ctx, v850);
                                        // Rule at src/isa/aarch64/lower.isle line 1290.
                                        return Some(v851);
                                    }
                                }
                            }
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::Unary {
                                    opcode: ref v300,
                                    arg: v301,
                                } = v40
                                {
                                    if let &Opcode::Bnot = v300 {
                                        let v848 = constructor_alu_rs_imm_logic(
                                            ctx,
                                            &ALUOp::EorNot,
                                            v28,
                                            v31.0,
                                            v301,
                                        );
                                        let v849 = constructor_output_reg(ctx, v848);
                                        // Rule at src/isa/aarch64/lower.isle line 1288.
                                        return Some(v849);
                                    }
                                }
                            }
                        }
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v844 =
                                constructor_i128_alu_bitop(ctx, &ALUOp::Eor, I64, v31.0, v31.1);
                            let v845 = C::output(ctx, v844);
                            // Rule at src/isa/aarch64/lower.isle line 1279.
                            return Some(v845);
                        }
                        if let Some(v28) = v27 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v842 = constructor_alu_rs_imm_logic_commutative(
                                ctx,
                                &ALUOp::Eor,
                                v28,
                                v31.0,
                                v31.1,
                            );
                            let v843 = constructor_output_reg(ctx, v842);
                            // Rule at src/isa/aarch64/lower.isle line 1276.
                            return Some(v843);
                        }
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v571 = &constructor_vector_size(ctx, v570);
                            let v846 = constructor_eor_vec(ctx, v34, v35, v571);
                            let v847 = constructor_output_reg(ctx, v846);
                            // Rule at src/isa/aarch64/lower.isle line 1281.
                            return Some(v847);
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v922 = C::imm_shift_from_imm64(ctx, I32, v42);
                                            if let Some(v923) = v922 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v924 = C::negate_imm_shift(ctx, I32, v923);
                                                let v925 =
                                                    constructor_a64_rotr_imm(ctx, I32, v34, v924);
                                                let v926 = constructor_output_reg(ctx, v925);
                                                // Rule at src/isa/aarch64/lower.isle line 1538.
                                                return Some(v926);
                                            }
                                        }
                                    }
                                }
                                let v905 = C::put_in_regs(ctx, v31.1);
                                let v906 = C::value_regs_get(ctx, v905, 0x0);
                                let v269 = C::zero_reg(ctx);
                                let v907 = constructor_sub(ctx, I32, v269, v906);
                                let v916 = C::put_in_reg(ctx, v31.0);
                                let v917 = constructor_a64_rotr(ctx, I32, v916, v907);
                                let v918 = constructor_output_reg(ctx, v917);
                                // Rule at src/isa/aarch64/lower.isle line 1526.
                                return Some(v918);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v927 = C::imm_shift_from_imm64(ctx, I64, v42);
                                            if let Some(v928) = v927 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v929 = C::negate_imm_shift(ctx, I64, v928);
                                                let v930 =
                                                    constructor_a64_rotr_imm(ctx, I64, v34, v929);
                                                let v931 = constructor_output_reg(ctx, v930);
                                                // Rule at src/isa/aarch64/lower.isle line 1543.
                                                return Some(v931);
                                            }
                                        }
                                    }
                                }
                                let v905 = C::put_in_regs(ctx, v31.1);
                                let v906 = C::value_regs_get(ctx, v905, 0x0);
                                let v269 = C::zero_reg(ctx);
                                let v919 = constructor_sub(ctx, I64, v269, v906);
                                let v916 = C::put_in_reg(ctx, v31.0);
                                let v920 = constructor_a64_rotr(ctx, I64, v916, v919);
                                let v921 = constructor_output_reg(ctx, v920);
                                // Rule at src/isa/aarch64/lower.isle line 1532.
                                return Some(v921);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v566 = C::put_in_regs(ctx, v31.1);
                                let v861 = C::value_regs_get(ctx, v566, 0x0);
                                let v933 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80);
                                let v934 = constructor_sub(ctx, I64, v933, v861);
                                let v935 = constructor_lower_shl128(ctx, v124, v861);
                                let v936 = constructor_lower_ushr128(ctx, v124, v934);
                                let v937 = C::value_regs_get(ctx, v935, 0x0);
                                let v938 = C::value_regs_get(ctx, v936, 0x0);
                                let v939 = constructor_orr(ctx, I64, v937, v938);
                                let v940 = C::value_regs_get(ctx, v935, 0x1);
                                let v941 = C::value_regs_get(ctx, v936, 0x1);
                                let v942 = constructor_orr(ctx, I64, v940, v941);
                                let v943 = C::value_regs(ctx, v939, v942);
                                let v944 = C::output(ctx, v943);
                                // Rule at src/isa/aarch64/lower.isle line 1553.
                                return Some(v944);
                            }
                            _ => {}
                        }
                        let v903 = C::fits_in_16(ctx, v3);
                        if let Some(v904) = v903 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v911 = C::imm_shift_from_imm64(ctx, v904, v42);
                                        if let Some(v912) = v911 {
                                            let v875 = constructor_put_in_reg_zext32(ctx, v31.0);
                                            let v913 = C::negate_imm_shift(ctx, v904, v912);
                                            let v914 =
                                                constructor_small_rotr_imm(ctx, v904, v875, v913);
                                            let v915 = constructor_output_reg(ctx, v914);
                                            // Rule at src/isa/aarch64/lower.isle line 1513.
                                            return Some(v915);
                                        }
                                    }
                                }
                            }
                            let v905 = C::put_in_regs(ctx, v31.1);
                            let v906 = C::value_regs_get(ctx, v905, 0x0);
                            let v269 = C::zero_reg(ctx);
                            let v907 = constructor_sub(ctx, I32, v269, v906);
                            let v908 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v909 = constructor_small_rotr(ctx, v904, v908, v907);
                            let v910 = constructor_output_reg(ctx, v909);
                            // Rule at src/isa/aarch64/lower.isle line 1507.
                            return Some(v910);
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v922 = C::imm_shift_from_imm64(ctx, I32, v42);
                                            if let Some(v923) = v922 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v953 =
                                                    constructor_a64_rotr_imm(ctx, I32, v34, v923);
                                                let v954 = constructor_output_reg(ctx, v953);
                                                // Rule at src/isa/aarch64/lower.isle line 1583.
                                                return Some(v954);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v566 = C::put_in_regs(ctx, v31.1);
                                let v861 = C::value_regs_get(ctx, v566, 0x0);
                                let v947 = constructor_a64_rotr(ctx, I32, v34, v861);
                                let v948 = constructor_output_reg(ctx, v947);
                                // Rule at src/isa/aarch64/lower.isle line 1570.
                                return Some(v948);
                            }
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::UnaryImm {
                                        opcode: ref v41,
                                        imm: v42,
                                    } = v40
                                    {
                                        if let &Opcode::Iconst = v41 {
                                            let v927 = C::imm_shift_from_imm64(ctx, I64, v42);
                                            if let Some(v928) = v927 {
                                                let v34 = C::put_in_reg(ctx, v31.0);
                                                let v955 =
                                                    constructor_a64_rotr_imm(ctx, I64, v34, v928);
                                                let v956 = constructor_output_reg(ctx, v955);
                                                // Rule at src/isa/aarch64/lower.isle line 1588.
                                                return Some(v956);
                                            }
                                        }
                                    }
                                }
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v566 = C::put_in_regs(ctx, v31.1);
                                let v861 = C::value_regs_get(ctx, v566, 0x0);
                                let v949 = constructor_a64_rotr(ctx, I64, v34, v861);
                                let v950 = constructor_output_reg(ctx, v949);
                                // Rule at src/isa/aarch64/lower.isle line 1574.
                                return Some(v950);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v566 = C::put_in_regs(ctx, v31.1);
                                let v861 = C::value_regs_get(ctx, v566, 0x0);
                                let v933 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x80);
                                let v934 = constructor_sub(ctx, I64, v933, v861);
                                let v957 = constructor_lower_ushr128(ctx, v124, v861);
                                let v958 = constructor_lower_shl128(ctx, v124, v934);
                                let v959 = C::value_regs_get(ctx, v957, 0x1);
                                let v960 = C::value_regs_get(ctx, v958, 0x1);
                                let v961 = constructor_orr(ctx, I64, v959, v960);
                                let v962 = C::value_regs_get(ctx, v957, 0x0);
                                let v963 = C::value_regs_get(ctx, v958, 0x0);
                                let v964 = constructor_orr(ctx, I64, v962, v963);
                                let v965 = C::value_regs(ctx, v964, v961);
                                let v966 = C::output(ctx, v965);
                                // Rule at src/isa/aarch64/lower.isle line 1637.
                                return Some(v966);
                            }
                            _ => {}
                        }
                        let v903 = C::fits_in_16(ctx, v3);
                        if let Some(v904) = v903 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v911 = C::imm_shift_from_imm64(ctx, v904, v42);
                                        if let Some(v912) = v911 {
                                            let v875 = constructor_put_in_reg_zext32(ctx, v31.0);
                                            let v951 =
                                                constructor_small_rotr_imm(ctx, v904, v875, v912);
                                            let v952 = constructor_output_reg(ctx, v951);
                                            // Rule at src/isa/aarch64/lower.isle line 1578.
                                            return Some(v952);
                                        }
                                    }
                                }
                            }
                            let v875 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v566 = C::put_in_regs(ctx, v31.1);
                            let v861 = C::value_regs_get(ctx, v566, 0x0);
                            let v945 = constructor_small_rotr(ctx, v904, v875, v861);
                            let v946 = constructor_output_reg(ctx, v945);
                            // Rule at src/isa/aarch64/lower.isle line 1566.
                            return Some(v946);
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v859 = constructor_do_shift(ctx, &ALUOp::Lsl, I64, v34, v31.1);
                                let v860 = constructor_output_reg(ctx, v859);
                                // Rule at src/isa/aarch64/lower.isle line 1303.
                                return Some(v860);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v566 = C::put_in_regs(ctx, v31.1);
                                let v861 = C::value_regs_get(ctx, v566, 0x0);
                                let v862 = constructor_lower_shl128(ctx, v124, v861);
                                let v863 = C::output(ctx, v862);
                                // Rule at src/isa/aarch64/lower.isle line 1307.
                                return Some(v863);
                            }
                            _ => {}
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v857 = constructor_do_shift(ctx, &ALUOp::Lsl, v319, v34, v31.1);
                            let v858 = constructor_output_reg(ctx, v857);
                            // Rule at src/isa/aarch64/lower.isle line 1299.
                            return Some(v858);
                        }
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v34 = C::put_in_reg(ctx, v31.0);
                                        let v588 = &constructor_vector_size(ctx, v570);
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v871 = C::shift_masked_imm(ctx, v570, v43);
                                        let v872 = constructor_ushl_vec_imm(ctx, v34, v871, v588);
                                        let v873 = constructor_output_reg(ctx, v872);
                                        // Rule at src/isa/aarch64/lower.isle line 1342.
                                        return Some(v873);
                                    }
                                }
                            }
                            let v864 = &constructor_vector_size(ctx, v570);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v866 = C::shift_mask(ctx, v570);
                            let v867 = constructor_and_imm(ctx, I32, v35, v866);
                            let v868 = constructor_vec_dup(ctx, v867, v864);
                            let v338 = C::put_in_reg(ctx, v31.0);
                            let v869 = constructor_sshl(ctx, v338, v868, v864);
                            let v870 = constructor_output_reg(ctx, v869);
                            // Rule at src/isa/aarch64/lower.isle line 1337.
                            return Some(v870);
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v650 = constructor_put_in_reg_zext64(ctx, v31.0);
                                let v878 = constructor_do_shift(ctx, &ALUOp::Lsr, I64, v650, v31.1);
                                let v879 = constructor_output_reg(ctx, v878);
                                // Rule at src/isa/aarch64/lower.isle line 1394.
                                return Some(v879);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v566 = C::put_in_regs(ctx, v31.1);
                                let v861 = C::value_regs_get(ctx, v566, 0x0);
                                let v880 = constructor_lower_ushr128(ctx, v124, v861);
                                let v881 = C::output(ctx, v880);
                                // Rule at src/isa/aarch64/lower.isle line 1398.
                                return Some(v881);
                            }
                            _ => {}
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v875 = constructor_put_in_reg_zext32(ctx, v31.0);
                            let v876 = constructor_do_shift(ctx, &ALUOp::Lsr, v319, v875, v31.1);
                            let v877 = constructor_output_reg(ctx, v876);
                            // Rule at src/isa/aarch64/lower.isle line 1390.
                            return Some(v877);
                        }
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v871 = C::shift_masked_imm(ctx, v570, v43);
                                        if v871 == 0x0 {
                                            let v890 = constructor_output_value(ctx, v31.0);
                                            // Rule at src/isa/aarch64/lower.isle line 1413.
                                            return Some(v890);
                                        }
                                        let v34 = C::put_in_reg(ctx, v31.0);
                                        let v588 = &constructor_vector_size(ctx, v570);
                                        let v888 = constructor_ushr_vec_imm(ctx, v34, v871, v588);
                                        let v889 = constructor_output_reg(ctx, v888);
                                        // Rule at src/isa/aarch64/lower.isle line 1411.
                                        return Some(v889);
                                    }
                                }
                            }
                            let v864 = &constructor_vector_size(ctx, v570);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v866 = C::shift_mask(ctx, v570);
                            let v867 = constructor_and_imm(ctx, I32, v35, v866);
                            let v882 = C::zero_reg(ctx);
                            let v883 = constructor_sub(ctx, I64, v882, v867);
                            let v884 = constructor_vec_dup(ctx, v883, v864);
                            let v885 = C::put_in_reg(ctx, v31.0);
                            let v886 = constructor_ushl(ctx, v885, v884, v864);
                            let v887 = constructor_output_reg(ctx, v886);
                            // Rule at src/isa/aarch64/lower.isle line 1406.
                            return Some(v887);
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I64 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v641 = constructor_put_in_reg_sext64(ctx, v31.0);
                                let v895 = constructor_do_shift(ctx, &ALUOp::Asr, I64, v641, v31.1);
                                let v896 = constructor_output_reg(ctx, v895);
                                // Rule at src/isa/aarch64/lower.isle line 1451.
                                return Some(v896);
                            }
                            I128 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v124 = C::put_in_regs(ctx, v31.0);
                                let v566 = C::put_in_regs(ctx, v31.1);
                                let v861 = C::value_regs_get(ctx, v566, 0x0);
                                let v897 = constructor_lower_sshr128(ctx, v124, v861);
                                let v898 = C::output(ctx, v897);
                                // Rule at src/isa/aarch64/lower.isle line 1455.
                                return Some(v898);
                            }
                            _ => {}
                        }
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v38 = C::def_inst(ctx, v31.1);
                            if let Some(v39) = v38 {
                                let v40 = &C::inst_data(ctx, v39);
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v41,
                                    imm: v42,
                                } = v40
                                {
                                    if let &Opcode::Iconst = v41 {
                                        let v43 = C::u64_from_imm64(ctx, v42);
                                        let v871 = C::shift_masked_imm(ctx, v570, v43);
                                        if v871 == 0x0 {
                                            let v890 = constructor_output_value(ctx, v31.0);
                                            // Rule at src/isa/aarch64/lower.isle line 1471.
                                            return Some(v890);
                                        }
                                        let v34 = C::put_in_reg(ctx, v31.0);
                                        let v588 = &constructor_vector_size(ctx, v570);
                                        let v901 = constructor_sshr_vec_imm(ctx, v34, v871, v588);
                                        let v902 = constructor_output_reg(ctx, v901);
                                        // Rule at src/isa/aarch64/lower.isle line 1469.
                                        return Some(v902);
                                    }
                                }
                            }
                            let v864 = &constructor_vector_size(ctx, v570);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v866 = C::shift_mask(ctx, v570);
                            let v867 = constructor_and_imm(ctx, I32, v35, v866);
                            let v882 = C::zero_reg(ctx);
                            let v883 = constructor_sub(ctx, I64, v882, v867);
                            let v884 = constructor_vec_dup(ctx, v883, v864);
                            let v885 = C::put_in_reg(ctx, v31.0);
                            let v899 = constructor_sshl(ctx, v885, v884, v864);
                            let v900 = constructor_output_reg(ctx, v899);
                            // Rule at src/isa/aarch64/lower.isle line 1464.
                            return Some(v900);
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v892 = constructor_put_in_reg_sext32(ctx, v31.0);
                            let v893 = constructor_do_shift(ctx, &ALUOp::Asr, v319, v892, v31.1);
                            let v894 = constructor_output_reg(ctx, v893);
                            // Rule at src/isa/aarch64/lower.isle line 1447.
                            return Some(v894);
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v358 = C::ty_scalar_float(ctx, v3);
                        if let Some(v359) = v358 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v361 = &constructor_scalar_size(ctx, v359);
                            let v362 = constructor_fpu_rrr(ctx, &FPUOp2::Add, v34, v35, v361);
                            let v363 = constructor_output_reg(ctx, v362);
                            // Rule at src/isa/aarch64/lower.isle line 393.
                            return Some(v363);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v356 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v34, v35, v121);
                            let v357 = constructor_output_reg(ctx, v356);
                            // Rule at src/isa/aarch64/lower.isle line 390.
                            return Some(v357);
                        }
                        let v1805 = C::dynamic_lane(ctx, v3);
                        if let Some(v1806) = v1805 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v356 = constructor_vec_rrr(ctx, &VecALUOp::Fadd, v34, v35, v121);
                            let v1821 = C::value_reg(ctx, v356);
                            let v1822 = C::output(ctx, v1821);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 15.
                            return Some(v1822);
                        }
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v358 = C::ty_scalar_float(ctx, v3);
                        if let Some(v359) = v358 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v361 = &constructor_scalar_size(ctx, v359);
                            let v368 = constructor_fpu_rrr(ctx, &FPUOp2::Sub, v34, v35, v361);
                            let v369 = constructor_output_reg(ctx, v368);
                            // Rule at src/isa/aarch64/lower.isle line 401.
                            return Some(v369);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v365 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v34, v35, v121);
                            let v366 = constructor_output_reg(ctx, v365);
                            // Rule at src/isa/aarch64/lower.isle line 398.
                            return Some(v366);
                        }
                        let v1805 = C::dynamic_lane(ctx, v3);
                        if let Some(v1806) = v1805 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v365 = constructor_vec_rrr(ctx, &VecALUOp::Fsub, v34, v35, v121);
                            let v1823 = C::value_reg(ctx, v365);
                            let v1824 = C::output(ctx, v1823);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 19.
                            return Some(v1824);
                        }
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v358 = C::ty_scalar_float(ctx, v3);
                        if let Some(v359) = v358 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v361 = &constructor_scalar_size(ctx, v359);
                            let v374 = constructor_fpu_rrr(ctx, &FPUOp2::Mul, v34, v35, v361);
                            let v375 = constructor_output_reg(ctx, v374);
                            // Rule at src/isa/aarch64/lower.isle line 409.
                            return Some(v375);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v371 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v34, v35, v121);
                            let v372 = constructor_output_reg(ctx, v371);
                            // Rule at src/isa/aarch64/lower.isle line 406.
                            return Some(v372);
                        }
                        let v1805 = C::dynamic_lane(ctx, v3);
                        if let Some(v1806) = v1805 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v371 = constructor_vec_rrr(ctx, &VecALUOp::Fmul, v34, v35, v121);
                            let v1825 = C::value_reg(ctx, v371);
                            let v1826 = C::output(ctx, v1825);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 23.
                            return Some(v1826);
                        }
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v358 = C::ty_scalar_float(ctx, v3);
                        if let Some(v359) = v358 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v361 = &constructor_scalar_size(ctx, v359);
                            let v380 = constructor_fpu_rrr(ctx, &FPUOp2::Div, v34, v35, v361);
                            let v381 = constructor_output_reg(ctx, v380);
                            // Rule at src/isa/aarch64/lower.isle line 417.
                            return Some(v381);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v377 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v34, v35, v121);
                            let v378 = constructor_output_reg(ctx, v377);
                            // Rule at src/isa/aarch64/lower.isle line 414.
                            return Some(v378);
                        }
                        let v1805 = C::dynamic_lane(ctx, v3);
                        if let Some(v1806) = v1805 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v377 = constructor_vec_rrr(ctx, &VecALUOp::Fdiv, v34, v35, v121);
                            let v1827 = C::value_reg(ctx, v377);
                            let v1828 = C::output(ctx, v1827);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 27.
                            return Some(v1828);
                        }
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v3 = C::value_type(ctx, v2);
                        let v472 = constructor_fcopy_sign(ctx, v34, v35, v3);
                        let v473 = constructor_output_reg(ctx, v472);
                        // Rule at src/isa/aarch64/lower.isle line 575.
                        return Some(v473);
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v358 = C::ty_scalar_float(ctx, v3);
                        if let Some(v359) = v358 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v361 = &constructor_scalar_size(ctx, v359);
                            let v386 = constructor_fpu_rrr(ctx, &FPUOp2::Min, v34, v35, v361);
                            let v387 = constructor_output_reg(ctx, v386);
                            // Rule at src/isa/aarch64/lower.isle line 425.
                            return Some(v387);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v383 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v34, v35, v121);
                            let v384 = constructor_output_reg(ctx, v383);
                            // Rule at src/isa/aarch64/lower.isle line 422.
                            return Some(v384);
                        }
                        let v1805 = C::dynamic_lane(ctx, v3);
                        if let Some(v1806) = v1805 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v383 = constructor_vec_rrr(ctx, &VecALUOp::Fmin, v34, v35, v121);
                            let v1829 = C::value_reg(ctx, v383);
                            let v1830 = C::output(ctx, v1829);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 31.
                            return Some(v1830);
                        }
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v358 = C::ty_scalar_float(ctx, v3);
                        if let Some(v359) = v358 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v361 = &constructor_scalar_size(ctx, v359);
                            let v392 = constructor_fpu_rrr(ctx, &FPUOp2::Max, v34, v35, v361);
                            let v393 = constructor_output_reg(ctx, v392);
                            // Rule at src/isa/aarch64/lower.isle line 433.
                            return Some(v393);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v389 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v34, v35, v121);
                            let v390 = constructor_output_reg(ctx, v389);
                            // Rule at src/isa/aarch64/lower.isle line 430.
                            return Some(v390);
                        }
                        let v1805 = C::dynamic_lane(ctx, v3);
                        if let Some(v1806) = v1805 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v121 = &constructor_vector_size(ctx, v3);
                            let v389 = constructor_vec_rrr(ctx, &VecALUOp::Fmax, v34, v35, v121);
                            let v1831 = C::value_reg(ctx, v389);
                            let v1832 = C::output(ctx, v1831);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 35.
                            return Some(v1832);
                        }
                    }
                }
                &Opcode::Snarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1402 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1403) = v1402 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1404 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1405 = &constructor_lane_size(ctx, v1403);
                            let v1406 = constructor_sqxtn(ctx, v1404, v1405);
                            let v1407 = constructor_output_reg(ctx, v1406);
                            // Rule at src/isa/aarch64/lower.isle line 2144.
                            return Some(v1407);
                        }
                        let v1395 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1396) = v1395 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1397 = C::zero_value(ctx, v31.1);
                            if let Some(v1398) = v1397 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1399 = &constructor_lane_size(ctx, v1396);
                                let v1400 = constructor_sqxtn(ctx, v34, v1399);
                                let v1401 = constructor_output_reg(ctx, v1400);
                                // Rule at src/isa/aarch64/lower.isle line 2140.
                                return Some(v1401);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1399 = &constructor_lane_size(ctx, v1396);
                            let v1400 = constructor_sqxtn(ctx, v34, v1399);
                            let v1408 = C::put_in_reg(ctx, v31.1);
                            let v1409 = &constructor_lane_size(ctx, v1396);
                            let v1410 = constructor_sqxtn2(ctx, v1400, v1408, v1409);
                            let v1411 = constructor_output_reg(ctx, v1410);
                            // Rule at src/isa/aarch64/lower.isle line 2148.
                            return Some(v1411);
                        }
                        let v1838 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v1839) = v1838 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1404 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1840 = &constructor_lane_size(ctx, v1839);
                            let v1841 = constructor_sqxtn(ctx, v1404, v1840);
                            let v1842 = constructor_output_reg(ctx, v1841);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 43.
                            return Some(v1842);
                        }
                        let v1833 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v1834) = v1833 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1397 = C::zero_value(ctx, v31.1);
                            if let Some(v1398) = v1397 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1835 = &constructor_lane_size(ctx, v1834);
                                let v1836 = constructor_sqxtn(ctx, v34, v1835);
                                let v1837 = constructor_output_reg(ctx, v1836);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 39.
                                return Some(v1837);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1835 = &constructor_lane_size(ctx, v1834);
                            let v1836 = constructor_sqxtn(ctx, v34, v1835);
                            let v1408 = C::put_in_reg(ctx, v31.1);
                            let v1843 = &constructor_lane_size(ctx, v1834);
                            let v1844 = constructor_sqxtn2(ctx, v1836, v1408, v1843);
                            let v1845 = constructor_output_reg(ctx, v1844);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 47.
                            return Some(v1845);
                        }
                    }
                }
                &Opcode::Unarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1402 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1403) = v1402 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1404 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1405 = &constructor_lane_size(ctx, v1403);
                            let v1414 = constructor_sqxtun(ctx, v1404, v1405);
                            let v1415 = constructor_output_reg(ctx, v1414);
                            // Rule at src/isa/aarch64/lower.isle line 2159.
                            return Some(v1415);
                        }
                        let v1395 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1396) = v1395 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1397 = C::zero_value(ctx, v31.1);
                            if let Some(v1398) = v1397 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1399 = &constructor_lane_size(ctx, v1396);
                                let v1412 = constructor_sqxtun(ctx, v34, v1399);
                                let v1413 = constructor_output_reg(ctx, v1412);
                                // Rule at src/isa/aarch64/lower.isle line 2155.
                                return Some(v1413);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1399 = &constructor_lane_size(ctx, v1396);
                            let v1412 = constructor_sqxtun(ctx, v34, v1399);
                            let v1408 = C::put_in_reg(ctx, v31.1);
                            let v1409 = &constructor_lane_size(ctx, v1396);
                            let v1416 = constructor_sqxtun2(ctx, v1412, v1408, v1409);
                            let v1417 = constructor_output_reg(ctx, v1416);
                            // Rule at src/isa/aarch64/lower.isle line 2163.
                            return Some(v1417);
                        }
                        let v1838 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v1839) = v1838 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1404 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1840 = &constructor_lane_size(ctx, v1839);
                            let v1848 = constructor_sqxtun(ctx, v1404, v1840);
                            let v1849 = constructor_output_reg(ctx, v1848);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 57.
                            return Some(v1849);
                        }
                        let v1833 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v1834) = v1833 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1397 = C::zero_value(ctx, v31.1);
                            if let Some(v1398) = v1397 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1835 = &constructor_lane_size(ctx, v1834);
                                let v1846 = constructor_sqxtun(ctx, v34, v1835);
                                let v1847 = constructor_output_reg(ctx, v1846);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 53.
                                return Some(v1847);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1835 = &constructor_lane_size(ctx, v1834);
                            let v1846 = constructor_sqxtun(ctx, v34, v1835);
                            let v1408 = C::put_in_reg(ctx, v31.1);
                            let v1843 = &constructor_lane_size(ctx, v1834);
                            let v1850 = constructor_sqxtun2(ctx, v1846, v1408, v1843);
                            let v1851 = constructor_output_reg(ctx, v1850);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 61.
                            return Some(v1851);
                        }
                    }
                }
                &Opcode::Uunarrow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1402 = C::ty_vec64_int(ctx, v3);
                        if let Some(v1403) = v1402 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1404 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1405 = &constructor_lane_size(ctx, v1403);
                            let v1420 = constructor_uqxtn(ctx, v1404, v1405);
                            let v1421 = constructor_output_reg(ctx, v1420);
                            // Rule at src/isa/aarch64/lower.isle line 2175.
                            return Some(v1421);
                        }
                        let v1395 = C::ty_vec128_int(ctx, v3);
                        if let Some(v1396) = v1395 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1397 = C::zero_value(ctx, v31.1);
                            if let Some(v1398) = v1397 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1399 = &constructor_lane_size(ctx, v1396);
                                let v1418 = constructor_uqxtn(ctx, v34, v1399);
                                let v1419 = constructor_output_reg(ctx, v1418);
                                // Rule at src/isa/aarch64/lower.isle line 2171.
                                return Some(v1419);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1399 = &constructor_lane_size(ctx, v1396);
                            let v1418 = constructor_uqxtn(ctx, v34, v1399);
                            let v1408 = C::put_in_reg(ctx, v31.1);
                            let v1409 = &constructor_lane_size(ctx, v1396);
                            let v1422 = constructor_uqxtn2(ctx, v1418, v1408, v1409);
                            let v1423 = constructor_output_reg(ctx, v1422);
                            // Rule at src/isa/aarch64/lower.isle line 2179.
                            return Some(v1423);
                        }
                        let v1838 = C::ty_dyn64_int(ctx, v3);
                        if let Some(v1839) = v1838 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v1404 = constructor_mov_vec_elem(
                                ctx,
                                v34,
                                v35,
                                0x1,
                                0x0,
                                &VectorSize::Size64x2,
                            );
                            let v1840 = &constructor_lane_size(ctx, v1839);
                            let v1854 = constructor_uqxtn(ctx, v1404, v1840);
                            let v1855 = constructor_output_reg(ctx, v1854);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 71.
                            return Some(v1855);
                        }
                        let v1833 = C::ty_dyn128_int(ctx, v3);
                        if let Some(v1834) = v1833 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v1397 = C::zero_value(ctx, v31.1);
                            if let Some(v1398) = v1397 {
                                let v34 = C::put_in_reg(ctx, v31.0);
                                let v1835 = &constructor_lane_size(ctx, v1834);
                                let v1852 = constructor_uqxtn(ctx, v34, v1835);
                                let v1853 = constructor_output_reg(ctx, v1852);
                                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 67.
                                return Some(v1853);
                            }
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v1835 = &constructor_lane_size(ctx, v1834);
                            let v1852 = constructor_uqxtn(ctx, v34, v1835);
                            let v1408 = C::put_in_reg(ctx, v31.1);
                            let v1843 = &constructor_lane_size(ctx, v1834);
                            let v1856 = constructor_uqxtn2(ctx, v1852, v1408, v1843);
                            let v1857 = constructor_output_reg(ctx, v1856);
                            // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 75.
                            return Some(v1857);
                        }
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16X8 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            if v299 == v301 {
                                                                let v302 = C::put_in_reg(ctx, v299);
                                                                let v303 =
                                                                    constructor_saddlp8(ctx, v302);
                                                                let v304 = constructor_output_reg(
                                                                    ctx, v303,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 322.
                                                                return Some(v304);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            if v299 == v301 {
                                                                let v302 = C::put_in_reg(ctx, v299);
                                                                let v307 =
                                                                    constructor_uaddlp8(ctx, v302);
                                                                let v308 = constructor_output_reg(
                                                                    ctx, v307,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 330.
                                                                return Some(v308);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            I32X4 => {
                                let v31 = C::unpack_value_array_2(ctx, v30);
                                let v38 = C::def_inst(ctx, v31.1);
                                if let Some(v39) = v38 {
                                    let v40 = &C::inst_data(ctx, v39);
                                    if let &InstructionData::Unary {
                                        opcode: ref v300,
                                        arg: v301,
                                    } = v40
                                    {
                                        match v300 {
                                            &Opcode::SwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::SwidenLow = v298 {
                                                            if v299 == v301 {
                                                                let v302 = C::put_in_reg(ctx, v299);
                                                                let v305 =
                                                                    constructor_saddlp16(ctx, v302);
                                                                let v306 = constructor_output_reg(
                                                                    ctx, v305,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 326.
                                                                return Some(v306);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &Opcode::UwidenHigh => {
                                                let v48 = C::def_inst(ctx, v31.0);
                                                if let Some(v49) = v48 {
                                                    let v50 = &C::inst_data(ctx, v49);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v298,
                                                        arg: v299,
                                                    } = v50
                                                    {
                                                        if let &Opcode::UwidenLow = v298 {
                                                            if v299 == v301 {
                                                                let v302 = C::put_in_reg(ctx, v299);
                                                                let v309 =
                                                                    constructor_uaddlp16(ctx, v302);
                                                                let v310 = constructor_output_reg(
                                                                    ctx, v309,
                                                                );
                                                                // Rule at src/isa/aarch64/lower.isle line 334.
                                                                return Some(v310);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let v31 = C::unpack_value_array_2(ctx, v30);
                        let v34 = C::put_in_reg(ctx, v31.0);
                        let v35 = C::put_in_reg(ctx, v31.1);
                        let v121 = &constructor_vector_size(ctx, v3);
                        let v311 = constructor_addp(ctx, v34, v35, v121);
                        let v312 = constructor_output_reg(ctx, v311);
                        // Rule at src/isa/aarch64/lower.isle line 337.
                        return Some(v312);
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v31 = C::unpack_value_array_2(ctx, v30);
                            let v34 = C::put_in_reg(ctx, v31.0);
                            let v35 = C::put_in_reg(ctx, v31.1);
                            let v239 = C::value_regs(ctx, v34, v35);
                            let v240 = C::output(ctx, v239);
                            // Rule at src/isa/aarch64/lower.isle line 255.
                            return Some(v240);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1636,
            arg: v1637,
            imm: v1638,
        } => {
            match v1636 {
                &Opcode::Extractlane => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v358 = C::ty_scalar_float(ctx, v3);
                        if let Some(v359) = v358 {
                            let v1639 = C::u8_from_uimm8(ctx, v1638);
                            if v1639 == 0x0 {
                                let v1640 = constructor_output_value(ctx, v1637);
                                // Rule at src/isa/aarch64/lower.isle line 2498.
                                return Some(v1640);
                            }
                            let v1641 = C::put_in_reg(ctx, v1637);
                            let v1645 = C::value_type(ctx, v1637);
                            let v1646 = &constructor_vector_size(ctx, v1645);
                            let v1647 = constructor_fpu_move_from_vec(ctx, v1641, v1639, v1646);
                            let v1648 = constructor_output_reg(ctx, v1647);
                            // Rule at src/isa/aarch64/lower.isle line 2506.
                            return Some(v1648);
                        }
                        let v674 = C::ty_int(ctx, v3);
                        if let Some(v675) = v674 {
                            let v1641 = C::put_in_reg(ctx, v1637);
                            let v1642 = &constructor_scalar_size(ctx, v675);
                            let v1639 = C::u8_from_uimm8(ctx, v1638);
                            let v1643 = constructor_mov_from_vec(ctx, v1641, v1639, v1642);
                            let v1644 = constructor_output_reg(ctx, v1643);
                            // Rule at src/isa/aarch64/lower.isle line 2501.
                            return Some(v1644);
                        }
                    }
                }
                &Opcode::ExtractVector => {
                    if v1638 == 0x0 {
                        let v1641 = C::put_in_reg(ctx, v1637);
                        let v1866 = C::value_reg(ctx, v1641);
                        let v1867 = C::output(ctx, v1866);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 87.
                        return Some(v1867);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::Call {
            opcode: ref v1482,
            args: v1483,
            func_ref: v1484,
        } => {
            match v1482 {
                &Opcode::Call => {
                    let v1486 = C::func_ref_data(ctx, v1484);
                    let v1485 = C::value_list_slice(ctx, v1483);
                    let v1490 = C::gen_call(ctx, v1486.0, v1486.1, v1486.2, v1485);
                    // Rule at src/isa/aarch64/lower.isle line 2259.
                    return Some(v1490);
                }
                &Opcode::ReturnCall => {
                    let v1486 = C::func_ref_data(ctx, v1484);
                    let v1485 = C::value_list_slice(ctx, v1483);
                    let v1504 = C::gen_return_call(ctx, v1486.0, v1486.1, v1486.2, v1485);
                    // Rule at src/isa/aarch64/lower.isle line 2273.
                    return Some(v1504);
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v1491,
            args: v1492,
            sig_ref: v1493,
        } => {
            match v1491 {
                &Opcode::CallIndirect => {
                    let v1494 = C::value_list_slice(ctx, v1492);
                    let v1495 = C::value_slice_unwrap(ctx, v1494);
                    if let Some(v1496) = v1495 {
                        let v1499 = C::gen_call_indirect(ctx, v1493, v1496.0, v1496.1);
                        // Rule at src/isa/aarch64/lower.isle line 2262.
                        return Some(v1499);
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v1494 = C::value_list_slice(ctx, v1492);
                    let v1495 = C::value_slice_unwrap(ctx, v1494);
                    if let Some(v1496) = v1495 {
                        let v1505 = C::gen_return_call_indirect(ctx, v1493, v1496.0, v1496.1);
                        // Rule at src/isa/aarch64/lower.isle line 2276.
                        return Some(v1505);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::DynamicStackLoad {
            opcode: ref v1858,
            dynamic_stack_slot: v1859,
        } => {
            if let &Opcode::DynamicStackAddr = v1858 {
                let v1860 = C::temp_writable_reg(ctx, I64);
                let v1861 = &C::abi_dynamic_stackslot_addr(ctx, v1860, v1859);
                let v1862 = C::emit(ctx, v1861);
                let v1863 = C::writable_reg_to_reg(ctx, v1860);
                let v1864 = C::value_reg(ctx, v1863);
                let v1865 = C::output(ctx, v1864);
                // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 81.
                return Some(v1865);
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v1085,
            args: ref v1086,
            cond: ref v1087,
        } => {
            if let &Opcode::Fcmp = v1085 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v117 = C::multi_lane(ctx, v3);
                    if let Some(v118) = v117 {
                        let v1088 = C::unpack_value_array_2(ctx, v1086);
                        let v1093 = C::zero_value(ctx, v1088.1);
                        if let Some(v1094) = v1093 {
                            let v1091 = &C::fcmp_zero_cond_not_eq(ctx, v1087);
                            if let Some(v1092) = v1091 {
                                let v1095 = C::put_in_reg(ctx, v1088.0);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1096 = constructor_fcmeq0(ctx, v1095, v313);
                                let v1097 = constructor_not(ctx, v1096, v313);
                                let v1098 = C::value_reg(ctx, v1097);
                                let v1099 = C::output(ctx, v1098);
                                // Rule at src/isa/aarch64/lower.isle line 1850.
                                return Some(v1099);
                            }
                            let v1100 = &C::fcmp_zero_cond(ctx, v1087);
                            if let Some(v1101) = v1100 {
                                let v1095 = C::put_in_reg(ctx, v1088.0);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1102 = constructor_float_cmp_zero(ctx, v1101, v1095, v313);
                                let v1103 = C::value_reg(ctx, v1102);
                                let v1104 = C::output(ctx, v1103);
                                // Rule at src/isa/aarch64/lower.isle line 1856.
                                return Some(v1104);
                            }
                        }
                        let v1105 = C::zero_value(ctx, v1088.0);
                        if let Some(v1106) = v1105 {
                            let v1091 = &C::fcmp_zero_cond_not_eq(ctx, v1087);
                            if let Some(v1092) = v1091 {
                                let v1107 = C::put_in_reg(ctx, v1088.1);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1108 = constructor_fcmeq0(ctx, v1107, v313);
                                let v1109 = constructor_not(ctx, v1108, v313);
                                let v1110 = C::value_reg(ctx, v1109);
                                let v1111 = C::output(ctx, v1110);
                                // Rule at src/isa/aarch64/lower.isle line 1862.
                                return Some(v1111);
                            }
                            let v1100 = &C::fcmp_zero_cond(ctx, v1087);
                            if let Some(v1101) = v1100 {
                                let v1107 = C::put_in_reg(ctx, v1088.1);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1112 =
                                    constructor_float_cmp_zero_swap(ctx, v1101, v1107, v313);
                                let v1113 = C::value_reg(ctx, v1112);
                                let v1114 = C::output(ctx, v1113);
                                // Rule at src/isa/aarch64/lower.isle line 1868.
                                return Some(v1114);
                            }
                        }
                    }
                    let v1088 = C::unpack_value_array_2(ctx, v1086);
                    let v1115 = C::value_type(ctx, v1088.0);
                    let v1116 = C::ty_scalar_float(ctx, v1115);
                    if let Some(v1117) = v1116 {
                        let v1118 = &constructor_scalar_size(ctx, v1117);
                        let v1119 = C::put_in_reg(ctx, v1088.0);
                        let v1120 = C::put_in_reg(ctx, v1088.1);
                        let v1121 = &constructor_fpu_cmp(ctx, v1118, v1119, v1120);
                        let v1122 = &C::fp_cond_code(ctx, v1087);
                        let v1123 = &constructor_materialize_bool_result(ctx, v1122);
                        let v1124 = constructor_with_flags(ctx, v1121, v1123);
                        let v1125 = C::output(ctx, v1124);
                        // Rule at src/isa/aarch64/lower.isle line 1874.
                        return Some(v1125);
                    }
                    let v1126 = C::ty_vector_float(ctx, v1115);
                    if let Some(v1127) = v1126 {
                        let v1095 = C::put_in_reg(ctx, v1088.0);
                        let v1128 = C::put_in_reg(ctx, v1088.1);
                        let v1129 = &C::fp_cond_code(ctx, v1087);
                        let v1130 = constructor_vec_cmp(ctx, v1095, v1128, v1115, v1129);
                        let v1131 = constructor_output_reg(ctx, v1130);
                        // Rule at src/isa/aarch64/lower.isle line 1879.
                        return Some(v1131);
                    }
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1456,
            func_ref: v1457,
        } => {
            if let &Opcode::FuncAddr = v1456 {
                let v1458 = C::func_ref_data(ctx, v1457);
                let v1462 = C::box_external_name(ctx, v1458.1);
                let v1464 = constructor_load_ext_name(ctx, v1462, 0x0);
                let v1465 = constructor_output_reg(ctx, v1464);
                // Rule at src/isa/aarch64/lower.isle line 2238.
                return Some(v1465);
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v1710,
            args: ref v1711,
            code: ref v1712,
        } => {
            if let &Opcode::UaddOverflowTrap = v1710 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v27 = C::fits_in_64(ctx, v3);
                    if let Some(v28) = v27 {
                        let v1713 = C::unpack_value_array_2(ctx, v1711);
                        let v1716 = C::put_in_reg(ctx, v1713.0);
                        let v1717 = C::put_in_reg(ctx, v1713.1);
                        let v1718 = &constructor_add_with_flags_paired(ctx, v28, v1716, v1717);
                        let v1719 = constructor_trap_if_overflow(ctx, v1718, v1712);
                        let v1720 = constructor_output_reg(ctx, v1719);
                        // Rule at src/isa/aarch64/lower.isle line 2603.
                        return Some(v1720);
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v1132,
            args: ref v1133,
            cond: ref v1134,
        } => {
            if let &Opcode::Icmp = v1132 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v117 = C::multi_lane(ctx, v3);
                    if let Some(v118) = v117 {
                        let v1135 = C::unpack_value_array_2(ctx, v1133);
                        let v1140 = C::zero_value(ctx, v1135.1);
                        if let Some(v1141) = v1140 {
                            let v1138 = &C::icmp_zero_cond_not_eq(ctx, v1134);
                            if let Some(v1139) = v1138 {
                                let v1142 = C::put_in_reg(ctx, v1135.0);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1143 = constructor_cmeq0(ctx, v1142, v313);
                                let v1144 = constructor_not(ctx, v1143, v313);
                                let v1145 = C::value_reg(ctx, v1144);
                                let v1146 = C::output(ctx, v1145);
                                // Rule at src/isa/aarch64/lower.isle line 1885.
                                return Some(v1146);
                            }
                            let v1147 = &C::icmp_zero_cond(ctx, v1134);
                            if let Some(v1148) = v1147 {
                                let v1142 = C::put_in_reg(ctx, v1135.0);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1149 = constructor_int_cmp_zero(ctx, v1148, v1142, v313);
                                let v1150 = C::value_reg(ctx, v1149);
                                let v1151 = C::output(ctx, v1150);
                                // Rule at src/isa/aarch64/lower.isle line 1891.
                                return Some(v1151);
                            }
                        }
                        let v1152 = C::zero_value(ctx, v1135.0);
                        if let Some(v1153) = v1152 {
                            let v1138 = &C::icmp_zero_cond_not_eq(ctx, v1134);
                            if let Some(v1139) = v1138 {
                                let v1154 = C::put_in_reg(ctx, v1135.1);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1155 = constructor_cmeq0(ctx, v1154, v313);
                                let v1156 = constructor_not(ctx, v1155, v313);
                                let v1157 = C::value_reg(ctx, v1156);
                                let v1158 = C::output(ctx, v1157);
                                // Rule at src/isa/aarch64/lower.isle line 1897.
                                return Some(v1158);
                            }
                            let v1147 = &C::icmp_zero_cond(ctx, v1134);
                            if let Some(v1148) = v1147 {
                                let v1154 = C::put_in_reg(ctx, v1135.1);
                                let v313 = &constructor_vector_size(ctx, v3);
                                let v1159 = constructor_int_cmp_zero_swap(ctx, v1148, v1154, v313);
                                let v1160 = C::value_reg(ctx, v1159);
                                let v1161 = C::output(ctx, v1160);
                                // Rule at src/isa/aarch64/lower.isle line 1903.
                                return Some(v1161);
                            }
                        }
                    }
                }
                let v1135 = C::unpack_value_array_2(ctx, v1133);
                let v1162 = C::value_type(ctx, v1135.0);
                let v1164 =
                    constructor_lower_icmp_into_reg(ctx, v1134, v1135.0, v1135.1, v1162, I8);
                let v1165 = C::output(ctx, v1164);
                // Rule at src/isa/aarch64/lower.isle line 1909.
                return Some(v1165);
            }
        }
        &InstructionData::Load {
            opcode: ref v1506,
            arg: v1507,
            flags: v1508,
            offset: v1509,
        } => {
            match v1506 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v1510 = C::offset32_to_i32(ctx, v1509);
                                let v1511 = &constructor_amode(ctx, I8, v1507, v1510);
                                let v1512 = constructor_aarch64_uload8(ctx, v1511, v1508);
                                let v1513 = constructor_output_reg(ctx, v1512);
                                // Rule at src/isa/aarch64/lower.isle line 2281.
                                return Some(v1513);
                            }
                            I16 => {
                                let v1510 = C::offset32_to_i32(ctx, v1509);
                                let v1514 = &constructor_amode(ctx, I16, v1507, v1510);
                                let v1515 = constructor_aarch64_uload16(ctx, v1514, v1508);
                                let v1516 = constructor_output_reg(ctx, v1515);
                                // Rule at src/isa/aarch64/lower.isle line 2284.
                                return Some(v1516);
                            }
                            I32 => {
                                let v1510 = C::offset32_to_i32(ctx, v1509);
                                let v1517 = &constructor_amode(ctx, I32, v1507, v1510);
                                let v1518 = constructor_aarch64_uload32(ctx, v1517, v1508);
                                let v1519 = constructor_output_reg(ctx, v1518);
                                // Rule at src/isa/aarch64/lower.isle line 2287.
                                return Some(v1519);
                            }
                            I64 => {
                                let v1510 = C::offset32_to_i32(ctx, v1509);
                                let v1520 = &constructor_amode(ctx, I64, v1507, v1510);
                                let v1521 = constructor_aarch64_uload64(ctx, v1520, v1508);
                                let v1522 = constructor_output_reg(ctx, v1521);
                                // Rule at src/isa/aarch64/lower.isle line 2290.
                                return Some(v1522);
                            }
                            I128 => {
                                let v1510 = C::offset32_to_i32(ctx, v1509);
                                let v1529 = &constructor_pair_amode(ctx, v1507, v1510);
                                let v1530 = constructor_aarch64_loadp64(ctx, v1529, v1508);
                                let v1531 = C::output(ctx, v1530);
                                // Rule at src/isa/aarch64/lower.isle line 2302.
                                return Some(v1531);
                            }
                            R64 => {
                                let v1510 = C::offset32_to_i32(ctx, v1509);
                                let v1520 = &constructor_amode(ctx, I64, v1507, v1510);
                                let v1521 = constructor_aarch64_uload64(ctx, v1520, v1508);
                                let v1522 = constructor_output_reg(ctx, v1521);
                                // Rule at src/isa/aarch64/lower.isle line 2293.
                                return Some(v1522);
                            }
                            F32 => {
                                let v1510 = C::offset32_to_i32(ctx, v1509);
                                let v1523 = &constructor_amode(ctx, F32, v1507, v1510);
                                let v1524 = constructor_aarch64_fpuload32(ctx, v1523, v1508);
                                let v1525 = constructor_output_reg(ctx, v1524);
                                // Rule at src/isa/aarch64/lower.isle line 2296.
                                return Some(v1525);
                            }
                            F64 => {
                                let v1510 = C::offset32_to_i32(ctx, v1509);
                                let v1526 = &constructor_amode(ctx, F64, v1507, v1510);
                                let v1527 = constructor_aarch64_fpuload64(ctx, v1526, v1508);
                                let v1528 = constructor_output_reg(ctx, v1527);
                                // Rule at src/isa/aarch64/lower.isle line 2299.
                                return Some(v1528);
                            }
                            _ => {}
                        }
                        let v1532 = C::ty_vec64(ctx, v3);
                        if let Some(v1533) = v1532 {
                            let v1510 = C::offset32_to_i32(ctx, v1509);
                            let v1526 = &constructor_amode(ctx, F64, v1507, v1510);
                            let v1527 = constructor_aarch64_fpuload64(ctx, v1526, v1508);
                            let v1528 = constructor_output_reg(ctx, v1527);
                            // Rule at src/isa/aarch64/lower.isle line 2305.
                            return Some(v1528);
                        }
                        let v1538 = C::ty_dyn_vec64(ctx, v3);
                        if let Some(v1539) = v1538 {
                            let v1510 = C::offset32_to_i32(ctx, v1509);
                            let v1526 = &constructor_amode(ctx, F64, v1507, v1510);
                            let v1527 = constructor_aarch64_fpuload64(ctx, v1526, v1508);
                            let v1528 = constructor_output_reg(ctx, v1527);
                            // Rule at src/isa/aarch64/lower.isle line 2313.
                            return Some(v1528);
                        }
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v1510 = C::offset32_to_i32(ctx, v1509);
                            let v1535 = &constructor_amode(ctx, I8X16, v1507, v1510);
                            let v1536 = constructor_aarch64_fpuload128(ctx, v1535, v1508);
                            let v1537 = constructor_output_reg(ctx, v1536);
                            // Rule at src/isa/aarch64/lower.isle line 2309.
                            return Some(v1537);
                        }
                        let v1540 = C::ty_dyn_vec128(ctx, v3);
                        if let Some(v1541) = v1540 {
                            let v1510 = C::offset32_to_i32(ctx, v1509);
                            let v1535 = &constructor_amode(ctx, I8X16, v1507, v1510);
                            let v1536 = constructor_aarch64_fpuload128(ctx, v1535, v1508);
                            let v1537 = constructor_output_reg(ctx, v1536);
                            // Rule at src/isa/aarch64/lower.isle line 2317.
                            return Some(v1537);
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1510 = C::offset32_to_i32(ctx, v1509);
                    let v1511 = &constructor_amode(ctx, I8, v1507, v1510);
                    let v1512 = constructor_aarch64_uload8(ctx, v1511, v1508);
                    let v1513 = constructor_output_reg(ctx, v1512);
                    // Rule at src/isa/aarch64/lower.isle line 2322.
                    return Some(v1513);
                }
                &Opcode::Sload8 => {
                    let v1510 = C::offset32_to_i32(ctx, v1509);
                    let v1511 = &constructor_amode(ctx, I8, v1507, v1510);
                    let v1542 = constructor_aarch64_sload8(ctx, v1511, v1508);
                    let v1543 = constructor_output_reg(ctx, v1542);
                    // Rule at src/isa/aarch64/lower.isle line 2325.
                    return Some(v1543);
                }
                &Opcode::Uload16 => {
                    let v1510 = C::offset32_to_i32(ctx, v1509);
                    let v1514 = &constructor_amode(ctx, I16, v1507, v1510);
                    let v1515 = constructor_aarch64_uload16(ctx, v1514, v1508);
                    let v1516 = constructor_output_reg(ctx, v1515);
                    // Rule at src/isa/aarch64/lower.isle line 2328.
                    return Some(v1516);
                }
                &Opcode::Sload16 => {
                    let v1510 = C::offset32_to_i32(ctx, v1509);
                    let v1514 = &constructor_amode(ctx, I16, v1507, v1510);
                    let v1544 = constructor_aarch64_sload16(ctx, v1514, v1508);
                    let v1545 = constructor_output_reg(ctx, v1544);
                    // Rule at src/isa/aarch64/lower.isle line 2331.
                    return Some(v1545);
                }
                &Opcode::Uload32 => {
                    let v1510 = C::offset32_to_i32(ctx, v1509);
                    let v1517 = &constructor_amode(ctx, I32, v1507, v1510);
                    let v1518 = constructor_aarch64_uload32(ctx, v1517, v1508);
                    let v1519 = constructor_output_reg(ctx, v1518);
                    // Rule at src/isa/aarch64/lower.isle line 2334.
                    return Some(v1519);
                }
                &Opcode::Sload32 => {
                    let v1510 = C::offset32_to_i32(ctx, v1509);
                    let v1517 = &constructor_amode(ctx, I32, v1507, v1510);
                    let v1546 = constructor_aarch64_sload32(ctx, v1517, v1508);
                    let v1547 = constructor_output_reg(ctx, v1546);
                    // Rule at src/isa/aarch64/lower.isle line 2337.
                    return Some(v1547);
                }
                &Opcode::Uload8x8 => {
                    let v1510 = C::offset32_to_i32(ctx, v1509);
                    let v1526 = &constructor_amode(ctx, F64, v1507, v1510);
                    let v1527 = constructor_aarch64_fpuload64(ctx, v1526, v1508);
                    let v1551 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1527,
                        false,
                        &ScalarSize::Size16,
                    );
                    let v1552 = constructor_output_reg(ctx, v1551);
                    // Rule at src/isa/aarch64/lower.isle line 2347.
                    return Some(v1552);
                }
                &Opcode::Sload8x8 => {
                    let v1510 = C::offset32_to_i32(ctx, v1509);
                    let v1526 = &constructor_amode(ctx, F64, v1507, v1510);
                    let v1527 = constructor_aarch64_fpuload64(ctx, v1526, v1508);
                    let v1549 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1527,
                        false,
                        &ScalarSize::Size16,
                    );
                    let v1550 = constructor_output_reg(ctx, v1549);
                    // Rule at src/isa/aarch64/lower.isle line 2341.
                    return Some(v1550);
                }
                &Opcode::Uload16x4 => {
                    let v1510 = C::offset32_to_i32(ctx, v1509);
                    let v1526 = &constructor_amode(ctx, F64, v1507, v1510);
                    let v1527 = constructor_aarch64_fpuload64(ctx, v1526, v1508);
                    let v1555 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1527,
                        false,
                        &ScalarSize::Size32,
                    );
                    let v1556 = constructor_output_reg(ctx, v1555);
                    // Rule at src/isa/aarch64/lower.isle line 2359.
                    return Some(v1556);
                }
                &Opcode::Sload16x4 => {
                    let v1510 = C::offset32_to_i32(ctx, v1509);
                    let v1526 = &constructor_amode(ctx, F64, v1507, v1510);
                    let v1527 = constructor_aarch64_fpuload64(ctx, v1526, v1508);
                    let v1553 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1527,
                        false,
                        &ScalarSize::Size32,
                    );
                    let v1554 = constructor_output_reg(ctx, v1553);
                    // Rule at src/isa/aarch64/lower.isle line 2353.
                    return Some(v1554);
                }
                &Opcode::Uload32x2 => {
                    let v1510 = C::offset32_to_i32(ctx, v1509);
                    let v1526 = &constructor_amode(ctx, F64, v1507, v1510);
                    let v1527 = constructor_aarch64_fpuload64(ctx, v1526, v1508);
                    let v1559 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Uxtl,
                        v1527,
                        false,
                        &ScalarSize::Size64,
                    );
                    let v1560 = constructor_output_reg(ctx, v1559);
                    // Rule at src/isa/aarch64/lower.isle line 2371.
                    return Some(v1560);
                }
                &Opcode::Sload32x2 => {
                    let v1510 = C::offset32_to_i32(ctx, v1509);
                    let v1526 = &constructor_amode(ctx, F64, v1507, v1510);
                    let v1527 = constructor_aarch64_fpuload64(ctx, v1526, v1508);
                    let v1557 = constructor_vec_extend(
                        ctx,
                        &VecExtendOp::Sxtl,
                        v1527,
                        false,
                        &ScalarSize::Size64,
                    );
                    let v1558 = constructor_output_reg(ctx, v1557);
                    // Rule at src/isa/aarch64/lower.isle line 2365.
                    return Some(v1558);
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1287,
            arg: v1288,
            flags: v1289,
        } => {
            match v1287 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1612 = C::ty_float_or_vec(ctx, v3);
                        if let Some(v1613) = v1612 {
                            let v1614 = C::value_type(ctx, v1288);
                            let v1615 = C::ty_float_or_vec(ctx, v1614);
                            if let Some(v1616) = v1615 {
                                let v1617 = constructor_output_value(ctx, v1288);
                                // Rule at src/isa/aarch64/lower.isle line 2458.
                                return Some(v1617);
                            }
                            let v1618 = C::ty_int_ref_scalar_64(ctx, v1614);
                            if let Some(v1619) = v1618 {
                                let v1290 = C::put_in_reg(ctx, v1288);
                                let v1620 = &constructor_scalar_size(ctx, v1614);
                                let v1621 = constructor_mov_to_fpu(ctx, v1290, v1620);
                                let v1622 = constructor_output_reg(ctx, v1621);
                                // Rule at src/isa/aarch64/lower.isle line 2462.
                                return Some(v1622);
                            }
                        }
                        let v1071 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1072) = v1071 {
                            let v1614 = C::value_type(ctx, v1288);
                            let v1623 = C::fits_in_64(ctx, v1614);
                            if let Some(v1624) = v1623 {
                                let v1625 = C::ty_float_or_vec(ctx, v1624);
                                if let Some(v1626) = v1625 {
                                    let v1290 = C::put_in_reg(ctx, v1288);
                                    let v1627 = &constructor_scalar_size(ctx, v3);
                                    let v1628 = constructor_mov_from_vec(ctx, v1290, 0x0, v1627);
                                    let v1629 = constructor_output_reg(ctx, v1628);
                                    // Rule at src/isa/aarch64/lower.isle line 2467.
                                    return Some(v1629);
                                }
                            }
                            let v1618 = C::ty_int_ref_scalar_64(ctx, v1614);
                            if let Some(v1619) = v1618 {
                                let v1630 = constructor_is_ref_type(ctx, v1614);
                                match v1630 {
                                    true => {
                                        let v1631 = constructor_is_ref_type(ctx, v3);
                                        if v1631 == false {
                                            let v1290 = C::put_in_reg(ctx, v1288);
                                            let v1632 = constructor_copy_reg(ctx, v3, v1290);
                                            let v1633 = constructor_output_reg(ctx, v1632);
                                            // Rule at src/isa/aarch64/lower.isle line 2474.
                                            return Some(v1633);
                                        }
                                    }
                                    false => {
                                        let v1631 = constructor_is_ref_type(ctx, v3);
                                        if v1631 == true {
                                            let v1290 = C::put_in_reg(ctx, v1288);
                                            let v1634 = constructor_copy_reg(ctx, v1614, v1290);
                                            let v1635 = constructor_output_reg(ctx, v1634);
                                            // Rule at src/isa/aarch64/lower.isle line 2480.
                                            return Some(v1635);
                                        }
                                    }
                                    _ => {}
                                }
                                let v1617 = constructor_output_value(ctx, v1288);
                                // Rule at src/isa/aarch64/lower.isle line 2488.
                                return Some(v1617);
                            }
                        }
                        if v3 == I128 {
                            let v1614 = C::value_type(ctx, v1288);
                            if v1614 == I128 {
                                let v1617 = constructor_output_value(ctx, v1288);
                                // Rule at src/isa/aarch64/lower.isle line 2492.
                                return Some(v1617);
                            }
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1285 = C::valid_atomic_transaction(ctx, v3);
                        if let Some(v1286) = v1285 {
                            let v1290 = C::put_in_reg(ctx, v1288);
                            let v1291 = constructor_load_acquire(ctx, v1286, v1289, v1290);
                            let v1292 = constructor_output_reg(ctx, v1291);
                            // Rule at src/isa/aarch64/lower.isle line 2040.
                            return Some(v1292);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v1500,
            args: v1501,
        } => {
            if let &Opcode::Return = v1500 {
                let v1502 = C::value_list_slice(ctx, v1501);
                let v1503 = constructor_lower_return(ctx, v1502);
                // Rule at src/isa/aarch64/lower.isle line 2268.
                return Some(v1503);
            }
        }
        &InstructionData::NullAry { opcode: ref v11 } => {
            match v11 {
                &Opcode::Debugtrap => {
                    let v1454 = &constructor_brk(ctx);
                    let v1455 = constructor_side_effect(ctx, v1454);
                    // Rule at src/isa/aarch64/lower.isle line 2233.
                    return Some(v1455);
                }
                &Opcode::GetPinnedReg => {
                    let v1607 = C::preg_pinned(ctx);
                    let v1608 = constructor_mov_from_preg(ctx, v1607);
                    let v1609 = constructor_output_reg(ctx, v1608);
                    // Rule at src/isa/aarch64/lower.isle line 2449.
                    return Some(v1609);
                }
                &Opcode::GetFramePointer => {
                    let v1476 = constructor_aarch64_fp(ctx);
                    let v1477 = constructor_output_reg(ctx, v1476);
                    // Rule at src/isa/aarch64/lower.isle line 2248.
                    return Some(v1477);
                }
                &Opcode::GetStackPointer => {
                    let v1478 = constructor_aarch64_sp(ctx);
                    let v1479 = constructor_output_reg(ctx, v1478);
                    // Rule at src/isa/aarch64/lower.isle line 2251.
                    return Some(v1479);
                }
                &Opcode::GetReturnAddress => {
                    let v1480 = constructor_aarch64_link(ctx);
                    let v1481 = constructor_output_reg(ctx, v1480);
                    // Rule at src/isa/aarch64/lower.isle line 2254.
                    return Some(v1481);
                }
                &Opcode::Null => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v13 = constructor_imm(ctx, v3, &ImmExtend::Zero, 0x0);
                        let v14 = constructor_output_reg(ctx, v13);
                        // Rule at src/isa/aarch64/lower.isle line 24.
                        return Some(v14);
                    }
                }
                &Opcode::Nop => {
                    let v25 = C::invalid_reg(ctx);
                    let v26 = constructor_output_reg(ctx, v25);
                    // Rule at src/isa/aarch64/lower.isle line 39.
                    return Some(v26);
                }
                &Opcode::Fence => {
                    let v1443 = &constructor_aarch64_fence(ctx);
                    let v1444 = constructor_side_effect(ctx, v1443);
                    // Rule at src/isa/aarch64/lower.isle line 2216.
                    return Some(v1444);
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v137,
            args: ref v138,
            imm: v139,
        } => {
            if let &Opcode::Shuffle = v137 {
                let v143 = C::shuffle_dup8_from_imm(ctx, v139);
                if let Some(v144) = v143 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v147 = constructor_vec_dup_from_fpu(ctx, v145, &VectorSize::Size8x16, v144);
                    let v148 = constructor_output_reg(ctx, v147);
                    // Rule at src/isa/aarch64/lower.isle line 127.
                    return Some(v148);
                }
                let v149 = C::shuffle_dup16_from_imm(ctx, v139);
                if let Some(v150) = v149 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v152 = constructor_vec_dup_from_fpu(ctx, v145, &VectorSize::Size16x8, v150);
                    let v153 = constructor_output_reg(ctx, v152);
                    // Rule at src/isa/aarch64/lower.isle line 129.
                    return Some(v153);
                }
                let v154 = C::shuffle_dup32_from_imm(ctx, v139);
                if let Some(v155) = v154 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v157 = constructor_vec_dup_from_fpu(ctx, v145, &VectorSize::Size32x4, v155);
                    let v158 = constructor_output_reg(ctx, v157);
                    // Rule at src/isa/aarch64/lower.isle line 131.
                    return Some(v158);
                }
                let v159 = C::shuffle_dup64_from_imm(ctx, v139);
                if let Some(v160) = v159 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v162 = constructor_vec_dup_from_fpu(ctx, v145, &VectorSize::Size64x2, v160);
                    let v163 = constructor_output_reg(ctx, v162);
                    // Rule at src/isa/aarch64/lower.isle line 133.
                    return Some(v163);
                }
                let v164 = C::vec_extract_imm4_from_immediate(ctx, v139);
                if let Some(v165) = v164 {
                    let v140 = C::unpack_value_array_2(ctx, v138);
                    let v145 = C::put_in_reg(ctx, v140.0);
                    let v166 = C::put_in_reg(ctx, v140.1);
                    let v167 = constructor_vec_extract(ctx, v145, v166, v165);
                    let v168 = constructor_output_reg(ctx, v167);
                    // Rule at src/isa/aarch64/lower.isle line 152.
                    return Some(v168);
                }
                let v169 = C::u128_from_immediate(ctx, v139);
                if let Some(v170) = v169 {
                    match v170 {
                        0x8090A0B0C0D0E0F0001020304050607 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v217 = constructor_rev64(ctx, v145, &VectorSize::Size8x16);
                            let v218 = constructor_output_reg(ctx, v217);
                            // Rule at src/isa/aarch64/lower.isle line 228.
                            return Some(v218);
                        }
                        0x9080B0A0D0C0F0E0100030205040706 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v219 = constructor_rev64(ctx, v145, &VectorSize::Size16x8);
                            let v220 = constructor_output_reg(ctx, v219);
                            // Rule at src/isa/aarch64/lower.isle line 230.
                            return Some(v220);
                        }
                        0xB0A09080F0E0D0C0302010007060504 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v221 = constructor_rev64(ctx, v145, &VectorSize::Size32x4);
                            let v222 = constructor_output_reg(ctx, v221);
                            // Rule at src/isa/aarch64/lower.isle line 232.
                            return Some(v222);
                        }
                        0xC0D0E0F08090A0B0405060700010203 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v213 = constructor_rev32(ctx, v145, &VectorSize::Size8x16);
                            let v214 = constructor_output_reg(ctx, v213);
                            // Rule at src/isa/aarch64/lower.isle line 224.
                            return Some(v214);
                        }
                        0xD0C0F0E09080B0A0504070601000302 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v215 = constructor_rev32(ctx, v145, &VectorSize::Size16x8);
                            let v216 = constructor_output_reg(ctx, v215);
                            // Rule at src/isa/aarch64/lower.isle line 226.
                            return Some(v216);
                        }
                        0xE0F0C0D0A0B08090607040502030001 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v211 = constructor_rev16(ctx, v145, &VectorSize::Size8x16);
                            let v212 = constructor_output_reg(ctx, v211);
                            // Rule at src/isa/aarch64/lower.isle line 222.
                            return Some(v212);
                        }
                        0x17071606150514041303120211011000 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v187 = constructor_vec_zip1(ctx, v145, v166, &VectorSize::Size8x16);
                            let v188 = constructor_output_reg(ctx, v187);
                            // Rule at src/isa/aarch64/lower.isle line 184.
                            return Some(v188);
                        }
                        0x17160706151405041312030211100100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v191 = constructor_vec_zip1(ctx, v145, v166, &VectorSize::Size16x8);
                            let v192 = constructor_output_reg(ctx, v191);
                            // Rule at src/isa/aarch64/lower.isle line 188.
                            return Some(v192);
                        }
                        0x17161514070605041312111003020100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v195 = constructor_vec_zip1(ctx, v145, v166, &VectorSize::Size32x4);
                            let v196 = constructor_output_reg(ctx, v195);
                            // Rule at src/isa/aarch64/lower.isle line 192.
                            return Some(v196);
                        }
                        0x17161514131211100706050403020100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v183 = constructor_vec_uzp1(ctx, v145, v166, &VectorSize::Size64x2);
                            let v184 = constructor_output_reg(ctx, v183);
                            // Rule at src/isa/aarch64/lower.isle line 177.
                            return Some(v184);
                        }
                        0x1B1A19180B0A09081312111003020100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v207 = constructor_vec_trn1(ctx, v145, v166, &VectorSize::Size32x4);
                            let v208 = constructor_output_reg(ctx, v207);
                            // Rule at src/isa/aarch64/lower.isle line 210.
                            return Some(v208);
                        }
                        0x1B1A1918131211100B0A090803020100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v179 = constructor_vec_uzp1(ctx, v145, v166, &VectorSize::Size32x4);
                            let v180 = constructor_output_reg(ctx, v179);
                            // Rule at src/isa/aarch64/lower.isle line 173.
                            return Some(v180);
                        }
                        0x1D1C0D0C191809081514050411100100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v203 = constructor_vec_trn1(ctx, v145, v166, &VectorSize::Size16x8);
                            let v204 = constructor_output_reg(ctx, v203);
                            // Rule at src/isa/aarch64/lower.isle line 206.
                            return Some(v204);
                        }
                        0x1D1C1918151411100D0C090805040100 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v175 = constructor_vec_uzp1(ctx, v145, v166, &VectorSize::Size16x8);
                            let v176 = constructor_output_reg(ctx, v175);
                            // Rule at src/isa/aarch64/lower.isle line 169.
                            return Some(v176);
                        }
                        0x1E0E1C0C1A0A18081606140412021000 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v199 = constructor_vec_trn1(ctx, v145, v166, &VectorSize::Size8x16);
                            let v200 = constructor_output_reg(ctx, v199);
                            // Rule at src/isa/aarch64/lower.isle line 202.
                            return Some(v200);
                        }
                        0x1E1C1A18161412100E0C0A0806040200 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v171 = constructor_vec_uzp1(ctx, v145, v166, &VectorSize::Size8x16);
                            let v172 = constructor_output_reg(ctx, v171);
                            // Rule at src/isa/aarch64/lower.isle line 165.
                            return Some(v172);
                        }
                        0x1F0F1D0D1B0B19091707150513031101 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v201 = constructor_vec_trn2(ctx, v145, v166, &VectorSize::Size8x16);
                            let v202 = constructor_output_reg(ctx, v201);
                            // Rule at src/isa/aarch64/lower.isle line 204.
                            return Some(v202);
                        }
                        0x1F0F1E0E1D0D1C0C1B0B1A0A19091808 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v189 = constructor_vec_zip2(ctx, v145, v166, &VectorSize::Size8x16);
                            let v190 = constructor_output_reg(ctx, v189);
                            // Rule at src/isa/aarch64/lower.isle line 186.
                            return Some(v190);
                        }
                        0x1F1D1B19171513110F0D0B0907050301 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v173 = constructor_vec_uzp2(ctx, v145, v166, &VectorSize::Size8x16);
                            let v174 = constructor_output_reg(ctx, v173);
                            // Rule at src/isa/aarch64/lower.isle line 167.
                            return Some(v174);
                        }
                        0x1F1E0F0E1B1A0B0A1716070613120302 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v205 = constructor_vec_trn2(ctx, v145, v166, &VectorSize::Size16x8);
                            let v206 = constructor_output_reg(ctx, v205);
                            // Rule at src/isa/aarch64/lower.isle line 208.
                            return Some(v206);
                        }
                        0x1F1E0F0E1D1C0D0C1B1A0B0A19180908 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v193 = constructor_vec_zip2(ctx, v145, v166, &VectorSize::Size16x8);
                            let v194 = constructor_output_reg(ctx, v193);
                            // Rule at src/isa/aarch64/lower.isle line 190.
                            return Some(v194);
                        }
                        0x1F1E1B1A171613120F0E0B0A07060302 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v177 = constructor_vec_uzp2(ctx, v145, v166, &VectorSize::Size16x8);
                            let v178 = constructor_output_reg(ctx, v177);
                            // Rule at src/isa/aarch64/lower.isle line 171.
                            return Some(v178);
                        }
                        0x1F1E1D1C0F0E0D0C1716151407060504 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v209 = constructor_vec_trn2(ctx, v145, v166, &VectorSize::Size32x4);
                            let v210 = constructor_output_reg(ctx, v209);
                            // Rule at src/isa/aarch64/lower.isle line 212.
                            return Some(v210);
                        }
                        0x1F1E1D1C0F0E0D0C1B1A19180B0A0908 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v197 = constructor_vec_zip2(ctx, v145, v166, &VectorSize::Size32x4);
                            let v198 = constructor_output_reg(ctx, v197);
                            // Rule at src/isa/aarch64/lower.isle line 194.
                            return Some(v198);
                        }
                        0x1F1E1D1C171615140F0E0D0C07060504 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v181 = constructor_vec_uzp2(ctx, v145, v166, &VectorSize::Size32x4);
                            let v182 = constructor_output_reg(ctx, v181);
                            // Rule at src/isa/aarch64/lower.isle line 175.
                            return Some(v182);
                        }
                        0x1F1E1D1C1B1A19180F0E0D0C0B0A0908 => {
                            let v140 = C::unpack_value_array_2(ctx, v138);
                            let v145 = C::put_in_reg(ctx, v140.0);
                            let v166 = C::put_in_reg(ctx, v140.1);
                            let v185 = constructor_vec_uzp2(ctx, v145, v166, &VectorSize::Size64x2);
                            let v186 = constructor_output_reg(ctx, v185);
                            // Rule at src/isa/aarch64/lower.isle line 179.
                            return Some(v186);
                        }
                        _ => {}
                    }
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v223 = constructor_constant_f128(ctx, v170);
                        let v140 = C::unpack_value_array_2(ctx, v138);
                        let v224 = C::put_in_reg(ctx, v140.0);
                        let v225 = C::put_in_reg(ctx, v140.1);
                        let v3 = C::value_type(ctx, v2);
                        let v226 = constructor_vec_tbl2(ctx, v224, v225, v223, v3);
                        let v227 = constructor_output_reg(ctx, v226);
                        // Rule at src/isa/aarch64/lower.isle line 235.
                        return Some(v227);
                    }
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1669,
            stack_slot: v1670,
            offset: v1671,
        } => {
            if let &Opcode::StackAddr = v1669 {
                let v1672 = constructor_compute_stack_addr(ctx, v1670, v1671);
                let v1673 = constructor_output_reg(ctx, v1672);
                // Rule at src/isa/aarch64/lower.isle line 2525.
                return Some(v1673);
            }
        }
        &InstructionData::Store {
            opcode: ref v1561,
            args: ref v1562,
            flags: v1563,
            offset: v1564,
        } => {
            match v1561 {
                &Opcode::Store => {
                    let v1565 = C::unpack_value_array_2(ctx, v1562);
                    let v1568 = C::value_type(ctx, v1565.0);
                    match v1568 {
                        I8 => {
                            let v1569 = C::offset32_to_i32(ctx, v1564);
                            let v1570 = &constructor_amode(ctx, I8, v1565.1, v1569);
                            let v1571 = C::put_in_reg(ctx, v1565.0);
                            let v1572 = &constructor_aarch64_store8(ctx, v1570, v1563, v1571);
                            let v1573 = constructor_side_effect(ctx, v1572);
                            // Rule at src/isa/aarch64/lower.isle line 2380.
                            return Some(v1573);
                        }
                        I16 => {
                            let v1569 = C::offset32_to_i32(ctx, v1564);
                            let v1574 = &constructor_amode(ctx, I16, v1565.1, v1569);
                            let v1571 = C::put_in_reg(ctx, v1565.0);
                            let v1575 = &constructor_aarch64_store16(ctx, v1574, v1563, v1571);
                            let v1576 = constructor_side_effect(ctx, v1575);
                            // Rule at src/isa/aarch64/lower.isle line 2384.
                            return Some(v1576);
                        }
                        I32 => {
                            let v1569 = C::offset32_to_i32(ctx, v1564);
                            let v1577 = &constructor_amode(ctx, I32, v1565.1, v1569);
                            let v1571 = C::put_in_reg(ctx, v1565.0);
                            let v1578 = &constructor_aarch64_store32(ctx, v1577, v1563, v1571);
                            let v1579 = constructor_side_effect(ctx, v1578);
                            // Rule at src/isa/aarch64/lower.isle line 2388.
                            return Some(v1579);
                        }
                        I64 => {
                            let v1569 = C::offset32_to_i32(ctx, v1564);
                            let v1580 = &constructor_amode(ctx, I64, v1565.1, v1569);
                            let v1571 = C::put_in_reg(ctx, v1565.0);
                            let v1581 = &constructor_aarch64_store64(ctx, v1580, v1563, v1571);
                            let v1582 = constructor_side_effect(ctx, v1581);
                            // Rule at src/isa/aarch64/lower.isle line 2392.
                            return Some(v1582);
                        }
                        I128 => {
                            let v1569 = C::offset32_to_i32(ctx, v1564);
                            let v1589 = &constructor_pair_amode(ctx, v1565.1, v1569);
                            let v1590 = C::put_in_regs(ctx, v1565.0);
                            let v1591 = C::value_regs_get(ctx, v1590, 0x0);
                            let v1592 = C::put_in_regs(ctx, v1565.0);
                            let v1593 = C::value_regs_get(ctx, v1592, 0x1);
                            let v1594 =
                                &constructor_aarch64_storep64(ctx, v1589, v1563, v1591, v1593);
                            let v1595 = constructor_side_effect(ctx, v1594);
                            // Rule at src/isa/aarch64/lower.isle line 2423.
                            return Some(v1595);
                        }
                        R64 => {
                            let v1569 = C::offset32_to_i32(ctx, v1564);
                            let v1580 = &constructor_amode(ctx, I64, v1565.1, v1569);
                            let v1571 = C::put_in_reg(ctx, v1565.0);
                            let v1581 = &constructor_aarch64_store64(ctx, v1580, v1563, v1571);
                            let v1582 = constructor_side_effect(ctx, v1581);
                            // Rule at src/isa/aarch64/lower.isle line 2396.
                            return Some(v1582);
                        }
                        F32 => {
                            let v1569 = C::offset32_to_i32(ctx, v1564);
                            let v1583 = &constructor_amode(ctx, F32, v1565.1, v1569);
                            let v1571 = C::put_in_reg(ctx, v1565.0);
                            let v1584 = &constructor_aarch64_fpustore32(ctx, v1583, v1563, v1571);
                            let v1585 = constructor_side_effect(ctx, v1584);
                            // Rule at src/isa/aarch64/lower.isle line 2414.
                            return Some(v1585);
                        }
                        F64 => {
                            let v1569 = C::offset32_to_i32(ctx, v1564);
                            let v1586 = &constructor_amode(ctx, F64, v1565.1, v1569);
                            let v1571 = C::put_in_reg(ctx, v1565.0);
                            let v1587 = &constructor_aarch64_fpustore64(ctx, v1586, v1563, v1571);
                            let v1588 = constructor_side_effect(ctx, v1587);
                            // Rule at src/isa/aarch64/lower.isle line 2418.
                            return Some(v1588);
                        }
                        _ => {}
                    }
                    let v1596 = C::ty_vec64(ctx, v1568);
                    if let Some(v1597) = v1596 {
                        let v1569 = C::offset32_to_i32(ctx, v1564);
                        let v1586 = &constructor_amode(ctx, F64, v1565.1, v1569);
                        let v1571 = C::put_in_reg(ctx, v1565.0);
                        let v1587 = &constructor_aarch64_fpustore64(ctx, v1586, v1563, v1571);
                        let v1588 = constructor_side_effect(ctx, v1587);
                        // Rule at src/isa/aarch64/lower.isle line 2430.
                        return Some(v1588);
                    }
                    let v1603 = C::ty_dyn_vec64(ctx, v1568);
                    if let Some(v1604) = v1603 {
                        let v1569 = C::offset32_to_i32(ctx, v1564);
                        let v1586 = &constructor_amode(ctx, F64, v1565.1, v1569);
                        let v1571 = C::put_in_reg(ctx, v1565.0);
                        let v1587 = &constructor_aarch64_fpustore64(ctx, v1586, v1563, v1571);
                        let v1588 = constructor_side_effect(ctx, v1587);
                        // Rule at src/isa/aarch64/lower.isle line 2438.
                        return Some(v1588);
                    }
                    let v1598 = C::ty_vec128(ctx, v1568);
                    if let Some(v1599) = v1598 {
                        let v1569 = C::offset32_to_i32(ctx, v1564);
                        let v1600 = &constructor_amode(ctx, I8X16, v1565.1, v1569);
                        let v1571 = C::put_in_reg(ctx, v1565.0);
                        let v1601 = &constructor_aarch64_fpustore128(ctx, v1600, v1563, v1571);
                        let v1602 = constructor_side_effect(ctx, v1601);
                        // Rule at src/isa/aarch64/lower.isle line 2434.
                        return Some(v1602);
                    }
                    let v1605 = C::ty_dyn_vec128(ctx, v1568);
                    if let Some(v1606) = v1605 {
                        let v1569 = C::offset32_to_i32(ctx, v1564);
                        let v1600 = &constructor_amode(ctx, I8X16, v1565.1, v1569);
                        let v1571 = C::put_in_reg(ctx, v1565.0);
                        let v1601 = &constructor_aarch64_fpustore128(ctx, v1600, v1563, v1571);
                        let v1602 = constructor_side_effect(ctx, v1601);
                        // Rule at src/isa/aarch64/lower.isle line 2442.
                        return Some(v1602);
                    }
                }
                &Opcode::Istore8 => {
                    let v1565 = C::unpack_value_array_2(ctx, v1562);
                    let v1569 = C::offset32_to_i32(ctx, v1564);
                    let v1570 = &constructor_amode(ctx, I8, v1565.1, v1569);
                    let v1571 = C::put_in_reg(ctx, v1565.0);
                    let v1572 = &constructor_aarch64_store8(ctx, v1570, v1563, v1571);
                    let v1573 = constructor_side_effect(ctx, v1572);
                    // Rule at src/isa/aarch64/lower.isle line 2401.
                    return Some(v1573);
                }
                &Opcode::Istore16 => {
                    let v1565 = C::unpack_value_array_2(ctx, v1562);
                    let v1569 = C::offset32_to_i32(ctx, v1564);
                    let v1574 = &constructor_amode(ctx, I16, v1565.1, v1569);
                    let v1571 = C::put_in_reg(ctx, v1565.0);
                    let v1575 = &constructor_aarch64_store16(ctx, v1574, v1563, v1571);
                    let v1576 = constructor_side_effect(ctx, v1575);
                    // Rule at src/isa/aarch64/lower.isle line 2405.
                    return Some(v1576);
                }
                &Opcode::Istore32 => {
                    let v1565 = C::unpack_value_array_2(ctx, v1562);
                    let v1569 = C::offset32_to_i32(ctx, v1564);
                    let v1577 = &constructor_amode(ctx, I32, v1565.1, v1569);
                    let v1571 = C::put_in_reg(ctx, v1565.0);
                    let v1578 = &constructor_aarch64_store32(ctx, v1577, v1563, v1571);
                    let v1579 = constructor_side_effect(ctx, v1578);
                    // Rule at src/isa/aarch64/lower.isle line 2409.
                    return Some(v1579);
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v1293,
            args: ref v1294,
            flags: v1295,
        } => {
            if let &Opcode::AtomicStore = v1293 {
                let v1296 = C::unpack_value_array_2(ctx, v1294);
                let v1299 = C::value_type(ctx, v1296.0);
                let v1300 = C::valid_atomic_transaction(ctx, v1299);
                if let Some(v1301) = v1300 {
                    let v1302 = C::put_in_reg(ctx, v1296.0);
                    let v1303 = C::put_in_reg(ctx, v1296.1);
                    let v1304 = &constructor_store_release(ctx, v1301, v1295, v1302, v1303);
                    let v1305 = constructor_side_effect(ctx, v1304);
                    // Rule at src/isa/aarch64/lower.isle line 2045.
                    return Some(v1305);
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v455,
            args: ref v456,
        } => {
            match v455 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v457 = C::unpack_value_array_3(ctx, v456);
                        let v1170 = C::maybe_uextend(ctx, v457.0);
                        if let Some(v1171) = v1170 {
                            let v1172 = C::def_inst(ctx, v1171);
                            if let Some(v1173) = v1172 {
                                let v1174 = &C::inst_data(ctx, v1173);
                                match v1174 {
                                    &InstructionData::FloatCompare {
                                        opcode: ref v1188,
                                        args: ref v1189,
                                        cond: ref v1190,
                                    } => {
                                        if let &Opcode::Fcmp = v1188 {
                                            let v1195 = &C::fp_cond_code(ctx, v1190);
                                            let v1191 = C::unpack_value_array_2(ctx, v1189);
                                            let v1194 = C::value_type(ctx, v1191.0);
                                            let v1196 = &constructor_scalar_size(ctx, v1194);
                                            let v1197 = C::put_in_reg(ctx, v1191.0);
                                            let v1198 = C::put_in_reg(ctx, v1191.1);
                                            let v1199 =
                                                &constructor_fpu_cmp(ctx, v1196, v1197, v1198);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1200 = constructor_lower_select(
                                                ctx, v1199, v1195, v3, v457.1, v457.2,
                                            );
                                            let v1201 = C::output(ctx, v1200);
                                            // Rule at src/isa/aarch64/lower.isle line 1937.
                                            return Some(v1201);
                                        }
                                    }
                                    &InstructionData::IntCompare {
                                        opcode: ref v1175,
                                        args: ref v1176,
                                        cond: ref v1177,
                                    } => {
                                        if let &Opcode::Icmp = v1175 {
                                            let v1178 = C::unpack_value_array_2(ctx, v1176);
                                            let v1181 = C::value_type(ctx, v1178.0);
                                            let v1182 = &constructor_lower_icmp_into_flags(
                                                ctx, v1177, v1178.0, v1178.1, v1181,
                                            );
                                            let v1183 = &constructor_flags_and_cc_flags(ctx, v1182);
                                            let v1184 = &constructor_flags_and_cc_cc(ctx, v1182);
                                            let v1185 = &C::cond_code(ctx, v1184);
                                            let v3 = C::value_type(ctx, v2);
                                            let v1186 = constructor_lower_select(
                                                ctx, v1183, v1185, v3, v457.1, v457.2,
                                            );
                                            let v1187 = C::output(ctx, v1186);
                                            // Rule at src/isa/aarch64/lower.isle line 1924.
                                            return Some(v1187);
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v1202 = C::value_type(ctx, v457.0);
                        if v1202 == I8 {
                            let v1079 = C::put_in_reg(ctx, v457.0);
                            let v1204 = C::u64_into_imm_logic(ctx, I32, 0xFF);
                            let v1205 = &constructor_tst_imm(ctx, I32, v1079, v1204);
                            let v3 = C::value_type(ctx, v2);
                            let v1206 =
                                constructor_lower_select(ctx, v1205, &Cond::Ne, v3, v457.1, v457.2);
                            let v1207 = C::output(ctx, v1206);
                            // Rule at src/isa/aarch64/lower.isle line 1946.
                            return Some(v1207);
                        }
                        let v1208 = C::fits_in_32(ctx, v1202);
                        if let Some(v1209) = v1208 {
                            let v1210 = constructor_put_in_reg_zext32(ctx, v457.0);
                            let v1211 = C::zero_reg(ctx);
                            let v1212 = &constructor_cmp(ctx, &OperandSize::Size32, v1210, v1211);
                            let v3 = C::value_type(ctx, v2);
                            let v1213 =
                                constructor_lower_select(ctx, v1212, &Cond::Ne, v3, v457.1, v457.2);
                            let v1214 = C::output(ctx, v1213);
                            // Rule at src/isa/aarch64/lower.isle line 1952.
                            return Some(v1214);
                        }
                        let v1215 = C::fits_in_64(ctx, v1202);
                        if let Some(v1216) = v1215 {
                            let v1217 = constructor_put_in_reg_zext64(ctx, v457.0);
                            let v1211 = C::zero_reg(ctx);
                            let v1218 = &constructor_cmp(ctx, &OperandSize::Size64, v1217, v1211);
                            let v3 = C::value_type(ctx, v2);
                            let v1219 =
                                constructor_lower_select(ctx, v1218, &Cond::Ne, v3, v457.1, v457.2);
                            let v1220 = C::output(ctx, v1219);
                            // Rule at src/isa/aarch64/lower.isle line 1958.
                            return Some(v1220);
                        }
                        if v1202 == I128 {
                            let v1221 = C::put_in_regs(ctx, v457.0);
                            let v1222 = C::value_regs_get(ctx, v1221, 0x0);
                            let v1223 = C::value_regs_get(ctx, v1221, 0x1);
                            let v1224 = constructor_orr(ctx, I64, v1222, v1223);
                            let v882 = C::zero_reg(ctx);
                            let v1225 = &constructor_cmp(ctx, &OperandSize::Size64, v1224, v882);
                            let v3 = C::value_type(ctx, v2);
                            let v1226 =
                                constructor_lower_select(ctx, v1225, &Cond::Ne, v3, v457.1, v457.2);
                            let v1227 = C::output(ctx, v1226);
                            // Rule at src/isa/aarch64/lower.isle line 1964.
                            return Some(v1227);
                        }
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v457 = C::unpack_value_array_3(ctx, v456);
                        let v1170 = C::maybe_uextend(ctx, v457.0);
                        if let Some(v1171) = v1170 {
                            let v1172 = C::def_inst(ctx, v1171);
                            if let Some(v1173) = v1172 {
                                let v1174 = &C::inst_data(ctx, v1173);
                                if let &InstructionData::IntCompare {
                                    opcode: ref v1175,
                                    args: ref v1176,
                                    cond: ref v1177,
                                } = v1174
                                {
                                    if let &Opcode::Icmp = v1175 {
                                        let v1178 = C::unpack_value_array_2(ctx, v1176);
                                        let v1181 = C::value_type(ctx, v1178.0);
                                        let v1182 = &constructor_lower_icmp_into_flags(
                                            ctx, v1177, v1178.0, v1178.1, v1181,
                                        );
                                        let v1183 = &constructor_flags_and_cc_flags(ctx, v1182);
                                        let v1184 = &constructor_flags_and_cc_cc(ctx, v1182);
                                        let v1185 = &C::cond_code(ctx, v1184);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1186 = constructor_lower_select(
                                            ctx, v1183, v1185, v3, v457.1, v457.2,
                                        );
                                        let v1228 = &constructor_csdb(ctx);
                                        let v1229 = constructor_side_effect(ctx, v1228);
                                        let v1230 = C::output(ctx, v1186);
                                        // Rule at src/isa/aarch64/lower.isle line 1975.
                                        return Some(v1230);
                                    }
                                }
                            }
                        }
                        let v1202 = C::value_type(ctx, v457.0);
                        let v1215 = C::fits_in_64(ctx, v1202);
                        if let Some(v1216) = v1215 {
                            let v1217 = constructor_put_in_reg_zext64(ctx, v457.0);
                            let v1211 = C::zero_reg(ctx);
                            let v1218 = &constructor_cmp(ctx, &OperandSize::Size64, v1217, v1211);
                            let v3 = C::value_type(ctx, v2);
                            let v1219 =
                                constructor_lower_select(ctx, v1218, &Cond::Ne, v3, v457.1, v457.2);
                            let v1220 = C::output(ctx, v1219);
                            // Rule at src/isa/aarch64/lower.isle line 1989.
                            return Some(v1220);
                        }
                        if v1202 == I128 {
                            let v1221 = C::put_in_regs(ctx, v457.0);
                            let v1222 = C::value_regs_get(ctx, v1221, 0x0);
                            let v1223 = C::value_regs_get(ctx, v1221, 0x1);
                            let v1224 = constructor_orr(ctx, I64, v1222, v1223);
                            let v882 = C::zero_reg(ctx);
                            let v1225 = &constructor_cmp(ctx, &OperandSize::Size64, v1224, v882);
                            let v3 = C::value_type(ctx, v2);
                            let v1226 =
                                constructor_lower_select(ctx, v1225, &Cond::Ne, v3, v457.1, v457.2);
                            let v1227 = C::output(ctx, v1226);
                            // Rule at src/isa/aarch64/lower.isle line 1995.
                            return Some(v1227);
                        }
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v457 = C::unpack_value_array_3(ctx, v456);
                            let v1079 = C::put_in_reg(ctx, v457.0);
                            let v1080 = C::put_in_reg(ctx, v457.1);
                            let v1081 = C::put_in_reg(ctx, v457.2);
                            let v1082 = constructor_bsl(ctx, v570, v1079, v1080, v1081);
                            let v1083 = constructor_output_reg(ctx, v1082);
                            // Rule at src/isa/aarch64/lower.isle line 1836.
                            return Some(v1083);
                        }
                        let v1071 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1072) = v1071 {
                            let v457 = C::unpack_value_array_3(ctx, v456);
                            let v1073 = C::put_in_reg(ctx, v457.1);
                            let v463 = C::put_in_reg(ctx, v457.0);
                            let v1074 = constructor_and_reg(ctx, v3, v1073, v463);
                            let v465 = C::put_in_reg(ctx, v457.2);
                            let v1075 = C::put_in_reg(ctx, v457.0);
                            let v1076 = constructor_bic(ctx, v3, v465, v1075);
                            let v1077 = constructor_orr(ctx, v3, v1074, v1076);
                            let v1078 = constructor_output_reg(ctx, v1077);
                            // Rule at src/isa/aarch64/lower.isle line 1830.
                            return Some(v1078);
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v469 = &constructor_vector_size(ctx, v3);
                            let v457 = C::unpack_value_array_3(ctx, v456);
                            let v470 = constructor_lower_fmla(
                                ctx,
                                &VecALUModOp::Fmla,
                                v457.0,
                                v457.1,
                                v457.2,
                                v469,
                            );
                            let v471 = constructor_output_reg(ctx, v470);
                            // Rule at src/isa/aarch64/lower.isle line 520.
                            return Some(v471);
                        }
                        let v358 = C::ty_scalar_float(ctx, v3);
                        if let Some(v359) = v358 {
                            let v462 = &constructor_scalar_size(ctx, v359);
                            let v457 = C::unpack_value_array_3(ctx, v456);
                            let v463 = C::put_in_reg(ctx, v457.0);
                            let v464 = C::put_in_reg(ctx, v457.1);
                            let v465 = C::put_in_reg(ctx, v457.2);
                            let v466 =
                                constructor_fpu_rrrr(ctx, &FPUOp3::MAdd, v462, v463, v464, v465);
                            let v467 = constructor_output_reg(ctx, v466);
                            // Rule at src/isa/aarch64/lower.isle line 516.
                            return Some(v467);
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1649,
            args: ref v1650,
            imm: v1651,
        } => {
            if let &Opcode::Insertlane = v1649 {
                let v1652 = C::unpack_value_array_2(ctx, v1650);
                let v1656 = C::value_type(ctx, v1652.1);
                let v1657 = C::ty_int(ctx, v1656);
                if let Some(v1658) = v1657 {
                    let v1660 = C::put_in_reg(ctx, v1652.0);
                    let v1661 = C::put_in_reg(ctx, v1652.1);
                    let v1655 = C::value_type(ctx, v1652.0);
                    let v1662 = &constructor_vector_size(ctx, v1655);
                    let v1659 = C::u8_from_uimm8(ctx, v1651);
                    let v1663 = constructor_mov_to_vec(ctx, v1660, v1661, v1659, v1662);
                    let v1664 = constructor_output_reg(ctx, v1663);
                    // Rule at src/isa/aarch64/lower.isle line 2513.
                    return Some(v1664);
                }
                let v1665 = C::ty_scalar_float(ctx, v1656);
                if let Some(v1666) = v1665 {
                    let v1660 = C::put_in_reg(ctx, v1652.0);
                    let v1661 = C::put_in_reg(ctx, v1652.1);
                    let v1655 = C::value_type(ctx, v1652.0);
                    let v1662 = &constructor_vector_size(ctx, v1655);
                    let v1659 = C::u8_from_uimm8(ctx, v1651);
                    let v1667 = constructor_mov_vec_elem(ctx, v1660, v1661, v1659, 0x0, v1662);
                    let v1668 = constructor_output_reg(ctx, v1667);
                    // Rule at src/isa/aarch64/lower.isle line 2518.
                    return Some(v1668);
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v1166,
            code: ref v1167,
        } => {
            match v1166 {
                &Opcode::Trap => {
                    let v1168 = &constructor_udf(ctx, v1167);
                    let v1169 = constructor_side_effect(ctx, v1168);
                    // Rule at src/isa/aarch64/lower.isle line 1914.
                    return Some(v1169);
                }
                &Opcode::ResumableTrap => {
                    let v1168 = &constructor_udf(ctx, v1167);
                    let v1169 = constructor_side_effect(ctx, v1168);
                    // Rule at src/isa/aarch64/lower.isle line 1919.
                    return Some(v1169);
                }
                _ => {}
            }
        }
        &InstructionData::Unary {
            opcode: ref v230,
            arg: v231,
        } => {
            match v230 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v723 = C::def_inst(ctx, v231);
                        if let Some(v724) = v723 {
                            let v725 = &C::inst_data(ctx, v724);
                            match v725 {
                                &InstructionData::Load {
                                    opcode: ref v1277,
                                    arg: v1278,
                                    flags: v1279,
                                    offset: v1280,
                                } => {
                                    if let &Opcode::Load = v1277 {
                                        let v738 = C::is_sinkable_inst(ctx, v231);
                                        if let Some(v739) = v738 {
                                            let v3 = C::value_type(ctx, v2);
                                            let v1281 = C::lane_type(ctx, v3);
                                            let v1282 =
                                                constructor_sink_load_into_addr(ctx, v1281, v739);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v1283 = constructor_ld1r(ctx, v1282, v313, v1279);
                                            let v1284 = constructor_output_reg(ctx, v1283);
                                            // Rule at src/isa/aarch64/lower.isle line 2034.
                                            return Some(v1284);
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v1267,
                                    arg: v1268,
                                } => {
                                    if let &Opcode::Ireduce = v1267 {
                                        let v1269 = C::def_inst(ctx, v1268);
                                        if let Some(v1270) = v1269 {
                                            let v1271 = &C::inst_data(ctx, v1270);
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v1272,
                                                imm: v1273,
                                            } = v1271
                                            {
                                                if let &Opcode::Iconst = v1272 {
                                                    let v3 = C::value_type(ctx, v2);
                                                    let v469 = &constructor_vector_size(ctx, v3);
                                                    let v1274 = C::u64_from_imm64(ctx, v1273);
                                                    let v1275 =
                                                        constructor_splat_const(ctx, v1274, v469);
                                                    let v1276 = constructor_output_reg(ctx, v1275);
                                                    // Rule at src/isa/aarch64/lower.isle line 2031.
                                                    return Some(v1276);
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v1251,
                                    imm: v1252,
                                } => {
                                    if let &Opcode::F32const = v1251 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v469 = &constructor_vector_size(ctx, v3);
                                        let v1253 = C::u32_from_ieee32(ctx, v1252);
                                        let v1254 = C::u32_as_u64(ctx, v1253);
                                        let v1255 = constructor_splat_const(ctx, v1254, v469);
                                        let v1256 = constructor_output_reg(ctx, v1255);
                                        // Rule at src/isa/aarch64/lower.isle line 2022.
                                        return Some(v1256);
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v1257,
                                    imm: v1258,
                                } => {
                                    if let &Opcode::F64const = v1257 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v469 = &constructor_vector_size(ctx, v3);
                                        let v1259 = C::u64_from_ieee64(ctx, v1258);
                                        let v1260 = constructor_splat_const(ctx, v1259, v469);
                                        let v1261 = constructor_output_reg(ctx, v1260);
                                        // Rule at src/isa/aarch64/lower.isle line 2025.
                                        return Some(v1261);
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v1262,
                                    imm: v1263,
                                } => {
                                    if let &Opcode::Iconst = v1262 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v469 = &constructor_vector_size(ctx, v3);
                                        let v1264 = C::u64_from_imm64(ctx, v1263);
                                        let v1265 = constructor_splat_const(ctx, v1264, v469);
                                        let v1266 = constructor_output_reg(ctx, v1265);
                                        // Rule at src/isa/aarch64/lower.isle line 2028.
                                        return Some(v1266);
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v232 = C::value_type(ctx, v231);
                        let v1243 = C::ty_int_ref_scalar_64(ctx, v232);
                        if let Some(v1244) = v1243 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v3 = C::value_type(ctx, v2);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v1245 = constructor_vec_dup(ctx, v241, v313);
                            let v1246 = constructor_output_reg(ctx, v1245);
                            // Rule at src/isa/aarch64/lower.isle line 2015.
                            return Some(v1246);
                        }
                        let v1247 = C::ty_scalar_float(ctx, v232);
                        if let Some(v1248) = v1247 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v3 = C::value_type(ctx, v2);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v1249 = constructor_vec_dup_from_fpu(ctx, v241, v313, 0x0);
                            let v1250 = constructor_output_reg(ctx, v1249);
                            // Rule at src/isa/aarch64/lower.isle line 2019.
                            return Some(v1250);
                        }
                    }
                }
                &Opcode::SetPinnedReg => {
                    let v241 = C::put_in_reg(ctx, v231);
                    let v1610 = &constructor_write_pinned_reg(ctx, v241);
                    let v1611 = constructor_side_effect(ctx, v1610);
                    // Rule at src/isa/aarch64/lower.isle line 2452.
                    return Some(v1611);
                }
                &Opcode::VanyTrue => {
                    let v241 = C::put_in_reg(ctx, v231);
                    let v232 = C::value_type(ctx, v231);
                    let v294 = &constructor_vanytrue(ctx, v241, v232);
                    let v295 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                    let v296 = constructor_with_flags(ctx, v294, v295);
                    let v297 = C::output(ctx, v296);
                    // Rule at src/isa/aarch64/lower.isle line 315.
                    return Some(v297);
                }
                &Opcode::VallTrue => {
                    let v232 = C::value_type(ctx, v231);
                    let v255 = C::multi_lane(ctx, v232);
                    if let Some(v256) = v255 {
                        match v256.0 {
                            0x20 => {
                                if v256.1 == 0x2 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v267 = constructor_mov_from_vec(
                                        ctx,
                                        v241,
                                        0x0,
                                        &ScalarSize::Size64,
                                    );
                                    let v269 = C::zero_reg(ctx);
                                    let v271 = &constructor_cmp_rr_shift(
                                        ctx,
                                        &OperandSize::Size64,
                                        v269,
                                        v267,
                                        0x20,
                                    );
                                    let v273 = C::u8_into_uimm5(ctx, 0x0);
                                    let v276 = C::nzcv(ctx, false, true, false, false);
                                    let v278 = &constructor_ccmp_imm(
                                        ctx,
                                        &OperandSize::Size32,
                                        v267,
                                        v273,
                                        v276,
                                        &Cond::Ne,
                                    );
                                    let v279 = constructor_with_flags(ctx, v271, v278);
                                    let v280 = C::output(ctx, v279);
                                    // Rule at src/isa/aarch64/lower.isle line 289.
                                    return Some(v280);
                                }
                            }
                            0x40 => {
                                if v256.1 == 0x2 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v259 = constructor_cmeq0(ctx, v241, &VectorSize::Size64x2);
                                    let v260 =
                                        constructor_addp(ctx, v259, v259, &VectorSize::Size64x2);
                                    let v261 =
                                        &constructor_fpu_cmp(ctx, &ScalarSize::Size64, v260, v260);
                                    let v263 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                                    let v264 = constructor_with_flags(ctx, v261, v263);
                                    let v265 = C::output(ctx, v264);
                                    // Rule at src/isa/aarch64/lower.isle line 283.
                                    return Some(v265);
                                }
                            }
                            _ => {}
                        }
                    }
                    let v281 = C::lane_fits_in_32(ctx, v232);
                    if let Some(v282) = v281 {
                        let v283 = C::not_vec32x2(ctx, v282);
                        if let Some(v284) = v283 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v286 = &constructor_vector_size(ctx, v282);
                            let v287 = constructor_vec_lanes(ctx, &VecLanesOp::Uminv, v241, v286);
                            let v288 =
                                constructor_mov_from_vec(ctx, v287, 0x0, &ScalarSize::Size64);
                            let v289 = C::u8_into_imm12(ctx, 0x0);
                            let v290 = &constructor_cmp_imm(ctx, &OperandSize::Size64, v288, v289);
                            let v291 = &constructor_materialize_bool_result(ctx, &Cond::Ne);
                            let v292 = constructor_with_flags(ctx, v290, v291);
                            let v293 = C::output(ctx, v292);
                            // Rule at src/isa/aarch64/lower.isle line 306.
                            return Some(v293);
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v232 = C::value_type(ctx, v231);
                    match v232 {
                        I8X16 => {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1675 =
                                constructor_sshr_vec_imm(ctx, v241, 0x7, &VectorSize::Size8x16);
                            let v1677 =
                                constructor_constant_f128(ctx, 0x80402010080402018040201008040201);
                            let v1678 =
                                constructor_and_vec(ctx, v1675, v1677, &VectorSize::Size8x16);
                            let v1680 = constructor_vec_extract(ctx, v1678, v1678, 0x8);
                            let v1681 = constructor_zip1(ctx, v1678, v1680, &VectorSize::Size8x16);
                            let v1682 = constructor_addv(ctx, v1681, &VectorSize::Size16x8);
                            let v1683 =
                                constructor_mov_from_vec(ctx, v1682, 0x0, &ScalarSize::Size16);
                            let v1684 = constructor_output_reg(ctx, v1683);
                            // Rule at src/isa/aarch64/lower.isle line 2539.
                            return Some(v1684);
                        }
                        I16X8 => {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1686 =
                                constructor_sshr_vec_imm(ctx, v241, 0xF, &VectorSize::Size16x8);
                            let v1688 =
                                constructor_constant_f128(ctx, 0x800040002000100008000400020001);
                            let v1689 =
                                constructor_and_vec(ctx, v1686, v1688, &VectorSize::Size16x8);
                            let v1690 = constructor_addv(ctx, v1689, &VectorSize::Size16x8);
                            let v1691 =
                                constructor_mov_from_vec(ctx, v1690, 0x0, &ScalarSize::Size16);
                            let v1692 = constructor_output_reg(ctx, v1691);
                            // Rule at src/isa/aarch64/lower.isle line 2563.
                            return Some(v1692);
                        }
                        I32X4 => {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1694 =
                                constructor_sshr_vec_imm(ctx, v241, 0x1F, &VectorSize::Size32x4);
                            let v1696 = constructor_constant_f128(ctx, 0x8000000040000000200000001);
                            let v1697 =
                                constructor_and_vec(ctx, v1694, v1696, &VectorSize::Size32x4);
                            let v1698 = constructor_addv(ctx, v1697, &VectorSize::Size32x4);
                            let v1699 =
                                constructor_mov_from_vec(ctx, v1698, 0x0, &ScalarSize::Size32);
                            let v1700 = constructor_output_reg(ctx, v1699);
                            // Rule at src/isa/aarch64/lower.isle line 2576.
                            return Some(v1700);
                        }
                        I64X2 => {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1701 =
                                constructor_mov_from_vec(ctx, v241, 0x1, &ScalarSize::Size64);
                            let v1702 = C::put_in_reg(ctx, v231);
                            let v1703 =
                                constructor_mov_from_vec(ctx, v1702, 0x0, &ScalarSize::Size64);
                            let v765 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v1704 = constructor_lsr_imm(ctx, I64, v1701, v765);
                            let v1015 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v1705 = constructor_lsr_imm(ctx, I64, v1703, v1015);
                            let v1706 = C::lshl_from_u64(ctx, I64, 0x1);
                            let v1707 = v1706?;
                            let v1708 = constructor_add_shift(ctx, I64, v1705, v1704, v1707);
                            let v1709 = constructor_output_reg(ctx, v1708);
                            // Rule at src/isa/aarch64/lower.isle line 2589.
                            return Some(v1709);
                        }
                        _ => {}
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v584 = constructor_value_regs_zero(ctx);
                            let v585 = C::put_in_regs(ctx, v231);
                            let v586 = constructor_sub_i128(ctx, v584, v585);
                            let v587 = C::output(ctx, v586);
                            // Rule at src/isa/aarch64/lower.isle line 751.
                            return Some(v587);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v580 = C::zero_reg(ctx);
                            let v581 = C::put_in_reg(ctx, v231);
                            let v582 = constructor_sub(ctx, v28, v580, v581);
                            let v583 = constructor_output_reg(ctx, v582);
                            // Rule at src/isa/aarch64/lower.isle line 747.
                            return Some(v583);
                        }
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v588 = &constructor_vector_size(ctx, v570);
                            let v589 = constructor_neg(ctx, v241, v588);
                            let v590 = constructor_output_reg(ctx, v589);
                            // Rule at src/isa/aarch64/lower.isle line 755.
                            return Some(v590);
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v316 = constructor_abs(ctx, &OperandSize::Size64, v241);
                            let v317 = constructor_output_reg(ctx, v316);
                            // Rule at src/isa/aarch64/lower.isle line 345.
                            return Some(v317);
                        }
                        let v318 = C::fits_in_32(ctx, v3);
                        if let Some(v319) = v318 {
                            let v320 = constructor_put_in_reg_sext32(ctx, v231);
                            let v321 = constructor_abs(ctx, &OperandSize::Size32, v320);
                            let v322 = constructor_output_reg(ctx, v321);
                            // Rule at src/isa/aarch64/lower.isle line 348.
                            return Some(v322);
                        }
                        if v3 == I128 {
                            let v233 = C::put_in_regs(ctx, v231);
                            let v234 = C::value_regs_get(ctx, v233, 0x0);
                            let v323 = C::value_regs_get(ctx, v233, 0x1);
                            let v325 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v326 = constructor_asr_imm(ctx, I64, v323, v325);
                            let v327 = constructor_eor(ctx, I64, v323, v326);
                            let v328 = constructor_eor(ctx, I64, v234, v326);
                            let v329 = &constructor_sub_with_flags_paired(ctx, I64, v328, v326);
                            let v330 = &constructor_sbc_paired(ctx, I64, v327, v326);
                            let v331 = constructor_with_flags(ctx, v329, v330);
                            let v332 = C::output(ctx, v331);
                            // Rule at src/isa/aarch64/lower.isle line 358.
                            return Some(v332);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v314 = constructor_vec_abs(ctx, v241, v313);
                            let v315 = constructor_output_reg(ctx, v314);
                            // Rule at src/isa/aarch64/lower.isle line 342.
                            return Some(v315);
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v723 = C::def_inst(ctx, v231);
                        if let Some(v724) = v723 {
                            let v725 = &C::inst_data(ctx, v724);
                            if let &InstructionData::Binary {
                                opcode: ref v776,
                                args: ref v777,
                            } = v725
                            {
                                match v776 {
                                    &Opcode::Bxor => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v778 = C::unpack_value_array_2(ctx, v777);
                                            let v802 = constructor_i128_alu_bitop(
                                                ctx,
                                                &ALUOp::EorNot,
                                                I64,
                                                v778.0,
                                                v778.1,
                                            );
                                            let v803 = C::output(ctx, v802);
                                            // Rule at src/isa/aarch64/lower.isle line 1223.
                                            return Some(v803);
                                        }
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v778 = C::unpack_value_array_2(ctx, v777);
                                            let v800 = constructor_alu_rs_imm_logic(
                                                ctx,
                                                &ALUOp::EorNot,
                                                v28,
                                                v778.0,
                                                v778.1,
                                            );
                                            let v801 = constructor_output_reg(ctx, v800);
                                            // Rule at src/isa/aarch64/lower.isle line 1221.
                                            return Some(v801);
                                        }
                                    }
                                    &Opcode::Ishl => {
                                        let v3 = C::value_type(ctx, v2);
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v778 = C::unpack_value_array_2(ctx, v777);
                                            let v781 = C::def_inst(ctx, v778.1);
                                            if let Some(v782) = v781 {
                                                let v783 = &C::inst_data(ctx, v782);
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v784,
                                                    imm: v785,
                                                } = v783
                                                {
                                                    if let &Opcode::Iconst = v784 {
                                                        let v786 =
                                                            C::lshl_from_imm64(ctx, v28, v785);
                                                        if let Some(v787) = v786 {
                                                            let v580 = C::zero_reg(ctx);
                                                            let v788 = C::put_in_reg(ctx, v778.0);
                                                            let v789 = constructor_orr_not_shift(
                                                                ctx, v28, v580, v788, v787,
                                                            );
                                                            let v790 =
                                                                constructor_output_reg(ctx, v789);
                                                            // Rule at src/isa/aarch64/lower.isle line 1202.
                                                            return Some(v790);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v233 = C::put_in_regs(ctx, v231);
                            let v234 = C::value_regs_get(ctx, v233, 0x0);
                            let v323 = C::value_regs_get(ctx, v233, 0x1);
                            let v791 = C::zero_reg(ctx);
                            let v792 = constructor_orr_not(ctx, I64, v791, v234);
                            let v793 = C::zero_reg(ctx);
                            let v794 = constructor_orr_not(ctx, I64, v793, v323);
                            let v795 = C::value_regs(ctx, v792, v794);
                            let v796 = C::output(ctx, v795);
                            // Rule at src/isa/aarch64/lower.isle line 1208.
                            return Some(v796);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v580 = C::zero_reg(ctx);
                            let v581 = C::put_in_reg(ctx, v231);
                            let v774 = constructor_orr_not(ctx, v28, v580, v581);
                            let v775 = constructor_output_reg(ctx, v774);
                            // Rule at src/isa/aarch64/lower.isle line 1197.
                            return Some(v775);
                        }
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v588 = &constructor_vector_size(ctx, v570);
                            let v797 = constructor_not(ctx, v241, v588);
                            let v798 = constructor_output_reg(ctx, v797);
                            // Rule at src/isa/aarch64/lower.isle line 1217.
                            return Some(v798);
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v967 = constructor_rbit(ctx, I32, v241);
                                let v969 = C::imm_shift_from_u8(ctx, 0x18);
                                let v970 = constructor_lsr_imm(ctx, I32, v967, v969);
                                let v971 = constructor_output_reg(ctx, v970);
                                // Rule at src/isa/aarch64/lower.isle line 1652.
                                return Some(v971);
                            }
                            I16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v967 = constructor_rbit(ctx, I32, v241);
                                let v973 = C::imm_shift_from_u8(ctx, 0x10);
                                let v974 = constructor_lsr_imm(ctx, I32, v967, v973);
                                let v975 = constructor_output_reg(ctx, v974);
                                // Rule at src/isa/aarch64/lower.isle line 1658.
                                return Some(v975);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v234 = C::value_regs_get(ctx, v233, 0x0);
                                let v976 = constructor_rbit(ctx, I64, v234);
                                let v236 = C::value_regs_get(ctx, v233, 0x1);
                                let v977 = constructor_rbit(ctx, I64, v236);
                                let v978 = C::value_regs(ctx, v977, v976);
                                let v979 = C::output(ctx, v978);
                                // Rule at src/isa/aarch64/lower.isle line 1661.
                                return Some(v979);
                            }
                            _ => {}
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v980 = constructor_rbit(ctx, v3, v241);
                        let v981 = constructor_output_reg(ctx, v980);
                        // Rule at src/isa/aarch64/lower.isle line 1667.
                        return Some(v981);
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v252 = constructor_put_in_reg_zext32(ctx, v231);
                                let v982 = constructor_a64_clz(ctx, I32, v252);
                                let v983 = C::u8_into_imm12(ctx, 0x18);
                                let v984 = constructor_sub_imm(ctx, I32, v982, v983);
                                let v985 = constructor_output_reg(ctx, v984);
                                // Rule at src/isa/aarch64/lower.isle line 1673.
                                return Some(v985);
                            }
                            I16 => {
                                let v252 = constructor_put_in_reg_zext32(ctx, v231);
                                let v982 = constructor_a64_clz(ctx, I32, v252);
                                let v986 = C::u8_into_imm12(ctx, 0x10);
                                let v987 = constructor_sub_imm(ctx, I32, v982, v986);
                                let v988 = constructor_output_reg(ctx, v987);
                                // Rule at src/isa/aarch64/lower.isle line 1676.
                                return Some(v988);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v989 = constructor_lower_clz128(ctx, v233);
                                let v990 = C::output(ctx, v989);
                                // Rule at src/isa/aarch64/lower.isle line 1679.
                                return Some(v990);
                            }
                            _ => {}
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v991 = constructor_a64_clz(ctx, v3, v241);
                        let v992 = constructor_output_reg(ctx, v991);
                        // Rule at src/isa/aarch64/lower.isle line 1682.
                        return Some(v992);
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v320 = constructor_put_in_reg_sext32(ctx, v231);
                                let v1007 = constructor_a64_cls(ctx, I32, v320);
                                let v983 = C::u8_into_imm12(ctx, 0x18);
                                let v1008 = constructor_sub_imm(ctx, I32, v1007, v983);
                                let v1009 = constructor_output_reg(ctx, v1008);
                                // Rule at src/isa/aarch64/lower.isle line 1720.
                                return Some(v1009);
                            }
                            I16 => {
                                let v320 = constructor_put_in_reg_sext32(ctx, v231);
                                let v1007 = constructor_a64_cls(ctx, I32, v320);
                                let v986 = C::u8_into_imm12(ctx, 0x10);
                                let v1010 = constructor_sub_imm(ctx, I32, v1007, v986);
                                let v1011 = constructor_output_reg(ctx, v1010);
                                // Rule at src/isa/aarch64/lower.isle line 1723.
                                return Some(v1011);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v234 = C::value_regs_get(ctx, v233, 0x0);
                                let v323 = C::value_regs_get(ctx, v233, 0x1);
                                let v1012 = constructor_a64_cls(ctx, I64, v234);
                                let v1013 = constructor_a64_cls(ctx, I64, v323);
                                let v1014 = constructor_eon(ctx, I64, v323, v234);
                                let v1015 = C::imm_shift_from_u8(ctx, 0x3F);
                                let v1016 = constructor_lsr_imm(ctx, I64, v1014, v1015);
                                let v1017 = constructor_madd(ctx, I64, v1012, v1016, v1016);
                                let v1018 = C::u8_into_imm12(ctx, 0x3F);
                                let v1019 = &constructor_cmp64_imm(ctx, v1013, v1018);
                                let v1020 = C::zero_reg(ctx);
                                let v1021 = &constructor_csel(ctx, &Cond::Eq, v1017, v1020);
                                let v1022 = constructor_with_flags_reg(ctx, v1019, v1021);
                                let v1023 = constructor_add(ctx, I64, v1022, v1013);
                                let v1024 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                let v1025 = C::value_regs(ctx, v1023, v1024);
                                let v1026 = C::output(ctx, v1025);
                                // Rule at src/isa/aarch64/lower.isle line 1735.
                                return Some(v1026);
                            }
                            _ => {}
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v1027 = constructor_a64_cls(ctx, v3, v241);
                        let v1028 = constructor_output_reg(ctx, v1027);
                        // Rule at src/isa/aarch64/lower.isle line 1749.
                        return Some(v1028);
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v967 = constructor_rbit(ctx, I32, v241);
                                let v994 = C::u64_into_imm_logic(ctx, I32, 0x800000);
                                let v995 = constructor_orr_imm(ctx, I32, v967, v994);
                                let v996 = constructor_a64_clz(ctx, I32, v995);
                                let v997 = constructor_output_reg(ctx, v996);
                                // Rule at src/isa/aarch64/lower.isle line 1703.
                                return Some(v997);
                            }
                            I16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v967 = constructor_rbit(ctx, I32, v241);
                                let v999 = C::u64_into_imm_logic(ctx, I32, 0x8000);
                                let v1000 = constructor_orr_imm(ctx, I32, v967, v999);
                                let v1001 = constructor_a64_clz(ctx, I32, v1000);
                                let v1002 = constructor_output_reg(ctx, v1001);
                                // Rule at src/isa/aarch64/lower.isle line 1706.
                                return Some(v1002);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v234 = C::value_regs_get(ctx, v233, 0x0);
                                let v976 = constructor_rbit(ctx, I64, v234);
                                let v236 = C::value_regs_get(ctx, v233, 0x1);
                                let v977 = constructor_rbit(ctx, I64, v236);
                                let v978 = C::value_regs(ctx, v977, v976);
                                let v1003 = constructor_lower_clz128(ctx, v978);
                                let v1004 = C::output(ctx, v1003);
                                // Rule at src/isa/aarch64/lower.isle line 1709.
                                return Some(v1004);
                            }
                            _ => {}
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v980 = constructor_rbit(ctx, v3, v241);
                        let v1005 = constructor_a64_clz(ctx, v3, v980);
                        let v1006 = constructor_output_reg(ctx, v1005);
                        // Rule at src/isa/aarch64/lower.isle line 1715.
                        return Some(v1006);
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1030 = constructor_a64_rev16(ctx, I16, v241);
                                let v1031 = constructor_output_reg(ctx, v1030);
                                // Rule at src/isa/aarch64/lower.isle line 1754.
                                return Some(v1031);
                            }
                            I32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1032 = constructor_a64_rev32(ctx, I32, v241);
                                let v1033 = constructor_output_reg(ctx, v1032);
                                // Rule at src/isa/aarch64/lower.isle line 1757.
                                return Some(v1033);
                            }
                            I64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1034 = constructor_a64_rev64(ctx, I64, v241);
                                let v1035 = constructor_output_reg(ctx, v1034);
                                // Rule at src/isa/aarch64/lower.isle line 1760.
                                return Some(v1035);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v1036 = C::value_regs_get(ctx, v233, 0x1);
                                let v1037 = constructor_a64_rev64(ctx, I64, v1036);
                                let v1038 = C::put_in_regs(ctx, v231);
                                let v1039 = C::value_regs_get(ctx, v1038, 0x0);
                                let v1040 = constructor_a64_rev64(ctx, I64, v1039);
                                let v1041 = C::value_regs(ctx, v1037, v1040);
                                let v1042 = C::output(ctx, v1041);
                                // Rule at src/isa/aarch64/lower.isle line 1763.
                                return Some(v1042);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1045 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size32);
                                let v1047 = constructor_vec_cnt(ctx, v1045, &VectorSize::Size8x8);
                                let v1049 =
                                    constructor_mov_from_vec(ctx, v1047, 0x0, &ScalarSize::Size8);
                                let v1050 = constructor_output_reg(ctx, v1049);
                                // Rule at src/isa/aarch64/lower.isle line 1793.
                                return Some(v1050);
                            }
                            I16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1045 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size32);
                                let v1047 = constructor_vec_cnt(ctx, v1045, &VectorSize::Size8x8);
                                let v1051 =
                                    constructor_addp(ctx, v1047, v1047, &VectorSize::Size8x8);
                                let v1052 =
                                    constructor_mov_from_vec(ctx, v1051, 0x0, &ScalarSize::Size8);
                                let v1053 = constructor_output_reg(ctx, v1052);
                                // Rule at src/isa/aarch64/lower.isle line 1799.
                                return Some(v1053);
                            }
                            I32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1045 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size32);
                                let v1047 = constructor_vec_cnt(ctx, v1045, &VectorSize::Size8x8);
                                let v1054 = constructor_addv(ctx, v1047, &VectorSize::Size8x8);
                                let v1055 =
                                    constructor_mov_from_vec(ctx, v1054, 0x0, &ScalarSize::Size8);
                                let v1056 = constructor_output_reg(ctx, v1055);
                                // Rule at src/isa/aarch64/lower.isle line 1805.
                                return Some(v1056);
                            }
                            I64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v248 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size64);
                                let v1057 = constructor_vec_cnt(ctx, v248, &VectorSize::Size8x8);
                                let v1058 = constructor_addv(ctx, v1057, &VectorSize::Size8x8);
                                let v1059 =
                                    constructor_mov_from_vec(ctx, v1058, 0x0, &ScalarSize::Size8);
                                let v1060 = constructor_output_reg(ctx, v1059);
                                // Rule at src/isa/aarch64/lower.isle line 1811.
                                return Some(v1060);
                            }
                            I128 => {
                                let v233 = C::put_in_regs(ctx, v231);
                                let v234 = C::value_regs_get(ctx, v233, 0x0);
                                let v1061 = constructor_mov_to_fpu(ctx, v234, &ScalarSize::Size64);
                                let v236 = C::value_regs_get(ctx, v233, 0x1);
                                let v1062 = constructor_mov_to_vec(
                                    ctx,
                                    v1061,
                                    v236,
                                    0x1,
                                    &VectorSize::Size64x2,
                                );
                                let v1063 = constructor_vec_cnt(ctx, v1062, &VectorSize::Size8x16);
                                let v1064 = constructor_addv(ctx, v1063, &VectorSize::Size8x16);
                                let v1065 =
                                    constructor_mov_from_vec(ctx, v1064, 0x0, &ScalarSize::Size8);
                                let v1066 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                let v1067 = C::value_regs(ctx, v1065, v1066);
                                let v1068 = C::output(ctx, v1067);
                                // Rule at src/isa/aarch64/lower.isle line 1817.
                                return Some(v1068);
                            }
                            I8X16 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v1069 = constructor_vec_cnt(ctx, v241, &VectorSize::Size8x16);
                                let v1070 = constructor_output_reg(ctx, v1069);
                                // Rule at src/isa/aarch64/lower.isle line 1825.
                                return Some(v1070);
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v358 = C::ty_scalar_float(ctx, v3);
                        if let Some(v359) = v358 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v398 = &constructor_scalar_size(ctx, v359);
                            let v399 = constructor_fpu_rr(ctx, &FPUOp1::Sqrt, v241, v398);
                            let v400 = constructor_output_reg(ctx, v399);
                            // Rule at src/isa/aarch64/lower.isle line 441.
                            return Some(v400);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v395 = constructor_vec_misc(ctx, &VecMisc2::Fsqrt, v241, v313);
                            let v396 = constructor_output_reg(ctx, v395);
                            // Rule at src/isa/aarch64/lower.isle line 438.
                            return Some(v396);
                        }
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v358 = C::ty_scalar_float(ctx, v3);
                        if let Some(v359) = v358 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v398 = &constructor_scalar_size(ctx, v359);
                            let v405 = constructor_fpu_rr(ctx, &FPUOp1::Neg, v241, v398);
                            let v406 = constructor_output_reg(ctx, v405);
                            // Rule at src/isa/aarch64/lower.isle line 449.
                            return Some(v406);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v402 = constructor_vec_misc(ctx, &VecMisc2::Fneg, v241, v313);
                            let v403 = constructor_output_reg(ctx, v402);
                            // Rule at src/isa/aarch64/lower.isle line 446.
                            return Some(v403);
                        }
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v358 = C::ty_scalar_float(ctx, v3);
                        if let Some(v359) = v358 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v398 = &constructor_scalar_size(ctx, v359);
                            let v411 = constructor_fpu_rr(ctx, &FPUOp1::Abs, v241, v398);
                            let v412 = constructor_output_reg(ctx, v411);
                            // Rule at src/isa/aarch64/lower.isle line 457.
                            return Some(v412);
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v408 = constructor_vec_misc(ctx, &VecMisc2::Fabs, v241, v313);
                            let v409 = constructor_output_reg(ctx, v408);
                            // Rule at src/isa/aarch64/lower.isle line 454.
                            return Some(v409);
                        }
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v423 = constructor_fpu_round(ctx, &FpuRoundMode::Plus32, v241);
                                let v424 = constructor_output_reg(ctx, v423);
                                // Rule at src/isa/aarch64/lower.isle line 475.
                                return Some(v424);
                            }
                            F64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v426 = constructor_fpu_round(ctx, &FpuRoundMode::Plus64, v241);
                                let v427 = constructor_output_reg(ctx, v426);
                                // Rule at src/isa/aarch64/lower.isle line 478.
                                return Some(v427);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v420 = constructor_vec_misc(ctx, &VecMisc2::Frintp, v241, v313);
                            let v421 = constructor_output_reg(ctx, v420);
                            // Rule at src/isa/aarch64/lower.isle line 472.
                            return Some(v421);
                        }
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v432 = constructor_fpu_round(ctx, &FpuRoundMode::Minus32, v241);
                                let v433 = constructor_output_reg(ctx, v432);
                                // Rule at src/isa/aarch64/lower.isle line 486.
                                return Some(v433);
                            }
                            F64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v435 = constructor_fpu_round(ctx, &FpuRoundMode::Minus64, v241);
                                let v436 = constructor_output_reg(ctx, v435);
                                // Rule at src/isa/aarch64/lower.isle line 489.
                                return Some(v436);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v429 = constructor_vec_misc(ctx, &VecMisc2::Frintm, v241, v313);
                            let v430 = constructor_output_reg(ctx, v429);
                            // Rule at src/isa/aarch64/lower.isle line 483.
                            return Some(v430);
                        }
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v441 = constructor_fpu_round(ctx, &FpuRoundMode::Zero32, v241);
                                let v442 = constructor_output_reg(ctx, v441);
                                // Rule at src/isa/aarch64/lower.isle line 497.
                                return Some(v442);
                            }
                            F64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v444 = constructor_fpu_round(ctx, &FpuRoundMode::Zero64, v241);
                                let v445 = constructor_output_reg(ctx, v444);
                                // Rule at src/isa/aarch64/lower.isle line 500.
                                return Some(v445);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v438 = constructor_vec_misc(ctx, &VecMisc2::Frintz, v241, v313);
                            let v439 = constructor_output_reg(ctx, v438);
                            // Rule at src/isa/aarch64/lower.isle line 494.
                            return Some(v439);
                        }
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v450 =
                                    constructor_fpu_round(ctx, &FpuRoundMode::Nearest32, v241);
                                let v451 = constructor_output_reg(ctx, v450);
                                // Rule at src/isa/aarch64/lower.isle line 508.
                                return Some(v451);
                            }
                            F64 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v453 =
                                    constructor_fpu_round(ctx, &FpuRoundMode::Nearest64, v241);
                                let v454 = constructor_output_reg(ctx, v453);
                                // Rule at src/isa/aarch64/lower.isle line 511.
                                return Some(v454);
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v313 = &constructor_vector_size(ctx, v3);
                            let v447 = constructor_vec_misc(ctx, &VecMisc2::Frintn, v241, v313);
                            let v448 = constructor_output_reg(ctx, v447);
                            // Rule at src/isa/aarch64/lower.isle line 505.
                            return Some(v448);
                        }
                    }
                }
                &Opcode::IsNull => {
                    let v232 = C::value_type(ctx, v231);
                    let v1445 = &constructor_operand_size(ctx, v232);
                    let v581 = C::put_in_reg(ctx, v231);
                    let v1446 = C::u8_into_imm12(ctx, 0x0);
                    let v1447 = &constructor_cmp_imm(ctx, v1445, v581, v1446);
                    let v263 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                    let v1448 = constructor_with_flags(ctx, v1447, v263);
                    let v1449 = C::output(ctx, v1448);
                    // Rule at src/isa/aarch64/lower.isle line 2221.
                    return Some(v1449);
                }
                &Opcode::IsInvalid => {
                    let v232 = C::value_type(ctx, v231);
                    let v1445 = &constructor_operand_size(ctx, v232);
                    let v581 = C::put_in_reg(ctx, v231);
                    let v1450 = C::u8_into_imm12(ctx, 0x1);
                    let v1451 = &constructor_cmn_imm(ctx, v1445, v581, v1450);
                    let v263 = &constructor_materialize_bool_result(ctx, &Cond::Eq);
                    let v1452 = constructor_with_flags(ctx, v1451, v263);
                    let v1453 = C::output(ctx, v1452);
                    // Rule at src/isa/aarch64/lower.isle line 2227.
                    return Some(v1453);
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32X4 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v243 = constructor_fpu_extend(ctx, v241, &ScalarSize::Size32);
                                let v244 = constructor_output_reg(ctx, v243);
                                // Rule at src/isa/aarch64/lower.isle line 260.
                                return Some(v244);
                            }
                            F64X2 => {
                                let v241 = C::put_in_reg(ctx, v231);
                                let v246 = constructor_fpu_extend(ctx, v241, &ScalarSize::Size64);
                                let v247 = constructor_output_reg(ctx, v246);
                                // Rule at src/isa/aarch64/lower.isle line 263.
                                return Some(v247);
                            }
                            _ => {}
                        }
                    }
                    let v232 = C::value_type(ctx, v231);
                    if v232 == I64 {
                        let v241 = C::put_in_reg(ctx, v231);
                        let v248 = constructor_mov_to_fpu(ctx, v241, &ScalarSize::Size64);
                        let v249 = constructor_output_reg(ctx, v248);
                        // Rule at src/isa/aarch64/lower.isle line 266.
                        return Some(v249);
                    }
                    let v250 = C::int_fits_in_32(ctx, v232);
                    if let Some(v251) = v250 {
                        let v252 = constructor_put_in_reg_zext32(ctx, v231);
                        let v253 = constructor_mov_to_fpu(ctx, v252, &ScalarSize::Size32);
                        let v254 = constructor_output_reg(ctx, v253);
                        // Rule at src/isa/aarch64/lower.isle line 269.
                        return Some(v254);
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v233 = C::put_in_regs(ctx, v231);
                        let v3 = C::value_type(ctx, v2);
                        let v232 = C::value_type(ctx, v231);
                        let v1043 = constructor_lower_bmask(ctx, v3, v232, v233);
                        let v1044 = C::output(ctx, v1043);
                        // Rule at src/isa/aarch64/lower.isle line 1771.
                        return Some(v1044);
                    }
                }
                &Opcode::Ireduce => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1071 = C::ty_int_ref_scalar_64(ctx, v3);
                        if let Some(v1072) = v1071 {
                            let v233 = C::put_in_regs(ctx, v231);
                            let v234 = C::value_regs_get(ctx, v233, 0x0);
                            let v1084 = constructor_output_reg(ctx, v234);
                            // Rule at src/isa/aarch64/lower.isle line 1844.
                            return Some(v1084);
                        }
                    }
                }
                &Opcode::SwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v241 = C::put_in_reg(ctx, v231);
                        let v3 = C::value_type(ctx, v2);
                        let v1425 = &constructor_lane_size(ctx, v3);
                        let v1426 =
                            constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v241, false, v1425);
                        let v1427 = constructor_output_reg(ctx, v1426);
                        // Rule at src/isa/aarch64/lower.isle line 2186.
                        return Some(v1427);
                    }
                }
                &Opcode::SwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1428 = &constructor_lane_size(ctx, v570);
                            let v1429 =
                                constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v241, true, v1428);
                            let v1430 = constructor_output_reg(ctx, v1429);
                            // Rule at src/isa/aarch64/lower.isle line 2191.
                            return Some(v1430);
                        }
                        let v1239 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1240) = v1239 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1432 = constructor_fpu_move_from_vec(
                                ctx,
                                v241,
                                0x1,
                                &VectorSize::Size32x2,
                            );
                            let v1433 = &constructor_lane_size(ctx, v3);
                            let v1434 = constructor_vec_extend(
                                ctx,
                                &VecExtendOp::Sxtl,
                                v1432,
                                false,
                                v1433,
                            );
                            let v1435 = constructor_output_reg(ctx, v1434);
                            // Rule at src/isa/aarch64/lower.isle line 2194.
                            return Some(v1435);
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v1425 = &constructor_lane_size(ctx, v3);
                        let v1868 =
                            constructor_vec_extend(ctx, &VecExtendOp::Sxtl, v241, true, v1425);
                        let v1869 = constructor_output_reg(ctx, v1868);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 92.
                        return Some(v1869);
                    }
                }
                &Opcode::UwidenLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v241 = C::put_in_reg(ctx, v231);
                        let v3 = C::value_type(ctx, v2);
                        let v1425 = &constructor_lane_size(ctx, v3);
                        let v1437 =
                            constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v241, false, v1425);
                        let v1438 = constructor_output_reg(ctx, v1437);
                        // Rule at src/isa/aarch64/lower.isle line 2201.
                        return Some(v1438);
                    }
                }
                &Opcode::UwidenHigh => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v569 = C::ty_vec128(ctx, v3);
                        if let Some(v570) = v569 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1428 = &constructor_lane_size(ctx, v570);
                            let v1439 =
                                constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v241, true, v1428);
                            let v1440 = constructor_output_reg(ctx, v1439);
                            // Rule at src/isa/aarch64/lower.isle line 2206.
                            return Some(v1440);
                        }
                        let v1239 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1240) = v1239 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v1432 = constructor_fpu_move_from_vec(
                                ctx,
                                v241,
                                0x1,
                                &VectorSize::Size32x2,
                            );
                            let v1433 = &constructor_lane_size(ctx, v3);
                            let v1441 = constructor_vec_extend(
                                ctx,
                                &VecExtendOp::Uxtl,
                                v1432,
                                false,
                                v1433,
                            );
                            let v1442 = constructor_output_reg(ctx, v1441);
                            // Rule at src/isa/aarch64/lower.isle line 2209.
                            return Some(v1442);
                        }
                        let v241 = C::put_in_reg(ctx, v231);
                        let v1425 = &constructor_lane_size(ctx, v3);
                        let v1870 =
                            constructor_vec_extend(ctx, &VecExtendOp::Uxtl, v241, true, v1425);
                        let v1871 = constructor_output_reg(ctx, v1870);
                        // Rule at src/isa/aarch64/lower_dynamic_neon.isle line 97.
                        return Some(v1871);
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v723 = C::def_inst(ctx, v231);
                        if let Some(v724) = v723 {
                            let v725 = &C::inst_data(ctx, v724);
                            match v725 {
                                &InstructionData::BinaryImm8 {
                                    opcode: ref v726,
                                    arg: v727,
                                    imm: v728,
                                } => {
                                    if let &Opcode::Extractlane = v726 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v731 = C::put_in_reg(ctx, v727);
                                            let v729 = C::value_type(ctx, v727);
                                            let v732 = &constructor_lane_size(ctx, v729);
                                            let v730 = C::u8_from_uimm8(ctx, v728);
                                            let v733 =
                                                constructor_mov_from_vec(ctx, v731, v730, v732);
                                            let v734 = constructor_output_reg(ctx, v733);
                                            // Rule at src/isa/aarch64/lower.isle line 1118.
                                            return Some(v734);
                                        }
                                        if v3 == I128 {
                                            let v731 = C::put_in_reg(ctx, v727);
                                            let v729 = C::value_type(ctx, v727);
                                            let v732 = &constructor_lane_size(ctx, v729);
                                            let v730 = C::u8_from_uimm8(ctx, v728);
                                            let v733 =
                                                constructor_mov_from_vec(ctx, v731, v730, v732);
                                            let v747 =
                                                constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                                            let v748 = C::value_regs(ctx, v733, v747);
                                            let v749 = C::output(ctx, v748);
                                            // Rule at src/isa/aarch64/lower.isle line 1137.
                                            return Some(v749);
                                        }
                                    }
                                }
                                &InstructionData::LoadNoOffset {
                                    opcode: ref v735,
                                    arg: v736,
                                    flags: v737,
                                } => {
                                    if let &Opcode::AtomicLoad = v735 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v27 = C::fits_in_64(ctx, v3);
                                        if let Some(v28) = v27 {
                                            let v738 = C::is_sinkable_inst(ctx, v231);
                                            if let Some(v739) = v738 {
                                                let v740 = constructor_sink_atomic_load(ctx, v739);
                                                let v232 = C::value_type(ctx, v231);
                                                let v741 =
                                                    constructor_load_acquire(ctx, v232, v737, v740);
                                                let v742 = constructor_output_reg(ctx, v741);
                                                // Rule at src/isa/aarch64/lower.isle line 1125.
                                                return Some(v742);
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v743 = constructor_put_in_reg_zext64(ctx, v231);
                            let v744 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
                            let v745 = C::value_regs(ctx, v743, v744);
                            let v746 = C::output(ctx, v745);
                            // Rule at src/isa/aarch64/lower.isle line 1132.
                            return Some(v746);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v232 = C::value_type(ctx, v231);
                            let v719 = C::ty_bits(ctx, v232);
                            let v720 = C::ty_bits(ctx, v28);
                            let v721 = constructor_extend(ctx, v241, false, v719, v720);
                            let v722 = constructor_output_reg(ctx, v721);
                            // Rule at src/isa/aarch64/lower.isle line 1113.
                            return Some(v722);
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v723 = C::def_inst(ctx, v231);
                            if let Some(v724) = v723 {
                                let v725 = &C::inst_data(ctx, v724);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref v726,
                                    arg: v727,
                                    imm: v728,
                                } = v725
                                {
                                    if let &Opcode::Extractlane = v726 {
                                        let v729 = C::value_type(ctx, v727);
                                        let v761 = C::not_i64x2(ctx, v729);
                                        if let Some(v762) = v761 {
                                            let v731 = C::put_in_reg(ctx, v727);
                                            let v752 = &constructor_vector_size(ctx, v729);
                                            let v763 = &constructor_size_from_ty(ctx, I64);
                                            let v730 = C::u8_from_uimm8(ctx, v728);
                                            let v764 = constructor_mov_from_vec_signed(
                                                ctx, v731, v730, v752, v763,
                                            );
                                            let v765 = C::imm_shift_from_u8(ctx, 0x3F);
                                            let v766 = constructor_asr_imm(ctx, I64, v764, v765);
                                            let v767 = C::value_regs(ctx, v764, v766);
                                            let v768 = C::output(ctx, v767);
                                            // Rule at src/isa/aarch64/lower.isle line 1170.
                                            return Some(v768);
                                        }
                                        if v729 == I64X2 {
                                            let v731 = C::put_in_reg(ctx, v727);
                                            let v730 = C::u8_from_uimm8(ctx, v728);
                                            let v769 = constructor_mov_from_vec(
                                                ctx,
                                                v731,
                                                v730,
                                                &ScalarSize::Size64,
                                            );
                                            let v770 = C::imm_shift_from_u8(ctx, 0x3F);
                                            let v771 = constructor_asr_imm(ctx, I64, v769, v770);
                                            let v772 = C::value_regs(ctx, v769, v771);
                                            let v773 = C::output(ctx, v772);
                                            // Rule at src/isa/aarch64/lower.isle line 1181.
                                            return Some(v773);
                                        }
                                    }
                                }
                            }
                            let v756 = constructor_put_in_reg_sext64(ctx, v231);
                            let v757 = C::imm_shift_from_u8(ctx, 0x3F);
                            let v758 = constructor_asr_imm(ctx, I64, v756, v757);
                            let v759 = C::value_regs(ctx, v756, v758);
                            let v760 = C::output(ctx, v759);
                            // Rule at src/isa/aarch64/lower.isle line 1160.
                            return Some(v760);
                        }
                        let v27 = C::fits_in_64(ctx, v3);
                        if let Some(v28) = v27 {
                            let v723 = C::def_inst(ctx, v231);
                            if let Some(v724) = v723 {
                                let v725 = &C::inst_data(ctx, v724);
                                if let &InstructionData::BinaryImm8 {
                                    opcode: ref v726,
                                    arg: v727,
                                    imm: v728,
                                } = v725
                                {
                                    if let &Opcode::Extractlane = v726 {
                                        let v731 = C::put_in_reg(ctx, v727);
                                        let v729 = C::value_type(ctx, v727);
                                        let v752 = &constructor_vector_size(ctx, v729);
                                        let v753 = &constructor_size_from_ty(ctx, v28);
                                        let v730 = C::u8_from_uimm8(ctx, v728);
                                        let v754 = constructor_mov_from_vec_signed(
                                            ctx, v731, v730, v752, v753,
                                        );
                                        let v755 = constructor_output_reg(ctx, v754);
                                        // Rule at src/isa/aarch64/lower.isle line 1151.
                                        return Some(v755);
                                    }
                                }
                            }
                            let v241 = C::put_in_reg(ctx, v231);
                            let v232 = C::value_type(ctx, v231);
                            let v719 = C::ty_bits(ctx, v232);
                            let v720 = C::ty_bits(ctx, v28);
                            let v750 = constructor_extend(ctx, v241, true, v719, v720);
                            let v751 = constructor_output_reg(ctx, v750);
                            // Rule at src/isa/aarch64/lower.isle line 1146.
                            return Some(v751);
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v414 = constructor_fpu_rr(
                                ctx,
                                &FPUOp1::Cvt32To64,
                                v241,
                                &ScalarSize::Size32,
                            );
                            let v415 = constructor_output_reg(ctx, v414);
                            // Rule at src/isa/aarch64/lower.isle line 462.
                            return Some(v415);
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32 {
                            let v241 = C::put_in_reg(ctx, v231);
                            let v417 = constructor_fpu_rr(
                                ctx,
                                &FPUOp1::Cvt64To32,
                                v241,
                                &ScalarSize::Size64,
                            );
                            let v418 = constructor_output_reg(ctx, v417);
                            // Rule at src/isa/aarch64/lower.isle line 467.
                            return Some(v418);
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v241 = C::put_in_reg(ctx, v231);
                    let v1393 = constructor_fcvtn(ctx, v241, &ScalarSize::Size32);
                    let v1394 = constructor_output_reg(ctx, v1393);
                    // Rule at src/isa/aarch64/lower.isle line 2135.
                    return Some(v1394);
                }
                &Opcode::FvpromoteLow => {
                    let v241 = C::put_in_reg(ctx, v231);
                    let v1803 = constructor_vec_rr_long(ctx, &VecRRLongOp::Fcvtl32, v241, false);
                    let v1804 = constructor_output_reg(ctx, v1803);
                    // Rule at src/isa/aarch64/lower.isle line 2860.
                    return Some(v1804);
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v232 = C::value_type(ctx, v231);
                        match v232 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v479 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToU64,
                                        v241,
                                        false,
                                        F32,
                                        I64,
                                    );
                                    let v480 = constructor_output_reg(ctx, v479);
                                    // Rule at src/isa/aarch64/lower.isle line 583.
                                    return Some(v480);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v476 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToU32,
                                        v241,
                                        false,
                                        F32,
                                        v319,
                                    );
                                    let v477 = constructor_output_reg(ctx, v476);
                                    // Rule at src/isa/aarch64/lower.isle line 580.
                                    return Some(v477);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v486 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToU64,
                                        v241,
                                        false,
                                        F64,
                                        I64,
                                    );
                                    let v487 = constructor_output_reg(ctx, v486);
                                    // Rule at src/isa/aarch64/lower.isle line 589.
                                    return Some(v487);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v483 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToU32,
                                        v241,
                                        false,
                                        F64,
                                        v319,
                                    );
                                    let v484 = constructor_output_reg(ctx, v483);
                                    // Rule at src/isa/aarch64/lower.isle line 586.
                                    return Some(v484);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v232 = C::value_type(ctx, v231);
                        match v232 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v492 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToI64,
                                        v241,
                                        true,
                                        F32,
                                        I64,
                                    );
                                    let v493 = constructor_output_reg(ctx, v492);
                                    // Rule at src/isa/aarch64/lower.isle line 597.
                                    return Some(v493);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v489 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F32ToI32,
                                        v241,
                                        true,
                                        F32,
                                        v319,
                                    );
                                    let v490 = constructor_output_reg(ctx, v489);
                                    // Rule at src/isa/aarch64/lower.isle line 594.
                                    return Some(v490);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v498 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToI64,
                                        v241,
                                        true,
                                        F64,
                                        I64,
                                    );
                                    let v499 = constructor_output_reg(ctx, v498);
                                    // Rule at src/isa/aarch64/lower.isle line 603.
                                    return Some(v499);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v495 = constructor_fpu_to_int_cvt(
                                        ctx,
                                        &FpuToIntOp::F64ToI32,
                                        v241,
                                        true,
                                        F64,
                                        v319,
                                    );
                                    let v496 = constructor_output_reg(ctx, v495);
                                    // Rule at src/isa/aarch64/lower.isle line 600.
                                    return Some(v496);
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v232 = C::value_type(ctx, v231);
                        match v232 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v537 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToU64,
                                        v241,
                                        false,
                                        I64,
                                    );
                                    let v538 = constructor_output_reg(ctx, v537);
                                    // Rule at src/isa/aarch64/lower.isle line 657.
                                    return Some(v538);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v535 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToU32,
                                        v241,
                                        false,
                                        v319,
                                    );
                                    let v536 = constructor_output_reg(ctx, v535);
                                    // Rule at src/isa/aarch64/lower.isle line 654.
                                    return Some(v536);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v541 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToU64,
                                        v241,
                                        false,
                                        I64,
                                    );
                                    let v542 = constructor_output_reg(ctx, v541);
                                    // Rule at src/isa/aarch64/lower.isle line 663.
                                    return Some(v542);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v539 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToU32,
                                        v241,
                                        false,
                                        v319,
                                    );
                                    let v540 = constructor_output_reg(ctx, v539);
                                    // Rule at src/isa/aarch64/lower.isle line 660.
                                    return Some(v540);
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x20 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v533 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzu,
                                                v241,
                                                v313,
                                            );
                                            let v534 = constructor_output_reg(ctx, v533);
                                            // Rule at src/isa/aarch64/lower.isle line 648.
                                            return Some(v534);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x40 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v533 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzu,
                                                v241,
                                                v313,
                                            );
                                            let v534 = constructor_output_reg(ctx, v533);
                                            // Rule at src/isa/aarch64/lower.isle line 651.
                                            return Some(v534);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v232 = C::value_type(ctx, v231);
                        match v232 {
                            F32 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v548 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToI64,
                                        v241,
                                        true,
                                        I64,
                                    );
                                    let v549 = constructor_output_reg(ctx, v548);
                                    // Rule at src/isa/aarch64/lower.isle line 677.
                                    return Some(v549);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v546 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F32ToI32,
                                        v241,
                                        true,
                                        v319,
                                    );
                                    let v547 = constructor_output_reg(ctx, v546);
                                    // Rule at src/isa/aarch64/lower.isle line 674.
                                    return Some(v547);
                                }
                            }
                            F64 => {
                                let v3 = C::value_type(ctx, v2);
                                if v3 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v552 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToI64,
                                        v241,
                                        true,
                                        I64,
                                    );
                                    let v553 = constructor_output_reg(ctx, v552);
                                    // Rule at src/isa/aarch64/lower.isle line 683.
                                    return Some(v553);
                                }
                                let v318 = C::fits_in_32(ctx, v3);
                                if let Some(v319) = v318 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v550 = constructor_fpu_to_int_cvt_sat(
                                        ctx,
                                        &FpuToIntOp::F64ToI32,
                                        v241,
                                        true,
                                        v319,
                                    );
                                    let v551 = constructor_output_reg(ctx, v550);
                                    // Rule at src/isa/aarch64/lower.isle line 680.
                                    return Some(v551);
                                }
                            }
                            _ => {}
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x20 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v544 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzs,
                                                v241,
                                                v313,
                                            );
                                            let v545 = constructor_output_reg(ctx, v544);
                                            // Rule at src/isa/aarch64/lower.isle line 668.
                                            return Some(v545);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x40 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v544 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Fcvtzs,
                                                v241,
                                                v313,
                                            );
                                            let v545 = constructor_output_reg(ctx, v544);
                                            // Rule at src/isa/aarch64/lower.isle line 671.
                                            return Some(v545);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v232 = C::value_type(ctx, v231);
                                if v232 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v512 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF32, v241);
                                    let v513 = constructor_output_reg(ctx, v512);
                                    // Rule at src/isa/aarch64/lower.isle line 620.
                                    return Some(v513);
                                }
                                let v503 = C::fits_in_32(ctx, v232);
                                if let Some(v504) = v503 {
                                    let v252 = constructor_put_in_reg_zext32(ctx, v231);
                                    let v506 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF32, v252);
                                    let v507 = constructor_output_reg(ctx, v506);
                                    // Rule at src/isa/aarch64/lower.isle line 614.
                                    return Some(v507);
                                }
                            }
                            F64 => {
                                let v232 = C::value_type(ctx, v231);
                                if v232 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v515 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U64ToF64, v241);
                                    let v516 = constructor_output_reg(ctx, v515);
                                    // Rule at src/isa/aarch64/lower.isle line 623.
                                    return Some(v516);
                                }
                                let v503 = C::fits_in_32(ctx, v232);
                                if let Some(v504) = v503 {
                                    let v252 = constructor_put_in_reg_zext32(ctx, v231);
                                    let v509 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::U32ToF64, v252);
                                    let v510 = constructor_output_reg(ctx, v509);
                                    // Rule at src/isa/aarch64/lower.isle line 617.
                                    return Some(v510);
                                }
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v232 = C::value_type(ctx, v231);
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x20 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v501 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Ucvtf,
                                                v241,
                                                v313,
                                            );
                                            let v502 = constructor_output_reg(ctx, v501);
                                            // Rule at src/isa/aarch64/lower.isle line 608.
                                            return Some(v502);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v232 = C::value_type(ctx, v231);
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x40 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v501 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Ucvtf,
                                                v241,
                                                v313,
                                            );
                                            let v502 = constructor_output_reg(ctx, v501);
                                            // Rule at src/isa/aarch64/lower.isle line 611.
                                            return Some(v502);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v232 = C::value_type(ctx, v231);
                                if v232 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v527 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF32, v241);
                                    let v528 = constructor_output_reg(ctx, v527);
                                    // Rule at src/isa/aarch64/lower.isle line 640.
                                    return Some(v528);
                                }
                                let v503 = C::fits_in_32(ctx, v232);
                                if let Some(v504) = v503 {
                                    let v320 = constructor_put_in_reg_sext32(ctx, v231);
                                    let v521 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF32, v320);
                                    let v522 = constructor_output_reg(ctx, v521);
                                    // Rule at src/isa/aarch64/lower.isle line 634.
                                    return Some(v522);
                                }
                            }
                            F64 => {
                                let v232 = C::value_type(ctx, v231);
                                if v232 == I64 {
                                    let v241 = C::put_in_reg(ctx, v231);
                                    let v530 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I64ToF64, v241);
                                    let v531 = constructor_output_reg(ctx, v530);
                                    // Rule at src/isa/aarch64/lower.isle line 643.
                                    return Some(v531);
                                }
                                let v503 = C::fits_in_32(ctx, v232);
                                if let Some(v504) = v503 {
                                    let v320 = constructor_put_in_reg_sext32(ctx, v231);
                                    let v524 =
                                        constructor_int_to_fpu(ctx, &IntToFpuOp::I32ToF64, v320);
                                    let v525 = constructor_output_reg(ctx, v524);
                                    // Rule at src/isa/aarch64/lower.isle line 637.
                                    return Some(v525);
                                }
                            }
                            _ => {}
                        }
                        let v117 = C::multi_lane(ctx, v3);
                        if let Some(v118) = v117 {
                            match v118.0 {
                                0x20 => {
                                    let v232 = C::value_type(ctx, v231);
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x20 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v518 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Scvtf,
                                                v241,
                                                v313,
                                            );
                                            let v519 = constructor_output_reg(ctx, v518);
                                            // Rule at src/isa/aarch64/lower.isle line 628.
                                            return Some(v519);
                                        }
                                    }
                                }
                                0x40 => {
                                    let v232 = C::value_type(ctx, v231);
                                    let v255 = C::multi_lane(ctx, v232);
                                    if let Some(v256) = v255 {
                                        if v256.0 == 0x40 {
                                            let v241 = C::put_in_reg(ctx, v231);
                                            let v313 = &constructor_vector_size(ctx, v3);
                                            let v518 = constructor_vec_misc(
                                                ctx,
                                                &VecMisc2::Scvtf,
                                                v241,
                                                v313,
                                            );
                                            let v519 = constructor_output_reg(ctx, v518);
                                            // Rule at src/isa/aarch64/lower.isle line 631.
                                            return Some(v519);
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v232 = C::value_type(ctx, v231);
                    if v232 == I128 {
                        let v233 = C::put_in_regs(ctx, v231);
                        let v234 = C::value_regs_get(ctx, v233, 0x0);
                        let v235 = C::value_reg(ctx, v234);
                        let v236 = C::value_regs_get(ctx, v233, 0x1);
                        let v237 = C::value_reg(ctx, v236);
                        let v238 = C::output_pair(ctx, v235, v237);
                        // Rule at src/isa/aarch64/lower.isle line 246.
                        return Some(v238);
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v1231,
            constant_handle: v1232,
        } => {
            if let &Opcode::Vconst = v1231 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v1237 = C::u64_from_constant(ctx, v1232);
                    if let Some(v1238) = v1237 {
                        let v3 = C::value_type(ctx, v2);
                        let v1239 = C::ty_vec64_ctor(ctx, v3);
                        if let Some(v1240) = v1239 {
                            let v1241 = constructor_constant_f64(ctx, v1238);
                            let v1242 = constructor_output_reg(ctx, v1241);
                            // Rule at src/isa/aarch64/lower.isle line 2009.
                            return Some(v1242);
                        }
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v569 = C::ty_vec128(ctx, v3);
                    if let Some(v570) = v569 {
                        let v1233 = C::u128_from_constant(ctx, v1232);
                        if let Some(v1234) = v1233 {
                            let v1235 = constructor_constant_f128(ctx, v1234);
                            let v1236 = constructor_output_reg(ctx, v1235);
                            // Rule at src/isa/aarch64/lower.isle line 2006.
                            return Some(v1236);
                        }
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1466,
            global_value: v1467,
        } => {
            match v1466 {
                &Opcode::SymbolValue => {
                    let v1468 = C::symbol_value_data(ctx, v1467);
                    if let Some(v1469) = v1468 {
                        let v1473 = C::box_external_name(ctx, v1469.0);
                        let v1474 = constructor_load_ext_name(ctx, v1473, v1469.2);
                        let v1475 = constructor_output_reg(ctx, v1474);
                        // Rule at src/isa/aarch64/lower.isle line 2243.
                        return Some(v1475);
                    }
                }
                &Opcode::TlsValue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1468 = C::symbol_value_data(ctx, v1467);
                        if let Some(v1469) = v1468 {
                            let v3 = C::value_type(ctx, v2);
                            let v1797 = &C::tls_model(ctx, v3);
                            match v1797 {
                                &TlsModel::ElfGd => {
                                    let v1798 = constructor_elf_tls_get_addr(ctx, v1469.0);
                                    let v1799 = constructor_output_reg(ctx, v1798);
                                    // Rule at src/isa/aarch64/lower.isle line 2852.
                                    return Some(v1799);
                                }
                                &TlsModel::Macho => {
                                    let v1800 = constructor_macho_tls_get_addr(ctx, v1469.0);
                                    let v1801 = constructor_output_reg(ctx, v1800);
                                    // Rule at src/isa/aarch64/lower.isle line 2855.
                                    return Some(v1801);
                                }
                                _ => {}
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v15,
            imm: v16,
        } => {
            if let &Opcode::F32const = v15 {
                let v17 = C::u32_from_ieee32(ctx, v16);
                let v18 = constructor_constant_f32(ctx, v17);
                let v19 = constructor_output_reg(ctx, v18);
                // Rule at src/isa/aarch64/lower.isle line 29.
                return Some(v19);
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v20,
            imm: v21,
        } => {
            if let &Opcode::F64const = v20 {
                let v22 = C::u64_from_ieee64(ctx, v21);
                let v23 = constructor_constant_f64(ctx, v22);
                let v24 = constructor_output_reg(ctx, v23);
                // Rule at src/isa/aarch64/lower.isle line 34.
                return Some(v24);
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v9 = constructor_imm(ctx, v3, &ImmExtend::Zero, v7);
                    let v10 = constructor_output_reg(ctx, v9);
                    // Rule at src/isa/aarch64/lower.isle line 19.
                    return Some(v10);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v140,
            arg: v141,
            table: v142,
        } => {
            if let &Opcode::BrTable = v140 {
                let v143 = C::jump_table_targets(ctx, arg1);
                if let Some(v144) = v143 {
                    let v147 = C::jump_table_size(ctx, &v144.1);
                    let v148 = C::targets_jt_space(ctx, &v144.1);
                    let v149 = &constructor_emit_island(ctx, v148);
                    let v150 = constructor_side_effect(ctx, v149);
                    let v151 = constructor_put_in_reg_zext32(ctx, v141);
                    let v152 = C::u32_as_u64(ctx, v147);
                    let v153 = constructor_br_table_impl(ctx, v152, v151, v144.0, &v144.1);
                    // Rule at src/isa/aarch64/lower.isle line 2928.
                    return Some(v153);
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v2,
            arg: v3,
            blocks: ref v4,
        } => {
            if let &Opcode::Brif = v2 {
                let v21 = C::two_targets(ctx, arg1);
                if let Some(v22) = v21 {
                    let v77 = C::def_inst(ctx, v3);
                    if let Some(v78) = v77 {
                        let v79 = &C::inst_data(ctx, v78);
                        match v79 {
                            &InstructionData::Binary {
                                opcode: ref v80,
                                args: ref v81,
                            } => {
                                if let &Opcode::Band = v80 {
                                    let v82 = C::unpack_value_array_2(ctx, v81);
                                    let v86 = C::def_inst(ctx, v82.1);
                                    if let Some(v87) = v86 {
                                        let v88 = &C::inst_data(ctx, v87);
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v89,
                                            imm: v90,
                                        } = v88
                                        {
                                            if let &Opcode::Iconst = v89 {
                                                let v85 = C::value_type(ctx, v82.0);
                                                let v91 = C::u64_from_imm64(ctx, v90);
                                                let v92 =
                                                    C::test_and_compare_bit_const(ctx, v85, v91);
                                                if let Some(v93) = v92 {
                                                    let v94 = C::branch_target(ctx, v22.0);
                                                    let v95 = C::branch_target(ctx, v22.1);
                                                    let v96 = C::put_in_reg(ctx, v82.0);
                                                    let v97 =
                                                        &constructor_tbnz(ctx, v94, v95, v96, v93);
                                                    let v98 =
                                                        constructor_emit_side_effect(ctx, v97);
                                                    // Rule at src/isa/aarch64/lower.isle line 2902.
                                                    return Some(v98);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &InstructionData::IntCompare {
                                opcode: ref v99,
                                args: ref v100,
                                cond: ref v101,
                            } => {
                                if let &Opcode::Icmp = v99 {
                                    if let &IntCC::Equal = v101 {
                                        let v102 = C::unpack_value_array_2(ctx, v100);
                                        let v105 = C::def_inst(ctx, v102.0);
                                        if let Some(v106) = v105 {
                                            let v107 = &C::inst_data(ctx, v106);
                                            if let &InstructionData::Binary {
                                                opcode: ref v108,
                                                args: ref v109,
                                            } = v107
                                            {
                                                if let &Opcode::Band = v108 {
                                                    let v110 = C::unpack_value_array_2(ctx, v109);
                                                    let v113 = C::value_type(ctx, v110.0);
                                                    let v114 = C::fits_in_64(ctx, v113);
                                                    if let Some(v115) = v114 {
                                                        let v116 = C::def_inst(ctx, v110.1);
                                                        if let Some(v117) = v116 {
                                                            let v118 = &C::inst_data(ctx, v117);
                                                            if let &InstructionData::UnaryImm {
                                                                opcode: ref v119,
                                                                imm: v120,
                                                            } = v118
                                                            {
                                                                if let &Opcode::Iconst = v119 {
                                                                    let v122 =
                                                                        C::def_inst(ctx, v102.1);
                                                                    if let Some(v123) = v122 {
                                                                        let v124 = &C::inst_data(
                                                                            ctx, v123,
                                                                        );
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v125,
                                                                            imm: v126,
                                                                        } = v124 {
                                                                            if let &Opcode::Iconst = v125 {
                                                                                let v127 = C::u64_from_imm64(ctx, v126);
                                                                                if v127 == 0x0 {
                                                                                    let v121 = C::u64_from_imm64(ctx, v120);
                                                                                    let v128 = C::test_and_compare_bit_const(ctx, v115, v121);
                                                                                    if let Some(v129) = v128 {
                                                                                        let v94 = C::branch_target(ctx, v22.0);
                                                                                        let v95 = C::branch_target(ctx, v22.1);
                                                                                        let v130 = C::put_in_reg(ctx, v110.0);
                                                                                        let v131 = &constructor_tbz(ctx, v94, v95, v130, v129);
                                                                                        let v132 = constructor_emit_side_effect(ctx, v131);
                                                                                        // Rule at src/isa/aarch64/lower.isle line 2908.
                                                                                        return Some(v132);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                    let v5 = C::maybe_uextend(ctx, v3);
                    if let Some(v6) = v5 {
                        let v7 = C::def_inst(ctx, v6);
                        if let Some(v8) = v7 {
                            let v9 = &C::inst_data(ctx, v8);
                            match v9 {
                                &InstructionData::FloatCompare {
                                    opcode: ref v35,
                                    args: ref v36,
                                    cond: ref v37,
                                } => {
                                    if let &Opcode::Fcmp = v35 {
                                        let v38 = C::unpack_value_array_2(ctx, v36);
                                        let v41 = C::value_type(ctx, v38.0);
                                        let v42 = C::ty_scalar_float(ctx, v41);
                                        if let Some(v43) = v42 {
                                            let v44 = &C::fp_cond_code(ctx, v37);
                                            let v45 = &constructor_scalar_size(ctx, v43);
                                            let v46 = C::put_in_reg(ctx, v38.0);
                                            let v47 = C::put_in_reg(ctx, v38.1);
                                            let v48 = &constructor_fpu_cmp(ctx, v45, v46, v47);
                                            let v49 = C::branch_target(ctx, v22.0);
                                            let v50 = C::branch_target(ctx, v22.1);
                                            let v51 = C::cond_br_cond(ctx, v44);
                                            let v52 = &constructor_cond_br(ctx, v49, v50, v51);
                                            let v53 =
                                                &constructor_with_flags_side_effect(ctx, v48, v52);
                                            let v54 = constructor_emit_side_effect(ctx, v53);
                                            // Rule at src/isa/aarch64/lower.isle line 2876.
                                            return Some(v54);
                                        }
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v10,
                                    args: ref v11,
                                    cond: ref v12,
                                } => {
                                    if let &Opcode::Icmp = v10 {
                                        let v13 = C::unpack_value_array_2(ctx, v11);
                                        let v16 = C::value_type(ctx, v13.0);
                                        let v25 = &constructor_lower_icmp_into_flags(
                                            ctx, v12, v13.0, v13.1, v16,
                                        );
                                        let v26 = &constructor_flags_and_cc_cc(ctx, v25);
                                        let v27 = &C::cond_code(ctx, v26);
                                        let v28 = &constructor_flags_and_cc_flags(ctx, v25);
                                        let v29 = C::branch_target(ctx, v22.0);
                                        let v30 = C::branch_target(ctx, v22.1);
                                        let v31 = C::cond_br_cond(ctx, v27);
                                        let v32 = &constructor_cond_br(ctx, v29, v30, v31);
                                        let v33 =
                                            &constructor_with_flags_side_effect(ctx, v28, v32);
                                        let v34 = constructor_emit_side_effect(ctx, v33);
                                        // Rule at src/isa/aarch64/lower.isle line 2866.
                                        return Some(v34);
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    let v55 = C::value_type(ctx, v3);
                    if v55 == I128 {
                        let v56 = &constructor_flags_to_producesflags(ctx, v3);
                        let v57 = C::put_in_regs(ctx, v3);
                        let v59 = C::value_regs_get(ctx, v57, 0x0);
                        let v61 = C::value_regs_get(ctx, v57, 0x1);
                        let v63 = constructor_orr(ctx, I64, v59, v61);
                        let v49 = C::branch_target(ctx, v22.0);
                        let v50 = C::branch_target(ctx, v22.1);
                        let v64 = C::cond_br_not_zero(ctx, v63);
                        let v65 = &constructor_cond_br(ctx, v49, v50, v64);
                        let v66 = &constructor_with_flags_side_effect(ctx, v56, v65);
                        let v67 = constructor_emit_side_effect(ctx, v66);
                        // Rule at src/isa/aarch64/lower.isle line 2884.
                        return Some(v67);
                    }
                    let v68 = C::ty_int_ref_scalar_64(ctx, v55);
                    if let Some(v69) = v68 {
                        let v56 = &constructor_flags_to_producesflags(ctx, v3);
                        let v70 = constructor_put_in_reg_zext64(ctx, v3);
                        let v71 = C::branch_target(ctx, v22.0);
                        let v72 = C::branch_target(ctx, v22.1);
                        let v73 = C::cond_br_not_zero(ctx, v70);
                        let v74 = &constructor_cond_br(ctx, v71, v72, v73);
                        let v75 = &constructor_with_flags_side_effect(ctx, v56, v74);
                        let v76 = constructor_emit_side_effect(ctx, v75);
                        // Rule at src/isa/aarch64/lower.isle line 2893.
                        return Some(v76);
                    }
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v133,
            destination: v134,
        } => {
            if let &Opcode::Jump = v133 {
                let v135 = C::single_target(ctx, arg1);
                if let Some(v136) = v135 {
                    let v137 = C::branch_target(ctx, v136);
                    let v138 = &constructor_aarch64_jump(ctx, v137);
                    let v139 = constructor_emit_side_effect(ctx, v138);
                    // Rule at src/isa/aarch64/lower.isle line 2921.
                    return Some(v139);
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_fmla.
pub fn constructor_lower_fmla<C: Context>(
    ctx: &mut C,
    arg0: &VecALUModOp,
    arg1: Value,
    arg2: Value,
    arg3: Value,
    arg4: &VectorSize,
) -> Reg {
    let v18 = C::def_inst(ctx, arg2);
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Fneg = v21 {
                let v85 = &constructor_neg_fmla(ctx, arg0);
                let v87 = constructor_lower_fmla(ctx, v85, arg1, v22, arg3, arg4);
                // Rule at src/isa/aarch64/lower.isle line 566.
                return v87;
            }
        }
    }
    let v9 = C::def_inst(ctx, arg1);
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Unary {
            opcode: ref v12,
            arg: v13,
        } = v11
        {
            if let &Opcode::Fneg = v12 {
                let v85 = &constructor_neg_fmla(ctx, arg0);
                let v86 = constructor_lower_fmla(ctx, v85, v13, arg2, arg3, arg4);
                // Rule at src/isa/aarch64/lower.isle line 564.
                return v86;
            }
        }
    }
    match arg4 {
        &VectorSize::Size32x4 => {
            if let Some(v19) = v18 {
                let v20 = &C::inst_data(ctx, v19);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v48,
                    arg: v49,
                    flags: v50,
                } = v20
                {
                    if let &Opcode::Bitcast = v48 {
                        let v51 = C::def_inst(ctx, v49);
                        if let Some(v52) = v51 {
                            let v53 = &C::inst_data(ctx, v52);
                            if let &InstructionData::Shuffle {
                                opcode: ref v54,
                                args: ref v55,
                                imm: v56,
                            } = v53
                            {
                                if let &Opcode::Shuffle = v54 {
                                    let v60 = C::shuffle32_from_imm(ctx, v56);
                                    if let Some(v61) = v60 {
                                        let v66 = C::u8_as_u64(ctx, v61.0);
                                        let v67 = C::u64_lt(ctx, v66, 0x4);
                                        if v67 == true {
                                            let v57 = C::unpack_value_array_2(ctx, v55);
                                            if v57.0 == v57.1 {
                                                if v61.0 == v61.1 {
                                                    if v61.0 == v61.2 {
                                                        if v61.0 == v61.3 {
                                                            let v5 = C::put_in_reg(ctx, arg3);
                                                            let v6 = C::put_in_reg(ctx, arg1);
                                                            let v68 = C::put_in_reg(ctx, v57.0);
                                                            let v69 = constructor_vec_fmla_elem(
                                                                ctx, arg0, v5, v6, v68, arg4, v61.0,
                                                            );
                                                            // Rule at src/isa/aarch64/lower.isle line 548.
                                                            return v69;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if let Some(v10) = v9 {
                let v11 = &C::inst_data(ctx, v10);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v25,
                    arg: v26,
                    flags: v27,
                } = v11
                {
                    if let &Opcode::Bitcast = v25 {
                        let v28 = C::def_inst(ctx, v26);
                        if let Some(v29) = v28 {
                            let v30 = &C::inst_data(ctx, v29);
                            if let &InstructionData::Shuffle {
                                opcode: ref v31,
                                args: ref v32,
                                imm: v33,
                            } = v30
                            {
                                if let &Opcode::Shuffle = v31 {
                                    let v37 = C::shuffle32_from_imm(ctx, v33);
                                    if let Some(v38) = v37 {
                                        let v43 = C::u8_as_u64(ctx, v38.0);
                                        let v45 = C::u64_lt(ctx, v43, 0x4);
                                        if v45 == true {
                                            let v34 = C::unpack_value_array_2(ctx, v32);
                                            if v34.0 == v34.1 {
                                                if v38.0 == v38.1 {
                                                    if v38.0 == v38.2 {
                                                        if v38.0 == v38.3 {
                                                            let v5 = C::put_in_reg(ctx, arg3);
                                                            let v14 = C::put_in_reg(ctx, arg2);
                                                            let v46 = C::put_in_reg(ctx, v34.0);
                                                            let v47 = constructor_vec_fmla_elem(
                                                                ctx, arg0, v5, v14, v46, arg4,
                                                                v38.0,
                                                            );
                                                            // Rule at src/isa/aarch64/lower.isle line 545.
                                                            return v47;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        &VectorSize::Size64x2 => {
            if let Some(v19) = v18 {
                let v20 = &C::inst_data(ctx, v19);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v48,
                    arg: v49,
                    flags: v50,
                } = v20
                {
                    if let &Opcode::Bitcast = v48 {
                        let v51 = C::def_inst(ctx, v49);
                        if let Some(v52) = v51 {
                            let v53 = &C::inst_data(ctx, v52);
                            if let &InstructionData::Shuffle {
                                opcode: ref v54,
                                args: ref v55,
                                imm: v56,
                            } = v53
                            {
                                if let &Opcode::Shuffle = v54 {
                                    let v78 = C::shuffle64_from_imm(ctx, v56);
                                    if let Some(v79) = v78 {
                                        let v82 = C::u8_as_u64(ctx, v79.0);
                                        let v83 = C::u64_lt(ctx, v82, 0x2);
                                        if v83 == true {
                                            let v57 = C::unpack_value_array_2(ctx, v55);
                                            if v57.0 == v57.1 {
                                                if v79.0 == v79.1 {
                                                    let v5 = C::put_in_reg(ctx, arg3);
                                                    let v6 = C::put_in_reg(ctx, arg1);
                                                    let v68 = C::put_in_reg(ctx, v57.0);
                                                    let v84 = constructor_vec_fmla_elem(
                                                        ctx, arg0, v5, v6, v68, arg4, v79.0,
                                                    );
                                                    // Rule at src/isa/aarch64/lower.isle line 554.
                                                    return v84;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if let Some(v10) = v9 {
                let v11 = &C::inst_data(ctx, v10);
                if let &InstructionData::LoadNoOffset {
                    opcode: ref v25,
                    arg: v26,
                    flags: v27,
                } = v11
                {
                    if let &Opcode::Bitcast = v25 {
                        let v28 = C::def_inst(ctx, v26);
                        if let Some(v29) = v28 {
                            let v30 = &C::inst_data(ctx, v29);
                            if let &InstructionData::Shuffle {
                                opcode: ref v31,
                                args: ref v32,
                                imm: v33,
                            } = v30
                            {
                                if let &Opcode::Shuffle = v31 {
                                    let v70 = C::shuffle64_from_imm(ctx, v33);
                                    if let Some(v71) = v70 {
                                        let v74 = C::u8_as_u64(ctx, v71.0);
                                        let v76 = C::u64_lt(ctx, v74, 0x2);
                                        if v76 == true {
                                            let v34 = C::unpack_value_array_2(ctx, v32);
                                            if v34.0 == v34.1 {
                                                if v71.0 == v71.1 {
                                                    let v5 = C::put_in_reg(ctx, arg3);
                                                    let v14 = C::put_in_reg(ctx, arg2);
                                                    let v46 = C::put_in_reg(ctx, v34.0);
                                                    let v77 = constructor_vec_fmla_elem(
                                                        ctx, arg0, v5, v14, v46, arg4, v71.0,
                                                    );
                                                    // Rule at src/isa/aarch64/lower.isle line 551.
                                                    return v77;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        _ => {}
    }
    if let Some(v19) = v18 {
        let v20 = &C::inst_data(ctx, v19);
        if let &InstructionData::Unary {
            opcode: ref v21,
            arg: v22,
        } = v20
        {
            if let &Opcode::Splat = v21 {
                let v5 = C::put_in_reg(ctx, arg3);
                let v6 = C::put_in_reg(ctx, arg1);
                let v23 = C::put_in_reg(ctx, v22);
                let v24 = constructor_vec_fmla_elem(ctx, arg0, v5, v6, v23, arg4, 0x0);
                // Rule at src/isa/aarch64/lower.isle line 535.
                return v24;
            }
        }
    }
    if let Some(v10) = v9 {
        let v11 = &C::inst_data(ctx, v10);
        if let &InstructionData::Unary {
            opcode: ref v12,
            arg: v13,
        } = v11
        {
            if let &Opcode::Splat = v12 {
                let v5 = C::put_in_reg(ctx, arg3);
                let v14 = C::put_in_reg(ctx, arg2);
                let v15 = C::put_in_reg(ctx, v13);
                let v17 = constructor_vec_fmla_elem(ctx, arg0, v5, v14, v15, arg4, 0x0);
                // Rule at src/isa/aarch64/lower.isle line 533.
                return v17;
            }
        }
    }
    let v5 = C::put_in_reg(ctx, arg3);
    let v6 = C::put_in_reg(ctx, arg1);
    let v7 = C::put_in_reg(ctx, arg2);
    let v8 = constructor_vec_rrr_mod(ctx, arg0, v5, v6, v7, arg4);
    // Rule at src/isa/aarch64/lower.isle line 528.
    return v8;
}

// Generated as internal constructor for term neg_fmla.
pub fn constructor_neg_fmla<C: Context>(ctx: &mut C, arg0: &VecALUModOp) -> VecALUModOp {
    match arg0 {
        &VecALUModOp::Fmla => {
            // Rule at src/isa/aarch64/lower.isle line 570.
            return VecALUModOp::Fmls;
        }
        &VecALUModOp::Fmls => {
            // Rule at src/isa/aarch64/lower.isle line 571.
            return VecALUModOp::Fmla;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "neg_fmla", "src/isa/aarch64/lower.isle line 569"
    )
}

// Generated as internal constructor for term put_nonzero_in_reg_zext64.
pub fn constructor_put_nonzero_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::nonzero_u64_from_imm64(ctx, v8);
                if let Some(v10) = v9 {
                    let v3 = C::value_type(ctx, arg0);
                    let v12 = constructor_imm(ctx, v3, &ImmExtend::Zero, v10);
                    // Rule at src/isa/aarch64/lower.isle line 978.
                    return v12;
                }
            }
        }
    }
    let v1 = constructor_put_in_reg_zext64(ctx, arg0);
    let v2 = constructor_trap_if_zero_divisor(ctx, v1);
    // Rule at src/isa/aarch64/lower.isle line 973.
    return v2;
}

// Generated as internal constructor for term put_nonzero_in_reg_sext64.
pub fn constructor_put_nonzero_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v4 = C::def_inst(ctx, arg0);
    if let Some(v5) = v4 {
        let v6 = &C::inst_data(ctx, v5);
        if let &InstructionData::UnaryImm {
            opcode: ref v7,
            imm: v8,
        } = v6
        {
            if let &Opcode::Iconst = v7 {
                let v9 = C::nonzero_u64_from_imm64(ctx, v8);
                if let Some(v10) = v9 {
                    let v3 = C::value_type(ctx, arg0);
                    let v12 = constructor_imm(ctx, v3, &ImmExtend::Sign, v10);
                    // Rule at src/isa/aarch64/lower.isle line 1021.
                    return v12;
                }
            }
        }
    }
    let v1 = constructor_put_in_reg_sext64(ctx, arg0);
    let v2 = constructor_trap_if_zero_divisor(ctx, v1);
    // Rule at src/isa/aarch64/lower.isle line 1016.
    return v2;
}

// Generated as internal constructor for term cmp_and_choose.
pub fn constructor_cmp_and_choose<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: bool,
    arg3: Value,
    arg4: Value,
) -> ValueRegs {
    let v14 = C::fits_in_16(ctx, arg0);
    if let Some(v15) = v14 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v16 = C::ty_bits(ctx, v15);
        let v18 = constructor_extend(ctx, v7, arg2, v16, 0x20);
        let v19 = C::put_in_reg(ctx, arg4);
        let v20 = constructor_extend(ctx, v19, arg2, v16, 0x20);
        let v21 = &constructor_operand_size(ctx, v15);
        let v22 = &constructor_cmp(ctx, v21, v18, v20);
        let v23 = &constructor_csel(ctx, arg1, v18, v20);
        let v24 = constructor_with_flags_reg(ctx, v22, v23);
        let v25 = C::value_reg(ctx, v24);
        // Rule at src/isa/aarch64/lower.isle line 1068.
        return v25;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::put_in_reg(ctx, arg3);
        let v8 = C::put_in_reg(ctx, arg4);
        let v9 = &constructor_operand_size(ctx, v2);
        let v10 = &constructor_cmp(ctx, v9, v7, v8);
        let v11 = &constructor_csel(ctx, arg1, v7, v8);
        let v12 = constructor_with_flags_reg(ctx, v10, v11);
        let v13 = C::value_reg(ctx, v12);
        // Rule at src/isa/aarch64/lower.isle line 1060.
        return v13;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmp_and_choose", "src/isa/aarch64/lower.isle line 1059"
    )
}

// Generated as internal constructor for term lower_shl128.
pub fn constructor_lower_shl128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsl(ctx, I64, v3, arg1);
    let v8 = constructor_lsl(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsr_imm(ctx, I64, v3, v13);
    let v15 = constructor_lsr(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v8, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = C::zero_reg(ctx);
    let v22 = &constructor_csel(ctx, &Cond::Ne, v21, v7);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v7, v16);
    let v24 = &constructor_consumes_flags_concat(ctx, v22, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src/isa/aarch64/lower.isle line 1320.
    return v25;
}

// Generated as internal constructor for term do_shift.
pub fn constructor_do_shift<C: Context>(
    ctx: &mut C,
    arg0: &ALUOp,
    arg1: Type,
    arg2: Reg,
    arg3: Value,
) -> Reg {
    let v16 = C::def_inst(ctx, arg3);
    if let Some(v17) = v16 {
        let v18 = &C::inst_data(ctx, v17);
        if let &InstructionData::UnaryImm {
            opcode: ref v19,
            imm: v20,
        } = v18
        {
            if let &Opcode::Iconst = v19 {
                let v21 = C::imm_shift_from_imm64(ctx, arg1, v20);
                if let Some(v22) = v21 {
                    let v23 = constructor_alu_rr_imm_shift(ctx, arg0, arg1, arg2, v22);
                    // Rule at src/isa/aarch64/lower.isle line 1383.
                    return v23;
                }
            }
        }
    }
    match arg1 {
        I32 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0);
            let v13 = constructor_alu_rrr(ctx, arg0, I32, arg2, v8);
            // Rule at src/isa/aarch64/lower.isle line 1374.
            return v13;
        }
        I64 => {
            let v6 = C::put_in_regs(ctx, arg3);
            let v8 = C::value_regs_get(ctx, v6, 0x0);
            let v15 = constructor_alu_rrr(ctx, arg0, I64, arg2, v8);
            // Rule at src/isa/aarch64/lower.isle line 1375.
            return v15;
        }
        _ => {}
    }
    let v2 = C::fits_in_16(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::put_in_regs(ctx, arg3);
        let v8 = C::value_regs_get(ctx, v6, 0x0);
        let v10 = C::shift_mask(ctx, v3);
        let v11 = constructor_and_imm(ctx, I32, v8, v10);
        let v12 = constructor_alu_rrr(ctx, arg0, I32, arg2, v11);
        // Rule at src/isa/aarch64/lower.isle line 1365.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "do_shift", "src/isa/aarch64/lower.isle line 1354"
    )
}

// Generated as internal constructor for term lower_ushr128.
pub fn constructor_lower_ushr128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_lsr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v16 = constructor_orr(ctx, I64, v7, v15);
    let v18 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v19 = &constructor_tst_imm(ctx, I64, arg1, v18);
    let v21 = &constructor_csel(ctx, &Cond::Ne, v8, v16);
    let v22 = C::zero_reg(ctx);
    let v23 = &constructor_csel(ctx, &Cond::Ne, v22, v8);
    let v24 = &constructor_consumes_flags_concat(ctx, v21, v23);
    let v25 = constructor_with_flags(ctx, v19, v24);
    // Rule at src/isa/aarch64/lower.isle line 1427.
    return v25;
}

// Generated as internal constructor for term lower_sshr128.
pub fn constructor_lower_sshr128<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: Reg) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x0);
    let v5 = C::value_regs_get(ctx, arg0, 0x1);
    let v7 = constructor_lsr(ctx, I64, v3, arg1);
    let v8 = constructor_asr(ctx, I64, v5, arg1);
    let v10 = C::zero_reg(ctx);
    let v11 = constructor_orr_not(ctx, I32, v10, arg1);
    let v13 = C::imm_shift_from_u8(ctx, 0x1);
    let v14 = constructor_lsl_imm(ctx, I64, v5, v13);
    let v15 = constructor_lsl(ctx, I64, v14, v11);
    let v17 = C::imm_shift_from_u8(ctx, 0x3F);
    let v18 = constructor_asr_imm(ctx, I64, v5, v17);
    let v19 = constructor_orr(ctx, I64, v7, v15);
    let v21 = C::u64_into_imm_logic(ctx, I64, 0x40);
    let v22 = &constructor_tst_imm(ctx, I64, arg1, v21);
    let v24 = &constructor_csel(ctx, &Cond::Ne, v8, v19);
    let v25 = &constructor_csel(ctx, &Cond::Ne, v18, v8);
    let v26 = &constructor_consumes_flags_concat(ctx, v24, v25);
    let v27 = constructor_with_flags(ctx, v22, v26);
    // Rule at src/isa/aarch64/lower.isle line 1486.
    return v27;
}

// Generated as internal constructor for term small_rotr.
pub fn constructor_small_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v4 = C::rotr_mask(ctx, arg0);
    let v5 = constructor_and_imm(ctx, I32, arg2, v4);
    let v6 = C::ty_bits(ctx, arg0);
    let v7 = C::u8_into_imm12(ctx, v6);
    let v8 = constructor_sub_imm(ctx, I32, v5, v7);
    let v9 = C::zero_reg(ctx);
    let v10 = constructor_sub(ctx, I32, v9, v8);
    let v11 = constructor_lsr(ctx, I32, arg1, v5);
    let v12 = constructor_lsl(ctx, I32, arg1, v10);
    let v13 = constructor_orr(ctx, I32, v12, v11);
    // Rule at src/isa/aarch64/lower.isle line 1605.
    return v13;
}

// Generated as internal constructor for term small_rotr_imm.
pub fn constructor_small_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: ImmShift,
) -> Reg {
    let v4 = constructor_lsr_imm(ctx, I32, arg1, arg2);
    let v5 = C::rotr_opposite_amount(ctx, arg0, arg2);
    let v6 = constructor_lsl_imm(ctx, I32, arg1, v5);
    let v7 = constructor_orr(ctx, I32, v6, v4);
    // Rule at src/isa/aarch64/lower.isle line 1626.
    return v7;
}

// Generated as internal constructor for term lower_clz128.
pub fn constructor_lower_clz128<C: Context>(ctx: &mut C, arg0: ValueRegs) -> ValueRegs {
    let v3 = C::value_regs_get(ctx, arg0, 0x1);
    let v4 = constructor_a64_clz(ctx, I64, v3);
    let v6 = C::value_regs_get(ctx, arg0, 0x0);
    let v7 = constructor_a64_clz(ctx, I64, v6);
    let v9 = C::imm_shift_from_u8(ctx, 0x6);
    let v10 = constructor_lsr_imm(ctx, I64, v4, v9);
    let v11 = constructor_madd(ctx, I64, v7, v10, v4);
    let v14 = constructor_imm(ctx, I64, &ImmExtend::Zero, 0x0);
    let v15 = C::value_regs(ctx, v11, v14);
    // Rule at src/isa/aarch64/lower.isle line 1691.
    return v15;
}

// Generated as internal constructor for term put_in_reg_ext32.
pub fn constructor_put_in_reg_ext32<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: &ArgumentExtension,
) -> Reg {
    match arg1 {
        &ArgumentExtension::Uext => {
            let v3 = constructor_put_in_reg_zext32(ctx, arg0);
            // Rule at src/isa/aarch64/lower.isle line 2612.
            return v3;
        }
        &ArgumentExtension::Sext => {
            let v2 = constructor_put_in_reg_sext32(ctx, arg0);
            // Rule at src/isa/aarch64/lower.isle line 2610.
            return v2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_ext32", "src/isa/aarch64/lower.isle line 2609"
    )
}

// Generated as internal constructor for term overflow_op_small.
pub fn constructor_overflow_op_small<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &ArgumentExtension,
    arg4: &ALUOp,
) -> InstOutput {
    let v5 = &constructor_lower_extend_op(ctx, arg0, arg3);
    let v6 = constructor_put_in_reg_ext32(ctx, arg1, arg3);
    let v7 = C::put_in_reg(ctx, arg2);
    let v8 = constructor_alu_rrr_extend(ctx, arg4, arg0, v6, v7, v5);
    let v10 = &constructor_cmp_extend(ctx, &OperandSize::Size32, v8, v8, v5);
    let v12 = &constructor_cset(ctx, &Cond::Ne);
    let v13 = constructor_with_flags_reg(ctx, v10, v12);
    let v14 = C::value_reg(ctx, v8);
    let v15 = C::value_reg(ctx, v13);
    let v16 = C::output_pair(ctx, v14, v15);
    // Rule at src/isa/aarch64/lower.isle line 2618.
    return v16;
}

// Generated as internal constructor for term overflow_op_normal.
pub fn constructor_overflow_op_normal<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &ALUOp,
    arg4: &Cond,
) -> InstOutput {
    let v5 = C::put_in_reg(ctx, arg1);
    let v6 = C::put_in_reg(ctx, arg2);
    let v7 = &constructor_alu_rrr_with_flags_paired(ctx, arg0, v5, v6, arg3);
    let v8 = &constructor_cset_paired(ctx, arg4);
    let v9 = constructor_with_flags(ctx, v7, v8);
    let v11 = C::value_regs_get(ctx, v9, 0x0);
    let v12 = C::value_reg(ctx, v11);
    let v14 = C::value_regs_get(ctx, v9, 0x1);
    let v15 = C::value_reg(ctx, v14);
    let v16 = C::output_pair(ctx, v12, v15);
    // Rule at src/isa/aarch64/lower.isle line 2647.
    return v16;
}

// Generated as internal constructor for term overflow_op_128.
pub fn constructor_overflow_op_128<C: Context>(
    ctx: &mut C,
    arg0: Value,
    arg1: Value,
    arg2: &ALUOp,
    arg3: &ALUOp,
    arg4: &Cond,
) -> InstOutput {
    let v5 = C::put_in_regs(ctx, arg0);
    let v7 = C::value_regs_get(ctx, v5, 0x0);
    let v9 = C::value_regs_get(ctx, v5, 0x1);
    let v10 = C::put_in_regs(ctx, arg1);
    let v11 = C::value_regs_get(ctx, v10, 0x0);
    let v12 = C::value_regs_get(ctx, v10, 0x1);
    let v14 = &constructor_alu_rrr_with_flags_paired(ctx, I64, v7, v11, arg2);
    let v15 = &constructor_alu_rrr_with_flags_chained(ctx, I64, v9, v12, arg3);
    let v16 = &constructor_cset_paired(ctx, arg4);
    let v17 = &constructor_with_flags_chained(ctx, v14, v15, v16);
    let v18 = constructor_multi_reg_to_pair_and_single(ctx, v17);
    // Rule at src/isa/aarch64/lower.isle line 2658.
    return v18;
}
